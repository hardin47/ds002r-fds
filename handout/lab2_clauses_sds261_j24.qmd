---
title: "Lab 2 - SQL clauses"
author: "your name goes here"
date: "due 10am Wednesday, January 10, 2024"
format: 
  unilur-html: default
  unilur-html+solution:
    output-file: lab2_clauses_sds261_j24_sol.html
execute:
  echo: true
  warning: false
  message: false
---

```{r}
#| unilur-solution: true

library(tidyverse)
library(DBI)
library(RMariaDB)
library(dbplyr)
library(mdsr)
```

Today's lab will provide practice working with **SQL** clauses in **DBeaver**.  Don't forget the importance of the <a href = "https://st47s.com/SDS261/Notes/03-sql-verbs.html" target = "_blank">order of the **SQL** clauses</a>. 

The goals for lab 2 include:

* working with clauses in **SQL**.
* understanding each of `SELECT`, `FROM`, `WHERE`, `GROUP BY`, `HAVING`, `ORDER BY`, and `LIMIT`.
* practicing running **SQL** queries in a **SQL** client, **DBeaver**.



## Advice for turning in the assignment

* Be sure to indicate (in the .sql file) which problem is being answered with which **SQL** code.  Use the following syntax to comment within a .sql file: `/* here is where comments go */`.  Indeed, feel free to *copy the question* into the .sql file so that you have it for your own records.

* save the .Rproj file somewhere you can find it.  Don't keep everything in your downloads folder.  Maybe make a folder called `SDS261` or something.  That folder could live on your Desktop.  Or maybe in your Dropbox.  

* The **SQL** document should be saved in the **R** Project as `lab2-sds261-yourlastname-yourfirstname.sql`.  You will have to navigate to the **R** Project to save the **DBeaver** file in the correct place.

* Connect to the `nyctaxi` database, which contains the `yellow_old` table.  See README file (or lab 1) for connection details.

```{r}
#| echo: false

con_taxi <- DBI::dbConnect(
  RMariaDB::MariaDB(),
  dbname = "nyctaxi",
  host = Sys.getenv("MDSR_HOST"),
  user = Sys.getenv("MDSR_USER"),
  password = Sys.getenv("MDSR_PWD")
)
```


##  Assignment



1. Select the `trip_distance` and `total_amount` columns from the `yellow_old` table. For safety (i.e., not crashing your computer), only return the first 5 rows.

```{sql}
#| connection: con_taxi
#| unilur-solution: true

SELECT trip_distance, total_amount
FROM yellow_old
LIMIT 0, 5;
```


2. Using the `AVG()` function, find the average `total_amount` paid in the `yellow_old` table.

```{sql}
#| connection: con_taxi
#| unilur-solution: true

SELECT AVG(total_amount)
FROM yellow_old
LIMIT 0, 5;
```
```{block}
#| unilur-solution: true

The average total fare was \$14.76
```

3. Which type of `payment_type` had the highest `total_amount`?  How much was it?

```{sql}
#| connection: con_taxi
#| unilur-solution: true

SELECT MAX(total_amount), payment_type
FROM yellow_old
GROUP BY payment_type
LIMIT 0, 5;
```

```{block}
#| unilur-solution: true

The highest total amount was a cash payment for \$1007.51.  Yikes, that's a big bill for a taxi ride.  Note that the second highest payment was \$950.30 for a *no charge* ride.  How does that happen?
```

4. How many taxi trips happened on each day of the week?  Sort your results so that the day of the week with the fewest rides is at the top of the output.

```{sql}
#| connection: con_taxi
#| unilur-solution: true

SELECT COUNT(*) AS num_transactions, 
       DAYNAME(STR_TO_DATE(pickup_datetime, "%Y-%m-%d %T")) AS wday
FROM yellow_old
GROUP BY wday
ORDER BY num_transactions;
```

```{block}
#| unilur-solution: true

Unsurprisingly, the most rides were on the weekends.  Monday is a close third, possibly a reflection of how hard it is to get out of bed on Monday mornings.
```

5. Which day of the week had the longest `trip_distance`?  Sort the results to have the day of the week with the longest rides at the top of the output. 

```{sql}
#| connection: con_taxi
#| unilur-solution: true

SELECT MAX(trip_distance) AS long_trip, 
       DAYNAME(STR_TO_DATE(pickup_datetime, "%Y-%m-%d %T")) AS wday
FROM yellow_old
GROUP BY wday
ORDER BY long_trip DESC;
```

```{block}
#| unilur-solution: true

Holy cow, one of the trips is 5,005,013 miles!  That can't be right!??!
```

6. How many different `rate_code`s are given in the dataset?

```{sql}
#| connection: con_taxi
#| unilur-solution: true

SELECT DISTINCT rate_code
FROM yellow_old
LIMIT 0, 20;
```

```{sql}
#| connection: con_taxi
#| unilur-solution: true

SELECT COUNT(*) AS num_code, rate_code
FROM yellow_old
GROUP BY rate_code
ORDER BY num_code DESC
LIMIT 0, 20;
```


```{block}
#| unilur-solution: true

There are 11 different rate codes. Rate codes are different because the taxi charges you a different rate if, for example, you go to JFK or go very far away.

The second solution not only gave rate codes, but also the number of transactions for each rate code.
```

7. Start with the following lines of query:

```{sql}
#| connection: con_taxi
#| eval: false

SELECT AVG(trip_distance) AS avg_trip, 
       DAYNAME(STR_TO_DATE(pickup_datetime, "%Y-%m-%d %T")) AS wday
```

* Can you use `WHERE` to subset only Saturday and Sunday to find the average trip distance across the weekend?  Why or why not?
* Can you use `HAVING` to subset only Saturday and Sunday to find the average trip distance across the weekend?  Why or why not?


```{sql}
#| connection: con_taxi
#| unilur-solution: true

SELECT AVG(trip_distance) AS avg_trip, 
       DAYNAME(STR_TO_DATE(pickup_datetime, "%Y-%m-%d %T")) AS wday
FROM yellow_old
GROUP BY wday
HAVING wday = "Saturday" | wday = "Sunday"
LIMIT 0,8;
```

```{block}
#| unilur-solution: true

Neither `WHERE` nor `HAVING` can be used with this query to find the average trip distance across the weekend days.

`WHERE` cannot be used because `wday` is not in the original dataset. `WHERE` works on the original data.

`HAVING` cannot be used because the average has already been taken across the groups, so there isn't any way to go back and re-calculate the average across Saturday and Sunday.  `HAVING` works on the results set.
```

<!--Approach: 
What do you want?	
the movies.
Which tables and for what?
movies for the movie name
Conditions?
The movies must be sci-fi movies
The categories need to be ordered by the investment ratio
Anything else?
Semicolon-->



```{r}
#| echo: false

dbDisconnect(con_taxi, shutdown = TRUE)
```