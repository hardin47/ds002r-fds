---
title: Introduction to DS002R
subtitle: Foundations of Data Science
author: "Jo Hardin"
date: "August 25, 2025"
date-format: long
format:
  revealjs:
    incremental: false
    scrollable: true
    slide-number: true
    show-slide-number: all
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
---

```{r}
#| include: false

source("../_common.R")
fontawesome::fa_html_dependency()
options(pillar.width = 70)
```

# Agenda 8/25/25

1. [Syllabus](../syllabus/)
2. What is Data Science?
3. Tools

::: {.callout-important}
Before Monday, listen to the <a href = "https://nssdeviations.com/71-compromised-shoe-situation" target = "_blank">full conversation</a> of Not So Standard Deviations - Compromised Shoe Situation.
:::

::: {.callout-important}
I need your GitHub user name - please email it to me.
:::

## Course structure
* bi-weekly HW (to GitHub + Gradescope)
* bi-weekly quizzes 
* mini-projects
* in-class activities / clickers
* ethical considerations


## Additional details
* Canvas has all the links
  1. course website -- almost everything
  2. class notes
  3. Canvas page -- solutions and assignments
* no computers (tablets fine)
* good communication
* TidyTuesday

## [Syllabus](../syllabus/)
:::: {.columns}

::: {.column width="50%"}
* office hours
* mentor sessions
* anonymous feedback
* dates for assignments
:::

::: {.column width="50%"}
* links to resources
* HW grading
* project information
:::
::::

::: {.callout-important}
I need your GitHub user name - please email it to me.
:::

## Participation

For full participation points, you'll need to share at least one R-tip-of-the day.  

* Beginning of class, I'll ask if anyone has ideas
* You share the tip
* I'll post the tip online


# What is Data Science?

Data science lives at the intersection between statistics, computer science, and discipline knowledge.
It is generally the process by which we gain insight from data.

## V1.0 - Drew Conway

```{r, out.width = "800px", echo=FALSE, fig.cap = "2010: http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram"}
knitr::include_graphics("../images/venn1.png")
```


## V2.0 - Steve Geringer

```{r, out.width = "800px", echo=FALSE, fig.cap = "2014: http://www.anlytcs.com/2014/01/data-science-venn-diagram-v20.html"}
knitr::include_graphics("../images/venn2.png")
```



## V3.0 - Writuparna Banerjee

```{r, out.width = "800px", echo=FALSE, fig.cap = "2020: https://medium.com/@writuparnabanerjee/the-difference-in-the-career-options-in-data-science-data-scientist-vs-data-engineer-vs-data-33209d0ac880"}
knitr::include_graphics("../images/venn3.png")
```



## V4.0 - Joel Grus


```{r, out.width = "800px", echo=FALSE, fig.cap = "2013: https://posit.co/wp-content/themes/Posit/public/markdown-blogs/role-of-the-data-scientist/index.html?wtime=%7Bseek_to_second_number%7D"}
knitr::include_graphics("../images/venn4.png")
```

## Data Science Overview

```{r, out.width = "800px", echo=FALSE, fig.cap = "Based on [https://www.effectivedatastorytelling.com/post/a-deeper-dive-into-lego-bricks-and-data-stories](https://www.effectivedatastorytelling.com/post/a-deeper-dive-into-lego-bricks-and-data-stories), original source: [https://www.linkedin.com/learning/instructors/bill-shander](https://www.linkedin.com/learning/instructors/bill-shander)"}
knitr::include_graphics("../images/data_lego2.png")
```

## Data Science in DS 002R

```{r}
#| echo: false
tribble(~`DS workflow`, ~`in DS002R`, ~`beyond DS002R`,
       'data acquisition', 'web scraping, relational databases', 'APIs',
       'data exploration', 'wrangling, strings, regular expressions', 'natural language processing',
       'data visualization', 'grammar of graphics', 'animations',
       'data conclusions', 'iteration, permutation tests', 'predictive modeling, machine learning, AI',
       'data communication', 'yes!', 'yes!')  |>  
  gt::gt() |> 
  gt::fmt_markdown(columns = everything()) |> 
    gt::cols_width(`DS workflow` ~ pct(30),
                 everything() ~ pct(35))
```


## Data Science in the Wild

Data science extracts knowledge from within a particular domain of inquiry.  Examples from Pomona!

* <a href = "https://www.shannonmburns.com/" target = "_blank">Shannon Burns</a> (Psychological Science and Neuroscience) uses data to understand brain processes of social communication.
* <a href = "https://chang.eco/" target = "_blank">Charlotte Chang</a> (Environmental Analysis & Biology) uses data to study and improve earth stewardship.
* <a href = "https://cs.pomona.edu/~ajc/" target = "_blank">Anthony (Tony) Clark</a> (Computer Science) uses data to improve the safety and reliability of mobile robots.
* <a href = "https://manishagoel.weebly.com/" target = "_blank">Manisha Goel</a> (Economics) uses data to understand how peopleâ€™s identities shape the fortunes of businesses where they work. 
* <a href = "https://www.pomona.edu/directory/people/jun-lang" target = "_blank">Jun Lang</a> (Asian Languages and Literatures) uses data to analyze (1) the intersection of language, gender, and society, and (2) second language acquisition and pedagogy.
* <a href = "https://magazine.pomona.edu/2020/winter/baseball-by-the-numbers/">Frank Pericolosi</a> (Physical Education) uses data to improve his team's chances on the field.
* <a href = "https://www.pomona.edu/directory/people/ami-e-radunskaya" target = "_blank">Ami Radunskaya</a> (Mathematics) uses data to model tumor growth and treatment.
* <a href = "https://zhulab.sites.pomona.edu/teaching/" target = "_blank">Yuqing Zhu</a> (Neuroscience) uses data to figure out how a jumble of neurons becomes smart.

## Learning goals {.smaller}

By the end of the course, you will be able to...

::: incremental
-   gain insight from data
-   gain insight from data, **reproducibly**
-   gain insight from data, reproducibly, **using modern programming tools and techniques**
-   gain insight from data, reproducibly **(with literate programming and version control)**, using modern programming tools and techniques
-   **ethically** gain insight from data, reproducibly (with literate programming and version control), using modern programming tools and techniques
:::

## 

```{r echo=FALSE, fig.cap = "", fig.align = "center"}
#| fig-width: 8
#| fig-height: 8
#| out-width: 8in
#| out-height: 8in

knitr::include_graphics("../images/data-science-process.jpg")
```


## Activity

1. What problem or task would you like to investigate using data?
2. What would be hard about executing the project?
3. What are the potential ethical frameworks to consider? 
4. How would you define success?

# Toolkit: Computing

We use tools to do the things.
But the tools are **not** the things.

# Reproducible data analysis

## Reproducibility checklist {.smaller}

::: question
What does it mean for a data analysis to be "reproducible"?
:::

**Short-term goals:**

-   Are the tables and figures reproducible from the code and data?
-   Does the code actually do what you think it does?
-   In addition to what was done, is it clear *why* it was done?

**Long-term goals:**

-   Can the code be used for other data?
-   Can you extend the code to do other things?

## Toolkit for reproducibility

-   Scriptability $\rightarrow$ R
-   Literate programming (code, narrative, output in one place) $\rightarrow$ Quarto
-   Version control $\rightarrow$ Git / GitHub

# R and RStudio

## R and RStudio {.smaller}

::: columns
::: {.column width="50%"}
![](../images/r-logo.png){fig-alt="R logo" fig-align="center"}

-   R is an open-source statistical **programming language**
-   R is also an environment for statistical computing and graphics
-   It's easily extensible with *packages*
:::

::: {.column .fragment width="50%"}
![](../images/rstudio-logo.png){fig-alt="RStudio logo"}

-   RStudio is a convenient interface for R called an **IDE** (integrated development environment), e.g. *"I write R code in the RStudio IDE"*
-   RStudio is not a requirement for programming with R, but it's very commonly used by R programmers and data scientists
:::
:::

## R vs. RStudio

[![](../images/r_vs_rstudio.png){fig-alt="On the left: a car engine. On the right: a car dashboard. The engine is labelled R. The dashboard is labelled RStudio." fig-align="center" width="1001"}](https://moderndive.com/1-getting-started.html)

::: aside
Source: [Modern Dive](https://moderndive.com/1-getting-started.html).
:::

## R packages


-   **Packages**: Fundamental units of reproducible R code, including reusable R functions, the documentation that describes how to use them, and sample data<sup>1</sup>

-   As of August 26, 2024, there are 21,145 R packages available on **CRAN** (the Comprehensive R Archive Network)<sup>2</sup>

-   We're going to work with a small (but important) subset of these!


::: aside
<sup>1</sup> Wickham and Bryan, [R Packages](https://r-pkgs.org/).

<sup>2</sup> [CRAN contributed packages](https://cran.r-project.org/web/packages/).
:::

## Tour: R + RStudio {.smaller}

## Tour recap: R + RStudio

![](../images/tour-r-rstudio.png)

## A short list (for now) of R essentials

-   Functions are (most often) verbs, followed by what they will be applied to in parentheses:

```{r}
#| eval: false

do_this(to_this)
do_that(to_this, to_that, with_those)
```

. . .

-   Packages are installed with the `install.packages()` function and loaded with the `library` function, once per session:

```{r}
#| eval: false

install.packages("package_name")
library(package_name)
```

<!--
## R essentials (continued)

-   Columns (variables) in data frames are accessed with `$`:

```{r}
#| eval: false

dataframe$var_name
```

. . .

-   Object documentation can be accessed with `?`

```{r}
#| eval: false

?mean
```
-->

## tidyverse

::: columns
::: {.column width="50%"}
[![](../images/tidyverse.png){fig-alt="Hex logos for dplyr, ggplot2, forcats, tibble, readr, stringr, tidyr, and purrr"}](https://tidyverse.org)
:::

::: {.column width="50%"}
[tidyverse.org](https://www.tidyverse.org/)

-   The **tidyverse** is an opinionated collection of R packages designed for data science
-   All packages share an underlying philosophy and a common grammar
:::
:::

# Quarto

## Quarto


-   Fully reproducible reports -- each time you `Render`, the analysis is run from the beginning
-   Code goes in chunks 
-   Narrative goes outside of chunks


## Tour: Quarto {.smaller}


## Tour recap: Quarto

![](../images/tour-quarto.png){fig-alt="RStudio IDE with a Quarto document, source code on the left and output on the right. Annotated to show the YAML, a link, a header, and a code chunk." fig-align="center"}

## Environments

::: callout-important
The environment of your Quarto document is separate from the Console!
:::

Remember this, and expect it to bite you a few times as you're learning to work with Quarto!

## Environments

::: columns
::: {.column width="50%"}
First, run the following in the console:

```{r eval = FALSE}
x <- 2
x * 3
```

<br>

::: {.question .fragment}
All looks good, eh?
:::
:::

::: {.column .fragment width="50%"}
Then, add the following in an R chunk in your Quarto document

```{r}
#| eval: false

x * 3
```

<br>

::: {.question .fragment}
What happens?
Why the error?
:::
:::
:::

## How will we use Quarto?

-   Every assignment is an Quarto document.
-   You'll always have a template Quarto document to start with.
-   The amount of scaffolding in the template will decrease over the semester.

# Toolkit: Version control and collaboration

## Git and GitHub {.smaller}

::: columns
::: {.column width="50%"}
![](../images/git-logo.png){fig-alt="Git logo" fig-align="center" width="150"}

-   Git is a version control system -- like "Track Changes" features from Microsoft Word, on steroids
-   It's not the only version control system, but it's a very popular one
:::

::: {.column width="50%"}
![](../images/github-logo.png){fig-alt="GitHub logo" fig-align="center" width="150"}

-   GitHub is the home for your Git-based projects on the internet -- like DropBox but much, much better

-   We will use GitHub as a platform for web hosting and collaboration (and as our course management system!)
:::
:::

## Versioning - done badly

![](../images/phd_comics_vc.gif){fig-align="center"}

## Versioning - done better

![](../images/lego-steps.png){fig-align="center"}

## Versioning - done even better

### with human readable messages

![](../images/lego-steps-commit-messages.png){fig-align="center"}

## How will we use Git and GitHub?

![](../images/whole-game-01.png){fig-align="center"}

## How will we use Git and GitHub?

![](../images/whole-game-02.png){fig-align="center"}

## How will we use Git and GitHub?

![](../images/whole-game-03.png){fig-align="center"}

## How will we use Git and GitHub?

![](../images/whole-game-04.png){fig-align="center"}

## Git and GitHub tips {.smaller}

::: incremental
-   There are millions of git commands -- ok, that's an exaggeration, but there are a lot of them -- and very few people know them all. 99% of the time you will use git to add, commit, push, and pull.
-   We will be doing Git things and interfacing with GitHub through RStudio, but if you Google for help you might come across methods for doing these things in the command line -- skip that and move on to the next resource unless you feel comfortable trying it out.
-   There is a great resource for working with git and R: [happygitwithr.com](http://happygitwithr.com/). Some of the content in there is beyond the scope of this course, but it's a good place to look for help.
:::

<!--
## Tour: Git + GitHub
-->


