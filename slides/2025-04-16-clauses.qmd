---
title: SQL clauses
author: "Jo Hardin"
subtitle: "April 16, 2025"
format: 
  revealjs:
    incremental: false
    scrollable: true
    slide-number: true
    show-slide-number: all
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
---


```{r}
#| include: false

source("../_common.R")
fontawesome::fa_html_dependency()
options(pillar.width = 70)
```

# Agenda  4/16/25

1. Order of clauses
2. Similarities & differences with **tidyverse**
3. **SQL** queries to **R** objects

```{r}
#| include: false

source("../_common.R")
fontawesome::fa_html_dependency()
```


# Today's example

## Traffic Stops

Consider a database of information from <a href = "https://openpolicing.stanford.edu/data/" target = "_blank">Stanford Open Policing Project</a> on over 200 million traffic stops in the US.

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("../images/traffic_police.jpeg")
```

## Establishing a SQL connection

```{r}
con_traffic <- DBI::dbConnect(
  RMariaDB::MariaDB(),
  dbname = "traffic",
  host = Sys.getenv("TRAFFIC_HOST"),
  user = Sys.getenv("TRAFFIC_USER"),
  password = Sys.getenv("TRAFFIC_PWD")
)
```



## Traffic Stops {.scrollable}

88 tables in the `traffic` database!  Lots of details on traffic stops across cities and highway patrols.

```{sql}
#| connection: con_traffic

SHOW TABLES;
```

## LAPD - glance through tables {.scrollable}

```{sql}
#| connection: con_traffic

SELECT * FROM ca_los_angeles_2020_04_01
LIMIT 0, 10;
```


## DESCRIBE tables {.scrollable}

Still using a `{sql}` chunk.  The `DESCRIBE` command shows the 10 field names (variables) in the `ca_los_angeles_2020_04_01` table.  Some of the variables are characters (`text`) and some are `date` or `time`.

```{sql}
#| connection: con_traffic

DESCRIBE ca_los_angeles_2020_04_01;
```

## Parts of a SQL table

* `Field` is the name of the variable
* `Type` is the type of the variable (numeric, character, etc.)
* `Null` indicates whether or not `NULL` values are acceptable. `NULL` values are never allowed for a Primary Key.
* `Key` designates whether the variable is a Primary Key.  `PRI` is a primary key, all unique, no `NULL` values.  `UNI` is a unique key, but `NULL` values are allowed.  `MUL` is a non-unique ("Multiple") key, allowing for duplicates, can speed up queries.
* `Default` provides the default value of the variable if no value is provided when a row is added to the database.


# **SQL** clauses

## Order of clauses

Queries in **SQL** start with the `SELECT` keyword and consist of several clauses, which must be written in the following order:


:::: {.columns}

::: {.column width="50%"}
* `SELECT` 
* `FROM` 
* `JOIN` 
* `WHERE` 
:::

::: {.column width="50%"}
* `GROUP BY` 
* `HAVING` 
* `ORDER BY` 
* `LIMIT`
:::

::::

The clauses are similar to data wrangling verbs in **R**, but the order in **SQL** is super important!


## SELECT ... FROM

* start with a `SELECT`, include a corresponding `FROM` 
* columns may be specified or `*` returns every column

The shortest **SQL** query is the following `SELECT` command.  Do not run this command!!! The `ca_los_angeles_2020_04_01` table has 5 million rows, and we do not want to look at them (print to screen) simultaneously.

```{r}
#| eval: false

DO NOT RUN:  SELECT * FROM ca_los_angeles_2020_04_01;
```

## SELECT ... FROM {.scrollable}

Much better for big tables:

```{sql}
#| connection: con_traffic

SELECT * FROM ca_los_angeles_2020_04_01 LIMIT 0, 10;

```



## SELECT ... FROM

How do we know how many traffic stops are in the database?  Two different ways of counting the rows (that produce the same number):

```{sql}
#| connection: con_traffic

SELECT COUNT(*), SUM(1) FROM ca_los_angeles_2020_04_01 LIMIT 0, 10;
```

More than 5.4 million LAPD traffic stops.

## SELECT ... FROM

Let's look at New Orleans, LA

```{sql}
#| connection: con_traffic

DESCRIBE la_new_orleans_2020_04_01;
```


## SELECT ... FROM

How old was the car being driven? 

Unfortunately, `date` is saved as a date variable, and `vehicle_year` is saved as a double.
Fortunately, we can convert `vehicle_year` to a date variable.


```{sql}
#| connection: con_traffic

SELECT
      date, vehicle_year,
      STR_TO_DATE(CONCAT(vehicle_year, '-01-01'), '%Y-%m-%d') AS vehicle_date
   FROM la_new_orleans_2020_04_01
   LIMIT 0, 10;
```



## SELECT ... FROM

Why can't we find the difference between the two time variables?

```{sql}
#| connection: con_traffic
#| error: true

SELECT
      date, vehicle_year,
      STR_TO_DATE(CONCAT(vehicle_year, '-01-01'), '%Y-%m-%d') AS vehicle_date
      TIMESTAMPDIFF(YEAR, vehicle_date, date) AS car_age
   FROM la_new_orleans_2020_04_01
   LIMIT 0, 10;
```


## SELECT ... FROM {.scrollable}

Solution 1:  two layers of `SELECT`  

   * first `SELECT` (i.e., inside) layer creates the new variables
   * second `SELECT` (i.e., outside) layer subtracts the two times

```{sql}
#| connection: con_traffic

SELECT 
   date,
   vehicle_date, 
   TIMESTAMPDIFF(YEAR, vehicle_date, date) AS car_age 
FROM (
   SELECT
      date,
      STR_TO_DATE(CONCAT(vehicle_year, '-01-01'), '%Y-%m-%d') AS vehicle_date
   FROM la_new_orleans_2020_04_01)
   AS subquery_table
LIMIT 0, 10;
```

## SELECT ... FROM {.scrollable}

Solution 2: apply the `STR_TO_DATE()` function inside the `TIMESTAMPDIFF()` function 

```{sql}
#| connection: con_traffic

SELECT 
   date,
   vehicle_year,
   TIMESTAMPDIFF(YEAR, 
                 STR_TO_DATE(CONCAT(vehicle_year, '-01-01'), '%Y-%m-%d'),
                 date) AS car_age 
FROM la_new_orleans_2020_04_01
LIMIT 0, 10;
```


## Important note:

There is a distinction between clauses that operate on the *variables of the original table* versus those that operate on the *variables of the results set*.  

`date` and `vehicle_year` are columns in the *original table* - they are written to disk on the **SQL** server.  

`car_age` exist only in the *results set*, which is passed from the server (**SQL** server) to the client (e.g., **RStudio** or **DBeaver**) in your computer's memory and is not written to disk.

## SELECT DISTINCT {.scrollable}

Returns only unique rows.

```{sql}
#| connection: con_traffic

SELECT DISTINCT raw_actions_taken
FROM la_new_orleans_2020_04_01
LIMIT 0, 200;
```

```{sql}
#| connection: con_traffic

SELECT DISTINCT outcome
FROM la_new_orleans_2020_04_01
LIMIT 0, 10;
```

```{sql}
#| connection: con_traffic

SELECT DISTINCT vehicle_make, vehicle_color
FROM la_new_orleans_2020_04_01
LIMIT 0, 10;
```

(note that we haven't yet arranged the distinct values!)

## WHERE

The `WHERE` clause is analogous to the `filter()` function in **dplyr**.  However, keep in mind that there are two **SQL** commands that resemble the **dplyr** `filter()` function. `WHERE` operates on the [original data]{.underline} in the table and `HAVING` operates on the [result set]{.underline}. 

## WHERE {.scrollable}

What was the time of day for those traffic stops `search_conducted` was true and `vehicle_make` was Subaru?

Note that in **SQL** the equality logical is `=` and in **R** the equality logical is `==`.  Note also that the WHERE command is case-insensitive!

```{sql}
#| connection: con_traffic

SELECT time, search_conducted, vehicle_year, vehicle_make
FROM la_new_orleans_2020_04_01
WHERE search_conducted = 1
   AND vehicle_make = "Subaru"
LIMIT 0, 10;

```


## WHERE

`BETWEEN` can be used to specify a range of values for a numeric value.  `BETWEEN` is inclusive.

```{sql}
#| connection: con_traffic

SELECT time, search_conducted, vehicle_year, vehicle_make
FROM la_new_orleans_2020_04_01
WHERE vehicle_year BETWEEN 1970 and 1999
   AND vehicle_make = "Subaru"
LIMIT 0, 10;

```

## WHERE

`IN` is similar to the **dplyr** `%in%` function which specifies distinct values for the variable.


```{sql}
#| connection: con_traffic

SELECT time, search_conducted, vehicle_year, vehicle_make
FROM la_new_orleans_2020_04_01
WHERE vehicle_make IN ("Subaru", "Dodge")
   AND search_conducted = 1
LIMIT 0, 10;

```

## WHERE

`AND` takes precedent over `OR` in the order of operations, when there are no parentheses.  

```{sql}
#| connection: con_traffic

SELECT time, search_conducted, vehicle_year, vehicle_make
FROM la_new_orleans_2020_04_01
WHERE vehicle_year BETWEEN 1970 and 1999 OR
      vehicle_make IN ("Subaru", "Dodge") AND 
      search_conducted = 1
LIMIT 0, 10;
```

same as:

```{sql}
#| connection: con_traffic

SELECT time, search_conducted, vehicle_year, vehicle_make
FROM la_new_orleans_2020_04_01
WHERE vehicle_year BETWEEN 1970 and 1999 OR
      (vehicle_make IN ("Subaru", "Dodge") AND 
      search_conducted = 1)
LIMIT 0, 10;
```

## WHERE

Parentheses take precedent over `AND` and `OR`.

```{sql}
#| connection: con_traffic

SELECT time, search_conducted, vehicle_year, vehicle_make
FROM la_new_orleans_2020_04_01
WHERE (vehicle_year BETWEEN 1970 and 1999 OR
      vehicle_make IN ("Subaru", "Dodge") ) AND 
      search_conducted = 1
LIMIT 0, 10;
```


## WHERE

`IS NULL` not `= NULL` (because `NULL` indicates *unknown*).  (Just like how we need to use `is.na()` in **R**!)

```{sql}
#| connection: con_traffic

SELECT time, search_conducted, vehicle_year, vehicle_make
FROM la_new_orleans_2020_04_01
WHERE vehicle_make IS NULL
LIMIT 0, 10;
```



```{sql}
#| connection: con_traffic
#| eval: false

SELECT time, search_conducted, vehicle_year, vehicle_make
FROM la_new_orleans_2020_04_01
WHERE vehicle_make = NULL
LIMIT 0, 10;
```


## A `NULL` example

The logic of `NULL`:^[taken from: https://cs186berkeley.net/notes/note1/#filtering-null-values]

* If you do anything with `NULL`, you'll just get `NULL`. For instance if $x$ is `NULL`, then $x > 3$, $1 = x$, and $x + 4$ all evaluate to `NULL`. Even $x =$ `NULL` evaluates to `NULL`! if you want to check whether $x$ is `NULL`, use `x IS NULL` or `x IS NOT NULL`.
* `NULL` short-circuits with boolean operators. That means a boolean expression involving `NULL` will evaluate to:
   * TRUE, if it'd evaluate to TRUE regardless of whether the `NULL` value is really TRUE or FALSE.
   * FALSE, if it'd evaluate to FALSE regardless of whether the `NULL` value is really TRUE or FALSE.
   * Or `NULL`, if it depends on the `NULL` value.

## A `NULL` example

Consider the following table and **SQL** query to evaluate `WHERE age <= 20 OR num_dogs = 3`:


```{sql}
#| connection: con_traffic

SELECT * FROM (
   SELECT 'Ace' AS name, 20 AS age, 4 as num_dogs
   UNION
   SELECT 'Ada' AS name, NULL AS age, 3 as num_dogs   
   UNION
   SELECT 'Ben' AS name, NULL AS age, NULL as num_dogs
   UNION
   SELECT 'Cho' AS name, 27 AS age, NULL as num_dogs
   ) AS temptable;
```

## A `NULL` example

Where does the `WHERE` clause do? It tells us that we only want to keep the rows satisfying the `age <= 20` OR `num_dogs = 3`. Let’s consider each row one at a time:

* For Ace, `age <= 20` evaluates to TRUE so the claim is satisfied.
* For Ada, `age <= 20` evaluates to `NULL` but `num_dogs = 3` evaluates to TRUE so the claim is satisfied.
* For Ben, `age <= 20` evaluates to `NULL` and `num_dogs = 3` evaluates to `NULL` so the overall expression is `NULL` which has a FALSE value.
* For Cho, `age <= 20` evaluates to FALSE and `num_dogs = 3` evaluates to `NULL` so the overall expression evaluates to `NULL` (because it depends on the value of the `NULL`).

Thus we keep only Ace and Ada.

## A `NULL` example


```{sql}
#| connection: con_traffic

SELECT * FROM (
   SELECT 'Ace' AS name, 20 AS age, 4 as num_dogs
   UNION
   SELECT 'Ada' AS name, NULL AS age, 3 as num_dogs   
   UNION
   SELECT 'Ben' AS name, NULL AS age, NULL as num_dogs
   UNION
   SELECT 'Cho' AS name, 27 AS age, NULL as num_dogs
   ) AS temptable
WHERE age <= 20 OR num_dogs = 3;
```

## GROUP BY {.scrollable}

The `GROUP BY` clause will direct **SQL** to carry out the query separately for each category in the grouped variable.  

* aggregate functions include `COUNT()`, `SUM()`, `MAX()`, `MIN()`, and `AVG()`.


```{sql}
#| connection: con_traffic

SELECT subject_race,
       COUNT(*) AS num_stops, 
       SUM(1) AS num_stops_also,
       SUM(2) AS double_stops
FROM la_new_orleans_2020_04_01
WHERE vehicle_year BETWEEN 1970 and 1999
GROUP BY subject_race;
```

## GROUP BY

For those people whose cars are between 1970 and 1999, how old is the youngest and oldest person for each `subject_race`?


```{sql}
#| connection: con_traffic

SELECT subject_race,
       COUNT(*) AS num_stops, 
       MIN(subject_age) AS min_age,
       MAX(subject_age) AS max_age
FROM la_new_orleans_2020_04_01
WHERE vehicle_year BETWEEN 1970 and 1999
GROUP BY subject_race;

```


## GROUP BY {.scrollable}

`GROUP BY` will work applied to multiple columns.  

```{sql}
#| connection: con_traffic

SELECT subject_race,
       COUNT(*) AS num_stops, 
       MIN(subject_age) AS min_age,
       MAX(subject_age) AS max_age,
       DAYNAME(date) AS wday
FROM la_new_orleans_2020_04_01
GROUP BY subject_race, wday;
```


## ORDER BY {.scrollable}

`ORDER BY` allows us to look at interesting aspects of the data by sorting the data.

```{sql}
#| connection: con_traffic

SELECT subject_race,
       COUNT(*) AS num_stops, 
       MIN(subject_age) AS min_age,
       MAX(subject_age) AS max_age,
       DAYNAME(date) AS wday
FROM la_new_orleans_2020_04_01
GROUP BY subject_race, wday
ORDER BY min_age ASC;

```


WHAT?!?!!  How are 10 year olds getting pulled over for traffic stops?


## ORDER BY {.scrollable}

```{sql}
#| connection: con_traffic

SELECT subject_race,
       COUNT(*) AS num_stops, 
       MIN(subject_age) AS min_age,
       MAX(subject_age) AS max_age,
       DAYNAME(date) AS wday
FROM la_new_orleans_2020_04_01
GROUP BY subject_race, wday
ORDER BY max_age DESC;
```

So many people over 100 years old...  the data seem fishy!

## ORDER BY {.scrollable}

```{sql}
#| connection: con_traffic

SELECT subject_race,
       COUNT(*) AS num_stops, 
       MIN(subject_age) AS min_age,
       MAX(subject_age) AS max_age,
       DAYNAME(date) AS wday
FROM la_new_orleans_2020_04_01
GROUP BY subject_race, wday
ORDER BY wday, subject_race;
```


## ORDER BY

::: {.callout-tip appearance="minimal"}

Note that both `GROUP BY` and `ORDER BY` evaluate the data after it has been retrieved.  Therefore, the functions operate on the *results set*, not the original rows of the data. 
:::

We are able to `GROUP BY` and `ORDER BY` on the new variables we had created, `wday`.

## HAVING

Recall that `WHERE` acts only on the original data.  If we are interested in traffic stops that happened on `Friday`, we need to use the derived variable `wday` instead of the raw variable `date`.  Fortunately, `HAVING` works on the [results set]{.underline}.  

## HAVING

```{sql}
#| connection: con_traffic

SELECT subject_race,
       COUNT(*) AS num_stops, 
       MIN(subject_age) AS min_age,
       MAX(subject_age) AS max_age,
       DAYNAME(date) AS wday
FROM la_new_orleans_2020_04_01
GROUP BY subject_race, wday
HAVING wday = 'Friday';
```


## HAVING

While it worked out quite well for us that `HAVING` was able to filter the data based on the results set, the use of `HAVING` was quite onerous because the entire data set was considered before the filter was applied.  That is, if the filter can be done on the original data using `WHERE`, the query will be much faster and more efficient.

Note: `HAVING` requires a `GROUP BY` clause.  And the variable(s) used in `HAVING` must also be part of the `GROUP BY` clause.


## LIMIT {.scrollable}

`LIMIT` truncates the query to specified rows.  The first number is the offset (i.e., the number of rows to skip), the second number is the (maximum) number of rows to return.  Here, we return rows 154219 through 154228.

The first number is optional.

```{sql}
#| connection: con_traffic

SELECT * FROM la_new_orleans_2020_04_01 LIMIT 154218, 10;

```


## Saving **SQL** queries as **R** objects  {.scrollable}

If you are working in **R** to run **SQL** commands, you may want to use the query output for further analysis or visualizations. 

* use `#| output.var: "name_of_variable"` inside the `{sql}` chunk. 
* `name_of_variable` will then be available to be used in the R environment.


```{sql}
#| connection: con_traffic
#| output.var: "new_table"
#| echo: fenced

SELECT *, DAYNAME(date) AS wday
FROM la_new_orleans_2020_04_01
LIMIT 0, 1000;
```

## Saving **SQL** queries as **R** objects  {.scrollable}

```{r}
#| echo: fenced

new_table |>
  drop_na(wday) |>
  ggplot(aes(x = vehicle_year, y = subject_age, color = wday)) + 
  geom_point() +
  xlim(1985, 2025)
```



## Good practice

Always a good idea to terminate the **SQL** connection when you are done with it.

```{r}
dbDisconnect(con_traffic, shutdown = TRUE)
```
