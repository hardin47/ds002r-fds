---
title: "Functions + Iteration"
author: "Jo Hardin"
subtitle: "March 3 + 5, 2025"
format: 
  revealjs:
    incremental: false
    scrollable: true
    slide-number: true
    show-slide-number: all
execute:
  echo: true
  warning: false
  message: false
--- 


```{r include=FALSE}
library(tidyverse)
library(knitr)
library(lubridate)
library(openintro)
options(pillar.width = 70)
```



# Agenda  3/3/25


1. R functions

## Data Conclusions

```{r, out.width = "800px", echo=FALSE, fig.cap = "Based on [https://www.effectivedatastorytelling.com/post/a-deeper-dive-into-lego-bricks-and-data-stories](https://www.effectivedatastorytelling.com/post/a-deeper-dive-into-lego-bricks-and-data-stories), original source: [https://www.linkedin.com/learning/instructors/bill-shander](https://www.linkedin.com/learning/instructors/bill-shander)"}
knitr::include_graphics("../images/data_lego2.png")
```

# Functions 

## Function components

Here is a simple function to compute the absolute value.

```{r}
my_abs <- function(x){
  return(ifelse(x >= 0, x, -1*x))
}

my_abs(-3)
my_abs(c(-2, 5))
```

* name: `my_abs`
* arguments: `x`
* body: everything inside the `{` `}`


## Ordering and arguments

```{r}
my_power <- function(x, y){
  return(x^y)
}

my_power(x = 2, y = 3)
my_power(y = 3, x = 2)
my_power(2, 3)
my_power(3, 2)
```

* When calling the function, if you don't name the arguments, R assumes that you passed them in the order defined inside the function.

## Function defaults

::: {.panel-tabset}

## function
```{r}
my_power <- function(x, y){
  return(x^y)
}
```
What will happen when I run the following code?

```{r}
#| error: false
#| eval: false
my_power(3)
```

## result
```{r}
#| error: true
my_power(3)
```
:::

## Function defaults

::: {.panel-tabset}

## function
```{r}
my_power <- function(x, y = 2){
  return(x^y)
}
```
What will happen when I run the following code?

```{r}
#| eval: false
my_power(3)
```

## result
```{r}
my_power(3)
```
:::


## Function defaults

::: {.panel-tabset}

## function
```{r}
my_power <- function(x, y = 2){
  return(x^y)
}
```
What will happen when I run the following code?

```{r}
#| eval: false
my_power(2, 3)
```

## result
```{r}
my_power(2, 3)
```
:::


## Function defaults

::: {.panel-tabset}

## function
```{r}
my_power <- function(x = 2, y = 3){
  return(x^y)
}
```
What will happen when I run the following code?

```{r}
#| eval: false
my_power()
```

## result
```{r}
my_power()
```
:::

## Returning a value

::: {.panel-tabset}

## functions
```{r}
average1 <- function(x, remove_nas) {
    sum(x, na.rm = remove_nas)/sum(!is.na(x))
}

average2 <- function(x, remove_nas) {
    return(sum(x, na.rm = remove_nas)/sum(!is.na(x)))
}

average3 <- function(x, remove_nas = TRUE) {
    sum(x, na.rm = remove_nas)/sum(!is.na(x))
}
```

## results

```{r}
#| error: true

some_data <- c(3, NA, 2, 13, 2, NA, 47)

average1(some_data)
average1(some_data, remove_nas = TRUE)
average2(some_data)
average2(some_data, remove_nas = TRUE)
average3(some_data)
```
:::


## Returning a value

* **without** `return()`: the function returns the [last value]{.underline} which gets computed and isn't stored as an object (using `<-`).

* **with** `return()`: the function will return an object that is [explicitly included]{.underline} in the `return()` call.  (Note: if you (accidentally?) have two `return()` calls, the function will return the object in the first `return()` call.) 



## Control flow

Often in functions, you will want to execute code conditionally. Consider the `if-else if-else` structure.


```{r}
#| eval: false
if (logical_condition) {
    # some code
} else if (other_logical_condition) {
    # some other code
} else {
    # yet more code
}
```


## Control flow

::: {.panel-tabset}

## function
```{r}
middle <- function(x) {
    mean_x <- mean(x, na.rm = TRUE)
    median_x <- median(x, na.rm = TRUE)
    seems_skewed <- (mean_x > 1.5*median_x) | (mean_x < (1/1.5)*median_x)
    if (seems_skewed) {
        median_x
    } else {
        mean_x
    }
}
```

Note that `(mean_x > 1.5*median_x) | (mean_x < (1/1.5)*median_x)` is a TRUE or FALSE question.

## result

```{r}
some_data <- c(3, NA, 2, 13, 2, NA, 47)


mean(some_data, na.rm = TRUE)
median(some_data, na.rm = TRUE)

middle(some_data)
```
:::

## Functions in the **tidyverse**

#### Don't collapse
Functions that return the *same number of rows* as the original data frame are good to use inside `mutate()` and `filter()`.  For example, you might want to capitalize the first word of every string:

```{r}
first_upper <- function(x) {
  str_sub(x, 1, 1) <- str_to_upper(str_sub(x, 1, 1))
  x
}

first_upper(c("hello", "goodbye"))
```

## Functions in the **tidyverse**

#### Collapse

Functions that *collapse into a single value* will work well in the `summarize()` step of the pipeline.  For example, you may want to calculate the coefficient of variation which is the standard deviation divided by the mean.

```{r}
cv <- function(x, na.rm = FALSE) {
  sd(x, na.rm = na.rm) / mean(x, na.rm = na.rm)
}

cv(runif(100, min = 0, max = 50))
cv(runif(100, min = 0, max = 500))
```


## Functions summary
* Functions can be used to avoid repeating code
* Arguments allow us specify the inputs when we call a function
* If inputs are not named when calling the function, R uses the ordering from the function definition
* All arguments must be specified when calling a function
* Default arguments can be specified when the function is defined
* The input to a function can be a function!

# Iterating functions 

There will be times when you will need to iterate a function multiple times.

## **purrr** for functional programming

**functionals** are functions that take [function as input]{.underline} and return a vector / list / data frame as output. 

- alternatives to loops

- a functional is better than a `for` loop is better than `while` is better than `repeat` (in terms of computing efficiency)

## Benefits 

- encourages function logic to be separated from iteration logic

- can collapse results into vectors/data frames easily

- direct connection to parallel processing


## Map

`map()` has (at least) two arguments, a data object and a function. It performs the function on each element of the object and returns a list. We can also pass additional arguments into the function.

```{r,echo=FALSE,warning=FALSE,message=FALSE}
knitr::include_graphics(path = '../images/9_2_3_map-arg.png')
```



## variations of `map_` functions

:::: {.columns}
::: {.column width=50%}
The `map` functions are *named* by they **output** the produce.  For example: 

* `map(.x, .f)` is the main mapping function and returns a list

* `map_dbl(.x, .f)` returns a numeric (double) vector

* `map_chr(.x, .f)` returns a character vector

* `map_lgl(.x, .f)` returns a logical vector
:::

::: {.column width=50%}
```{r out.width = '90%', fig.align='center', echo=FALSE}
knitr::include_graphics("../images/purrr_map.png")
```
:::
::::


Note that the first argument is always the data object and the second object is always the function you want to iteratively apply to each element in the input object.

# `map()` in practice

## `map()` variants (output)

```{r}
#| error: true
triple <- function(x) x * 3
map(.x = c(1:3), .f = triple)

map_dbl(.x = c(1:3), .f = triple)

map_lgl(.x = c(1:3), .f = triple)

map_lgl(.x = c(1, NA, 3), .f = is.na)
```

# Agenda  3/5/25

1. The `map()` function
2. Iterating functions

## `fastfood` dataset from **openintro**

```{r}
library(openintro)
fastfood
```


From [TidyTuesday Fast food entree data](https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-09-04) on September 4, 2018.

## Anonymous functions and shortcuts

- use `~` to set a formula (when the function is neither a single name nor defined by `function(...) { ...} `)
- use `.x` to reference the input `map(.x = ..., .f = )`

```{r}
map_dbl(.x = fastfood, .f = function(dog) mean(dog, na.rm = TRUE))
```

```{r, eval=TRUE}
map_dbl(.x = fastfood,  .f = ~mean(.x, na.rm = TRUE))
```

```{r}
map_dbl(.x = fastfood, .f = mean, na.rm = TRUE)
```

```{r}
map_dbl(.x = fastfood, .f = mean)
```


## The same thing, many ways 


Note that `.x` is the **name** of the first argument in `map()` (`.f` is the name of the second argument).

```{r}
#| error: true
# the task
map_dbl(fastfood, function(x) length(unique(x)))
map_dbl(fastfood, function(unicorn) length(unique(unicorn)))
map_dbl(fastfood, ~length(unique(.x)))
map_dbl(fastfood, ~length(unique(..1)))
map_dbl(fastfood, ~length(unique(.)))

# not the task
map_dbl(fastfood, length)
```

```{r}
#| echo: false
#| message: false
#| warning: false
rm(x)
```

```{r}
#| error: true
#error
map_dbl(fastfood, ~length)
#error
map_dbl(fastfood, length(unique()))
#error
map_dbl(fastfood, ~length(unique(x)))
```


## `map`ping to a data frame

Would be great if the results were a data frame!
If the function outputs a data frame, then we can use `list_rbind()` and `list_cbind()` to create a data frame as the final `map()` output.

- results as rows: `map() |> list_rbind()`
- results as columns: `map() |> list_cbind()`

::: {.panel-tabset}

## function
```{r}
col_stats <- function(n) {
  head(fastfood, n) |> 
    select(calories, protein, vit_c) |> 
    summarise_all(mean, na.rm = TRUE) |> 
    mutate(n = paste("N =", n))
}
```

## `map()`
```{r}
out1 <- map(c(10,20), col_stats)

out1
```

## `list_rbind()`
```{r}
out2 <- map(c(10,20), col_stats) |> list_rbind()

out2
```

## `list_cbind()`
```{r}
out3 <- map(c(10,20), col_stats) |> list_cbind()

out3
```
:::



# Two+ arguments to `map()`

## `map_*()` variants (input)

```{r,echo=FALSE,warning=FALSE,message=FALSE}
knitr::include_graphics(path = '../images/map_variants.png')
```
We've already described the difference between the columns. Now we cover the difference between the rows.

## `map2_*()`

- `map2_*()` has two arguments, `.x` and `.y`
- raise each value of `.x` to the power of 2

```{r}
map_dbl(
  .x = c(1:5), 
  .f = function(x) x ^ 2
)
```

- raise each value `.x` to the power `.y`

```{r}
map2_dbl(
  .x = c(1:5), 
  .y = c(2:6), 
  .f = ~ (.x ^ .y)
)
```



## `imap()` {-}

- `imap()` is like `map2()`except that `.y` is derived from `names(.x)` if the data frame has names.

- If not, `.y` is 1, 2, 3, ... $n$ where $n$ is the number of items in `.x`.  (A data frame has $n$ columns.)

- These two calls produce the same result

```{r}
imap_chr(.x = fastfood, 
         .f = ~ paste(.y, "has a mean of", round(mean(.x), 1))) |> 
head()

map2_chr(.x = fastfood, 
         .y = names(fastfood),
         .f = ~ paste(.y, "has a mean of", round(mean(.x), 1))) |> 
head()
```


## `pmap()` {-}

- you can pass a named list or dataframe as arguments to a function

- for example `runif()` has the parameters `n`, `min` and `max`

```{r}
#| echo: false
params <- tibble::tribble(
  ~ n, ~ min, ~ max,
   1,     1,    10,
   2,    10,   100,
   3,   100,  1000
)
```

```{r}
params
pmap(params, runif)
```

Or use the pipe into `pmap()`:

```{r}
params |> 
  pmap(runif)
```

## An aside...

Interestingly, `runif()` will take either a scalar or a vector as its first argument.  If the first argument is a vector, `runif()` will return `N` random uniforms, where `N` is the length of the vector.

```{r}
runif(n = 3)
runif(n = c(1,3))
runif(n = c(10000,12321412424))
runif(n = c("rainbow", "unicorn"))
```

## `pmap()` vs `map()`

Which means that the `pmap()` code will "work" in `map()` as well:

::: {.panel-tabset}

## params

```{r}
params
```

## pmap

```{r}
params |> 
  pmap(runif)
```

## map
```{r}
params |> 
  map(runif)
```

:::

<!--
- could also be

```{r}
list(
  n = c(1, 2, 3), 
  min = c(1, 10, 100), 
  max = c(10, 100, 1000)) |> 
pmap(runif)
```
-->

## `pmap()` with `expand_grid()`

- I like to use `expand_grid()` when I want all possible parameter combinations.

```{r}
expand_grid(n = c(1, 2, 3), 
            min = c(1, 10),
            max = c(10, 100)) 

expand_grid(n = c(1, 2, 3), 
            min = c(1, 10),
            max = c(10, 100)) |> 
pmap(runif)
```



