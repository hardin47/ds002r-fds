---
title: Regular Expressions II
author: "Jo Hardin"
date: "January 12, 2024"
format:
  revealjs:
    slide-number: true
    show-slide-number: all
execute:
  echo: true
  warning: false
  message: false
---


```{r}
#| include: false

source("../_common.R")
fontawesome::fa_html_dependency()
```




## Lookaround

A lookaround specifies a **place** in the regular expression that will anchor the string you'd like to match.

* "x(?=y)" – positive lookahead (matches 'x' when it is followed by 'y')
* "x(?!y)" – negative lookahead (matches 'x' when it is not followed by 'y')
* "(?<=y)x" – positive lookbehind (matches 'x' when it is preceded by 'y')
* "(?<!y)x" – negative lookbehind (matches 'x' when it is not preceded by 'y')

## Lookaround

```{r}
#| label: fig-lookaround
#| out.width: 70%
#| fig-cap: 'Image credit: Stefan Judis https://www.stefanjudis.com/blog/a-regular-expression-lookahead-lookbehind-cheat-sheet/'
#| fig-alt: 'The four different lookaround options: positive and negative lookahead and lookbehind. Each lookaround provides an anchor for where to start the regular expression matching.'
#| echo: false
include_graphics("../images/lookaround.png")
```


## Example - Taskmaster

Data scraped from the wiki site for the TV series, Taskmaster. 


```{r}
#| label: fig-taskmaster
#| out.width: 70%
#| fig-cap: Taskmaster Wiki https://taskmaster.fandom.com/wiki/Series_11
#| fig-alt: Screenshot of the wiki page for the Taskmaster TV series.
#| echo: false
include_graphics("../images/taskmaster.jpg")
```

```{r, include=F}
library(rvest)
library(tidyverse)
library(data.table)
```


## Scraping and wrangling Taskmaster

Goal: to scrape the Taskmaster wiki into a dataframe including task, description, episode, episode name, air date, contestant, score, and series.^[Thanks to Ciaran Evans at Wake Forest University for example and code,  https://sta279-f23.github.io/]

```{r}
results <- read_html("https://taskmaster.fandom.com/wiki/Series_11") |>
  html_element(".tmtable") |> 
  html_table() |>
  mutate(episode = ifelse(startsWith(Task, "Episode"), Task, NA)) |>
  fill(episode, .direction = "down") |>
  filter(!startsWith(Task, "Episode"), 
         !(Task %in% c("Total", "Grand Total"))) |>
  pivot_longer(cols = -c(Task, Description, episode),
               names_to = "contestant",
               values_to = "score") |>
  mutate(series = 11)
```

## Scraping and wrangling Taskmaster data - results

```{r}
results |> 
  select(Task, Description, episode, contestant, score, series) |>
  head(10)
```

## more succinct results

```{r, eval=F}
   Task  Description         episode   contestant score series
  1     Prize: Best thing…  Episode 1… Charlotte… 1         11
  1     Prize: Best thing…  Episode 1… Jamali Ma… 2         11
  1     Prize: Best thing…  Episode 1… Lee Mack   4         11
  1     Prize: Best thing…  Episode 1… Mike Wozn… 5         11
  1     Prize: Best thing…  Episode 1… Sarah Ken… 3         11
  2     Do the most…        Episode 1… Charlotte… 2         11
  2     Do the most…        Episode 1… Jamali Ma… 3[1]      11
  2     Do the most…        Episode 1… Lee Mack   3         11
  2     Do the most…        Episode 1… Mike Wozn… 5         11
  2     Do the most…        Episode 1… Sarah Ken… 4         11
```

Currently, the episode column contains entries like

```{r, eval=F}
"Episode 1: It's not your fault. (18 March 2021)"
```


## Cleaning the score column


```{r}
table(results$score)
```

How *should* the scores be stored? What is the cleaning task?


```{r}
#| label: fig-taskmaster-scores
#| out.width: 90%
#| fig-cap: Taskmaster Wiki https://taskmaster.fandom.com/wiki/Series_11
#| fig-alt: Screenshot of the scores for each contestand on each task. Note that many of the scores have footnotes which are recorded in the results table from scraping the wiki.
#| echo: false
include_graphics("../images/taskmaster-scores.jpg")
```

## Extracting numeric information

Suppose we have the following string:

```{r, eval=F}
"3[1]"
```

And we want to extract just the number "3":

```{r}
str_extract("3[1]", "3")
```


## Extracting numeric information

What if we don't know which number to extract?

```{r}
str_extract("3[1]", "\\d")
```

```{r}
str_extract("4[1]", "\\d")
```


```{r}
str_extract("10[1]", "\\d")
```

```{r}
str_extract("10[1]", "\\d+")
```

```{r}
str_extract("DQ", "\\d")
```

## `str_extract()`

`str_extract()` is an **R** function in the **stringr** package which finds *regular expressions* in strings of text.

```{r}
str_extract("My cat is 3 years old", "cat")
```

```{r}
str_extract("My cat is 3 years old", "3")
```


## Matching multiple options

`str_extract()` returns the first match; `str_extract_all()` allows more than one match.  

```{r}
str_extract("My cat is 3 years old", "cat|dog")
str_extract("My dog is 10 years old", "cat|dog")
str_extract("My dog is 10 years old, my cat is 3 years old", 
            "cat|dog")
str_extract_all("My dog is 10 years old, my cat is 3 years old", 
                "cat|dog")
```

## Matching groups of characters

What if I want to extract a *number*?

```{r}
str_extract("My cat is 3 years old", "\\d")
```

What will the result be for the following code?

```{r, eval=F}
str_extract("My dog is 10 years old", "\\d")
```

## Matching groups of characters

What if I want to extract a *number*?

```{r}
str_extract("My cat is 3 years old", "\\d")
```

What will the result be for the following code?

```{r}
str_extract("My dog is 10 years old", "\\d")
```

## Matching groups of characters

What if I want to extract a *number*?

```{r}
str_extract("My cat is 3 years old", "\\d")
```

What will the result be for the following code?

```{r}
str_extract("My dog is 10 years old", "\\d")
```

The `+` symbol in a regular expression means "repeated one or more times"

```{r}
str_extract("My dog is 10 years old", "\\d+")
```

## Extracting from multiple strings

```{r}
strings <- c("My cat is 3 years old", "My dog is 10 years old")
str_extract(strings, "\\d+")
```

## Extracting from multiple strings

What if we have multiple instances across multiple strings?  We need to be careful working with lists (instead of vectors).

```{r}
strings <- c("My cat is 3 years old", "My dog is 10 years old")
str_extract(strings, "\\w+")
str_extract_all(strings, "\\w+")
```

## Extracting episode information

Currently, the `episode` column contains entries like:

```{r, eval=F}
"Episode 2: The pie whisperer. (4 August 2015)"
```

How would I extract just the episode number?

## Extracting episode information

Currently, the `episode` column contains entries like:

```{r, eval=F}
"Episode 2: The pie whisperer. (4 August 2015)"
```

How would I extract just the episode number?

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", "\\d+")
```

## Extracting episode information

Currently, the `episode` column contains entries like:

```{r, eval=F}
"Episode 2: The pie whisperer. (4 August 2015)"
```

How would I extract the episode name?

Goal: find a pattern to match: *anything* that starts with a `:`, ends with a `.`

Let's break down that task into pieces.

## Extracting episode information

How can we find the period at the end of the sentence?  What does each of these lines of code return?

```{r}
#| eval: false
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".")
```

```{r}
#| eval: false
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".+")
```

```{r}
#| eval: false
str_extract("Episode 2: The pie whisperer. (4 August 2015)", "\\.")
```


## Extracting episode information - solution {.scrollable}

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".")
```

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".+")
```

We use an *escape character* when we actually want to choose a period:

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", "\\.")
```

## Extracting episode information

Goal: find a pattern to match: *anything* that starts with a `:`, ends with a `.`

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)",
            ":.+\\.")
```

## Lookaround (again)


```{r}
#| label: fig-lookaround2
#| out.width: 70%
#| fig-cap: 'Image credit: Stefan Judis https://www.stefanjudis.com/blog/a-regular-expression-lookahead-lookbehind-cheat-sheet/'
#| fig-alt: 'The four different lookaround options: positive and negative lookahead and lookbehind. Each lookaround provides an anchor for where to start the regular expression matching.'
#| echo: false
include_graphics("../images/lookaround.png")
```



## Lookbehinds

`(?<=)` is a *positive lookbehind*. It is used to identify expressions which are *preceded* by a particular expression.

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            "(?<=: ).+")
```

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            "(?<=\\. ).+")
```

## Lookaheads

`(?=)` is a *positive lookahead*. It is used to identify expressions which are *followed* by a particular expression.

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            ".+(?=\\.)")
```

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            ".+(?=:)")
```


## Extracting episode information

Getting everything between the `:` and the `.`

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            "(?<=: ).+(?=\\.)")
```

## Extracting air date

I want to extract just the air date. What pattern do I want to match?

```{r, eval=F}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ...)
```

## Extracting air date

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            "(?<=\\().+(?=\\))")
```


## Wrangling the episode info

Currently:

```{r, echo=F}
results |>
  select(episode)
```

## Wrangling the episode info

One option:

```{r}
results |>
  select(episode) |>
  mutate(episode_name = str_extract(episode, "(?<=: ).+(?=\\.)"),
         air_date = str_extract(episode, "(?<=\\().+(?=\\))"),
         episode = str_extract(episode, "\\d+"))
```


## Wrangling the episode info

Another option:

```{r, eval=F}
results |>
  separate_wider_regex(episode, 
                       patterns = c(".+ ", 
                                    episode = "\\d+", 
                                    ": ", 
                                    episode_name = ".+", 
                                    "\\. \\(", 
                                    air_date = ".+", 
                                    "\\)"))
```

```{r, echo=F}
results |>
  select(episode) |>
  separate_wider_regex(episode, 
                       patterns = c(".+ ", 
                                    episode = "\\d+", 
                                    ": ", 
                                    episode_name = ".+", 
                                    "\\. \\(", 
                                    air_date = ".+", 
                                    "\\)"))
```



## Regular expressions and **SQL** {.scrollable}

Back to the IMDb database... 

```{r}
#| echo: false

con_imdb <- DBI::dbConnect(
  RMariaDB::MariaDB(),
  dbname = "imdb",
  host = Sys.getenv("SMITH_HOST"),
  user = Sys.getenv("SMITH_USER"),
  password = Sys.getenv("SMITH_PWD")
)
```

```{sql}
#| connection: con_imdb

SELECT production_year, title
  FROM title
  WHERE kind_id = 1 AND
        title REGEXP '(?i)star'
  LIMIT 0, 20;
```



```{r}
#| echo: false
DBI::dbDisconnect(con_imdb, shutdown = TRUE)
```

## Course project {.scrollable}

Don't forget, next week, each person will be working on their own <a href = "https://sds261-sql.netlify.app/project" target = "_blank">mini project</a>!


1. Using **SQL** queries and joins to wrangle complicated data tables.
2. Writing regular expressions to parse observations.
3. Creating a **SQL** database.

* email `jo.hardin@pomona.edu` by Tuesday, Jan 16 with an idea of what you plan to do.
   * Question of interest that you hope to address.
   * Holistic description of the dataset(s) (a few sentences).
   * Description of the observational units and columns in each data table. 
   * Full reference for data citation.
   * Link to the resources.
