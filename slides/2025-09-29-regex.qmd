---
title: Regular Expressions
author: "Jo Hardin"
subtitle: "September 29 + October 1, 2025"
format:
  revealjs:
    incremental: false
    scrollable: true
    slide-number: true
    show-slide-number: all
execute:
  echo: true
  warning: false
  message: false
---


```{r}
#| echo: false
library(tidyverse)
library(openintro)
library(knitr)
options(pillar.width = 70)
```


# Agenda 9/29/25

1. What is a regular expression?
2. Escape sequences, quantifiers, positions
3. Character classes

## Regular Expressions

> A regular expression ... is a sequence of characters that define a search pattern. Usually such patterns are used by string searching algorithms for "find" or "find and replace" operations on strings, or for input validation. It is a technique developed in theoretical computer science and formal language theory.




# Tools for characterizing a regular expression

## Escape sequences

Just to scratch the surface, here are a few special characters that cannot be directly coded.  Therefore, they are escaped with a backslash, `\`.

  * `\'`: single quote.         
  * `\"`: double quote.          
  * `\n`: new line.   
  * `\r`: carriage return.   
  * `\t`: tab character.

## Quantifiers

Quantifiers specify how many repetitions of the pattern.   

  * `*`: matches at least 0 times.   
  * `+`: matches at least 1 times.     
  * `?`: matches at most 1 times.    
  * `{n}`: matches exactly n times.    
  * `{n,}`: matches at least n times.    
  * `{n,m}`: matches between n and m times. 

## `str_*()` review:

```{r, out.width = "800px", echo=FALSE, fig.cap = "From the **stringr** cheat sheet: https://rstudio.github.io/cheatsheets/html/strings.html"}
knitr::include_graphics("../images/str_funcs.jpg")
```
  
## Examples of quantifiers

```{r}
#| eval: false

strings <- c("a", "ab", "acb", "accb", "acccb", "accccb")
str_subset(strings, "ac*b") 
str_subset(strings, "ac+b") 
str_subset(strings, "ac*b", negate = TRUE)
str_subset(strings, "ac?b") 
str_subset(strings, "ac{2}b") 
str_subset(strings, "ac{2,}b") 
str_subset(strings, "ac{2,3}b")
```

## Examples of quantifiers - solution

```{r}
strings <- c("a", "ab", "acb", "accb", "acccb", "accccb")
str_subset(strings, "ac*b") 
str_subset(strings, "ac+b") 
str_subset(strings, "ac*b", negate = TRUE)
str_subset(strings, "ac?b") 
str_subset(strings, "ac{2}b") 
str_subset(strings, "ac{2,}b") 
str_subset(strings, "ac{2,3}b")
```


## Position of pattern within the string

  * `^`: matches the start of the string.   
  * `$`: matches the end of the string.   
  * `\b`: matches the boundary of a _word_. Don't confuse it with `^ $` which marks the edge of a _string_.^[A word boundary is a position between a word character (typically [A-Za-z0-9_]) and a non-word character (anything that is not a word character, such as whitespace, punctuation, etc.).]   


## Examples of positions

```{r}
#| eval: false

strings <- c("abcd", "cdab", "cabd", "c abd")
str_subset(strings, "ab")
str_subset(strings, "^ab")
str_subset(strings, "ab$")
str_subset(strings, "\\bab")
```

## Examples of positions - solution

```{r}
#| eval: true

strings <- c("abcd", "cdab", "cabd", "c abd")
str_subset(strings, "ab")
str_subset(strings, "^ab")
str_subset(strings, "ab$")
str_subset(strings, "\\bab")
```


## Bounding words vs. phrases

```{r}
#| eval: false
strings <- c("apple", "applet", "pineapple", "apple pie",
             "I love apple pie")

str_subset(strings, "\\bapple\\b")
str_subset(strings, "^apple$")
str_subset(strings, "\\bapple pie\\b")
str_subset(strings, "^apple pie$")
```

## Bounding words vs. phrases - solutions

```{r}
strings <- c("apple", "applet", "pineapple", "apple pie",
             "I love apple pie")

str_subset(strings, "\\bapple\\b")
str_subset(strings, "^apple$")
str_subset(strings, "\\bapple pie\\b")
str_subset(strings, "^apple pie$")

str_extract(strings, "\\bapple\\b")
str_extract(strings, "^apple$")
str_extract(strings, "\\bapple pie\\b")
str_extract(strings, "^apple pie$")
```

## Operators


  * `.`: matches any single character,
  * `[...]`: a character list, matches **any one of the characters** inside the square brackets. A `-` inside the brackets specifies a range of characters.   
  * `[^...]`: an inverted character list, similar to `[...]`, but matches any characters __except__ those inside the square brackets.  
  * `\`: suppress the special meaning of metacharacters in regular expression, i.e. `$ * + . ? [ ] ^ { } | ( ) \`. Since `\` itself needs to be escaped in R, we need to escape metacharacters with double backslash like `\\$`.   
  * `|`: an "or" operator, matches patterns on either side of the `|`.  
  * `(...)`: grouping in regular expressions. This allows you to retrieve the bits that matched various parts of your regular expression so you can alter them or use them for building up a new string.
  * note: both `(ab|cde)` or `ab|cde` match either the string `ab` or the string `cde`.  However, `ab | cde` matches `ab cde` (and does not match either of `ab` or `cde`) because the "or" is now whitespace on either side of `|`.
  
## Examples of operators

```{r}
#| eval: false

strings <- c("^ab", "ab", "abc", "abd", "abe", "ab 12", "a|b")
str_subset(strings, "ab.")
str_subset(strings, "ab[c-e]")
str_subset(strings, "ab[^c]")
str_subset(strings, "^ab")
str_subset(strings, "\\^ab")
str_subset(strings, "abc|abd")
str_subset(strings, "ab|c")
str_subset(strings, "ab | c")
str_subset(strings, "(ab)|c")
str_subset(strings, "(ab|c)")
str_subset(strings, "a(b|c)")
str_subset(strings, "a[b|c]")
str_extract(strings, "a[b|c]")
```


## Examples of operators - solution^[it turns out that "ab|c" and "(ab)|c" and "(ab|c)" are all equivalent!  Additionally, different regular expression parsers will treat spaces differently.]


```{r}
strings <- c("^ab", "ab", "abc", "abd", "abe", "ab 12", "a|b")
str_subset(strings, "ab.")
str_subset(strings, "ab[c-e]")
str_subset(strings, "ab[^c]")
str_subset(strings, "^ab")
str_subset(strings, "\\^ab")
str_subset(strings, "abc|abd")
str_subset(strings, "ab|c")
str_subset(strings, "ab | c")
str_subset(strings, "(ab)|c")
str_subset(strings, "(ab|c)")
str_subset(strings, "a(b|c)")
str_subset(strings, "a[b|c]")
str_extract(strings, "a[b|c]")
```

## Character classes

Character classes allow specifying entire classes of characters, such as numbers, letters, etc. There are two flavors of character classes, one uses `[:` and `:]` around a predefined name inside square brackets and the other uses `\` and a special character. They are sometimes interchangeable.   

  * `(?i)` before the string indicates that the match should be case insensitive (will make the rest of the string that follows case insensitive).
  * `[:digit:]` or `\d`: digits, 0 1 2 3 4 5 6 7 8 9, equivalent to `[0-9]`.  
  * `\D`: non-digits, equivalent to `[^0-9]`.  
  * `[:lower:]`: lower-case letters, equivalent to `[a-z]`.  
  * `[:upper:]`: upper-case letters, equivalent to `[A-Z]`.  
  * `[:alpha:]`: alphabetic characters, equivalent to `[[:lower:][:upper:]]` or `[A-z]`.  
  * `[:alnum:]`: alphanumeric characters, equivalent to `[[:alpha:][:digit:]]` or `[A-z0-9]`.   
  * `\w`: word characters, equivalent to `[[:alnum:]_]` or `[A-z0-9_]` (letter, number, or underscore).  
  * `\W`: not word, equivalent to `[^A-z0-9_]`.  
  * `[:blank:]`: blank characters, i.e. space and tab.  
  * `[:space:]`: space characters: tab, new line, vertical tab, form feed, carriage return, space.
  * `\s`: whitespace.  
  * `\S`: not whitespace.  
  * `[:punct:]`: punctuation characters, ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~.
  * `[:graph:]`: graphical (human readable) characters: equivalent to `[[:alnum:][:punct:]]`.
  * `[:print:]`: printable characters, equivalent to `[[:alnum:][:punct:]\\s]`.
  
## Case sensitivity

```{r}
strings <- c("applepie", "aPPlepIE", "applePIE", "appLEpie")

str_subset(strings, "(?i)applepie")
str_subset(strings, "((?i)apple)pie")
str_subset(strings, "apple(?i)pie")
str_subset(strings, "apple((?i)pie)")
```


## Thoughts on characters and spaces

* `.` matches **any** single character except a newline `\n`.
* `.` does match whitespace (e.g., a space or tab)
* `\s` matches any whitespace including: spaces, tabs, new lines, and carriage returns
* `[ \t]` matches spaces and tabs only (not new lines or carriage returns)
* `[^\s]` matches any character except whitespace (including spaces, tabs, and new lines)
* `[^\s]` and `[\S]` are functionally equivalent
* The pattern `[\s\S]` matches any character including newlines and tabs.
* `\w` matches any single word character (including letters, digits, and the underscore character `_`)
* `\B`: matches the empty string provided it is not at an edge of a word.
  
# Some examples

More examples for practice!

## Case insenstive

* Match only the word `meter` in "The cemetery is 1 meter from the stop sign." 

* Also match `Meter` in "The cemetery is 1 Meter from the stop sign."


## Case insenstive

* Match only the word `meter` in "The cemetery is 1 meter from the stop sign." 

* Also match `Meter` and `meTer` ...

```{r}
string <- c("The cemetery is 1 meter from the stop sign.", 
            "The cemetery is 1 Meter from the stop sign.",
            "The cemetery is 1 meTer from the stop sign.")

str_extract(string, "(?i)\\bmeter\\b")
```


## Proper times and dates

* Match dates like 01/15/24 and also like 01.15.24 and like 01-15-24.

```{r}
string <- c("01/15/24", "01.15.24", "01-15-24", "011524", 
            "January 15, 2024")
```


## Proper times and dates

* Match dates like 01/15/24 and also like 01.15.24 and like 01-15-24.


```{r}
string <- c("01/15/24", "01.15.24", "01-15-24", "01 15 24", 
            "011524", "January 15, 2024")

str_extract(string, "\\d\\d.\\d\\d.\\d\\d")

str_extract(string, "\\d\\d[/.\\-]\\d\\d[/.\\-]\\d\\d")

str_extract(string, "\\d{2}[/.\\-]\\d{2}[/.\\-]\\d{2}")
```


## Proper times and dates

* Match a time of day such as "9:17 am" or "12:30 pm".  Require that the time be a valid time (not "99:99 pm"). Assume no leading zeros (i.e., "09:17 am").

```{r}
string <- c("9:17 am", "12:30 pm", "99:99 pm", "09:17 am")
```

## Proper times and dates

* Match a time of day such as "9:17 am" or "12:30 pm".  Require that the time be a valid time (not "99:99 pm"). Assume no leading zeros (i.e., "09:17 am").

`^(1[012]|[1-9]):[0-5][0-9] (am|pm)$`

```{r}
string <- c("9:17 am", "12:30 pm", "99:99 pm", "09:17 am")

str_extract(string, "(1[012]|[1-9]):[0-5][0-9] (am|pm)")
str_extract(string, "^(1[012]|[1-9]):[0-5][0-9] (am|pm)$")
```

## Alternation operator

The "or" operator, `|` has the lowest precedence and parentheses have the highest precedence, which means that parentheses get evaluated before "or".

* What is the difference between `\bMary|Jane|Sue\b` and `\b(Mary|Jane|Sue)\b`?

```{r}
#| eval: false
string <- c("Mary", "Mar", "Janet", "jane", "Susan", "Sue")

str_extract(string, "\\bMary|Jane|Sue\\b")
str_extract(string, "\\b(Mary|Jane|Sue)\\b")
```

## Alternation operator

The "or" operator, `|` has the lowest precedence and parentheses have the highest precedence, which means that parentheses get evaluated before "or".

* What is the difference between `\bMary|Jane|Sue\b` and `\b(Mary|Jane|Sue)\b`?

```{r}
string <- c("Mary", "Mar", "Janet", "jane", "Susan", "Sue")

str_extract(string, "\\bMary|Jane|Sue\\b")
str_extract(string, "\\b(Mary|Jane|Sue)\\b")
```


# Agenda 10/1/25

1. Lookaround
2. `str_*()` functions with regular expressions



## Lookaround

A lookaround specifies a **place** in the regular expression that will anchor the string you'd like to match.

* "x(?=y)" – positive lookahead (matches 'x' when it is followed by 'y')
* "x(?!y)" – negative lookahead (matches 'x' when it is not followed by 'y')
* "(?<=y)x" – positive lookbehind (matches 'x' when it is preceded by 'y')
* "(?<!y)x" – negative lookbehind (matches 'x' when it is not preceded by 'y')

## Lookaround

```{r}
#| label: fig-lookaround
#| out.width: 70%
#| fig-cap: 'Image credit: Stefan Judis https://www.stefanjudis.com/blog/a-regular-expression-lookahead-lookbehind-cheat-sheet/'
#| fig-alt: 'The four different lookaround options: positive and negative lookahead and lookbehind. Each lookaround provides an anchor for where to start the regular expression matching.'
#| echo: false
include_graphics("../images/lookaround.png")
```


## Example - Taskmaster

Data scraped from the wiki site for the TV series, Taskmaster. 


```{r}
#| label: fig-taskmaster
#| out.width: 70%
#| fig-cap: Taskmaster Wiki https://taskmaster.fandom.com/wiki/Series_11
#| fig-alt: Screenshot of the wiki page for the Taskmaster TV series.
#| echo: false
include_graphics("../images/taskmaster.jpg")
```

```{r, include=F}
library(rvest)
library(tidyverse)
library(data.table)
```


## Scraping and wrangling Taskmaster

Goal: to scrape the Taskmaster wiki into a data frame including task, description, episode, episode name, air date, contestant, score, and series.^[Thanks to Ciaran Evans at Wake Forest University for example and code,  https://sta279-f23.github.io/]

```{r}
results <- read_html("https://taskmaster.fandom.com/wiki/Series_11") |>
  html_element(".tmtable") |> 
  html_table() |>
  mutate(episode = ifelse(startsWith(Task, "Episode"), Task, NA)) |>
  fill(episode, .direction = "down") |>
  filter(!startsWith(Task, "Episode"), 
         !(Task %in% c("Total", "Grand Total"))) |>
  pivot_longer(cols = -c(Task, Description, episode),
               names_to = "contestant",
               values_to = "score") |>
  mutate(series = 11)
```

## Scraping and wrangling Taskmaster data - results

```{r}
results |> 
  select(Task, Description, episode, contestant, score, series) |>
  head(10)
```

## more succinct results

```{r, eval=F}
   Task  Description         episode   contestant score series
  1     Prize: Best thing…  Episode 1… Charlotte… 1         11
  1     Prize: Best thing…  Episode 1… Jamali Ma… 2         11
  1     Prize: Best thing…  Episode 1… Lee Mack   4         11
  1     Prize: Best thing…  Episode 1… Mike Wozn… 5         11
  1     Prize: Best thing…  Episode 1… Sarah Ken… 3         11
  2     Do the most…        Episode 1… Charlotte… 2         11
  2     Do the most…        Episode 1… Jamali Ma… 3[1]      11
  2     Do the most…        Episode 1… Lee Mack   3         11
  2     Do the most…        Episode 1… Mike Wozn… 5         11
  2     Do the most…        Episode 1… Sarah Ken… 4         11
```

Currently, the `episode` column contains entries like

```{r, eval=F}
"Episode 1: It's not your fault. (18 March 2021)"
```


## Cleaning the `score` column


```{r}
results |> select(score) |> table()
```

How *should* the scores be stored? What is the cleaning task?


```{r}
#| label: fig-taskmaster-scores
#| out.width: 90%
#| fig-cap: Taskmaster Wiki https://taskmaster.fandom.com/wiki/Series_11
#| fig-alt: Screenshot of the scores for each contestant on each task. Note that many of the scores have footnotes which are recorded in the results table from scraping the wiki.
#| echo: false
include_graphics("../images/taskmaster-scores.jpg")
```

## Extracting numeric information

Suppose we have the following string:

```{r, eval=F}
"3[1]"
```

And we want to extract just the number "3":

```{r}
str_extract("3[1]", "3")
```


## Extracting numeric information

What if we don't know which number to extract?

```{r}
str_extract("3[1]", "\\d")
```

```{r}
str_extract("4[1]", "\\d")
```


```{r}
str_extract("10[1]", "\\d")
```

```{r}
str_extract("10[1]", "\\d+")
```

```{r}
str_extract("DQ", "\\d")
```

## `str_extract()`

`str_extract()` is an **R** function in the **stringr** package which can find *regular expressions* in strings of text.

```{r}
str_extract("My cat is 3 years old", "cat")
```

```{r}
str_extract("My cat is 3 years old", "3")
```


## Matching multiple options

`str_extract()` returns the first match; `str_extract_all()` allows more than one match.  

```{r}
str_extract("My cat is 3 years old", "cat|dog")
str_extract("My dog is 10 years old", "cat|dog")
str_extract("My dog is 10 years old, my cat is 3 years old", 
            "cat|dog")
str_extract_all("My dog is 10 years old, my cat is 3 years old", 
                "cat|dog")
```

## Matching groups of characters

What if I want to extract a *number*?

```{r}
str_extract("My cat is 3 years old", "\\d")
```

What will the result be for the following code?

```{r, eval=F}
str_extract("My dog is 10 years old", "\\d")
```

## Matching groups of characters

What if I want to extract a *number*?

```{r}
str_extract("My cat is 3 years old", "\\d")
```

What will the result be for the following code?

```{r}
str_extract("My dog is 10 years old", "\\d")
```

## Matching groups of characters

What if I want to extract a *number*?

```{r}
str_extract("My cat is 3 years old", "\\d")
```

What will the result be for the following code?

```{r}
str_extract("My dog is 10 years old", "\\d")
```

The `+` symbol in a regular expression means "repeated one or more times"

```{r}
str_extract("My dog is 10 years old", "\\d+")
```

## Extracting from multiple strings

```{r}
strings <- c("My cat is 3 years old", "My dog is 10 years old")
str_extract(strings, "\\d+")
```

## Extracting from multiple strings

What if we have multiple instances across multiple strings?  We need to be careful working with lists (instead of vectors).

```{r}
#| eval: false
strings <- c("My cat is 3 years old", "My dog is 10 years old")
str_extract(strings, "\\w")
str_extract_all(strings, "\\w")
str_extract(strings, "\\w+")
str_extract_all(strings, "\\w+")
```

## Extracting from multiple strings

What if we have multiple instances across multiple strings?  We need to be careful working with lists (instead of vectors).

```{r}
strings <- c("My cat is 3 years old", "My dog is 10 years old")
str_extract(strings, "\\w")
str_extract_all(strings, "\\w")
str_extract(strings, "\\w+")
str_extract_all(strings, "\\w+")
```

## Extracting episode information

Currently, the `episode` column contains entries like:

```{r, eval=F}
"Episode 2: The pie whisperer. (4 August 2015)"
```

How would I extract just the episode number?

## Extracting episode information

Currently, the `episode` column contains entries like:

```{r, eval=F}
"Episode 2: The pie whisperer. (4 August 2015)"
```

How would I extract just the episode number?

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", "\\d+")
```

## Extracting episode information

Currently, the `episode` column contains entries like:

```{r, eval=F}
"Episode 2: The pie whisperer. (4 August 2015)"
```

How would I extract the episode name?

Goal: find a pattern to match: *anything* that starts with a `:`, ends with a `.`

Let's break down that task into pieces.

## Extracting episode information

How can we find the period at the end of the sentence?  What does each of these lines of code return?

```{r}
#| eval: false
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".")
```

```{r}
#| eval: false
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".+")
```

```{r}
#| eval: false
str_extract("Episode 2: The pie whisperer. (4 August 2015)", "\\.")
```


## Extracting episode information - solution

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".")
```

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".+")
```

We use an *escape character* when we actually want to choose a period:

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", "\\.")
```

## Extracting episode information

Goal: find a pattern to match: *anything* that starts with a `:`, ends with a `.`

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)",
            ":.+\\.")
```

## Lookaround (again)


```{r}
#| label: fig-lookaround2
#| out.width: 70%
#| fig-cap: 'Image credit: Stefan Judis https://www.stefanjudis.com/blog/a-regular-expression-lookahead-lookbehind-cheat-sheet/'
#| fig-alt: 'The four different lookaround options: positive and negative lookahead and lookbehind. Each lookaround provides an anchor for where to start the regular expression matching.'
#| echo: false
include_graphics("../images/lookaround.png")
```


## Lookbehinds

`(?<=y)x` – *positive lookbehind* (matches 'x' when it is preceded by 'y')

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            "(?<=: ).+")
```

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            "(?<=\\. ).+")
```

## Lookaheads

`x(?=y)` – *positive lookahead* (matches 'x' when it is followed by 'y')

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            ".+(?=\\.)")
```

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            ".+(?=:)")
```


## Extracting episode information

Getting everything between the `:` and the `.`

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            "(?<=: ).+(?=\\.)")
```

## Extracting air date

I want to extract just the air date. What pattern do I want to match?

```{r, eval=F}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ...)
```

## Extracting air date

```{r}
str_extract("Episode 2: The pie whisperer. (4 August 2015)", 
            "(?<=\\().+(?=\\))")
```


## Wrangling the episode info

Currently:

```{r, echo=F}
results |>
  select(episode)
```

## Wrangling the episode info

One option:

```{r}
results |>
  select(episode) |>
  mutate(episode_name = str_extract(episode, "(?<=: ).+(?=\\.)"),
         air_date = str_extract(episode, "(?<=\\().+(?=\\))"),
         episode = str_extract(episode, "\\d+")) |> 
  mutate(air_date2 = dmy(air_date))
```


## Wrangling the episode info

Another option:

```{r, eval=F}
results |>
  separate_wider_regex(episode, 
                       patterns = c(".+ ", 
                                    episode = "\\d+", 
                                    ": ", 
                                    episode_name = ".+", 
                                    "\\. \\(", 
                                    air_date = ".+", 
                                    "\\)")) |> 
  mutate(air_date2 = dmy(air_date))
```

```{r, echo=F}
results |>
  select(episode) |>
  separate_wider_regex(episode, 
                       patterns = c(".+ ", 
                                    episode = "\\d+", 
                                    ": ", 
                                    episode_name = ".+", 
                                    "\\. \\(", 
                                    air_date = ".+", 
                                    "\\)")) |> 
  mutate(air_date2 = dmy(air_date))
```


