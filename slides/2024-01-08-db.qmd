---
title: Databases and **dbplyr** and **SQL**, oh my!
author: "Jo Hardin"
date: "January 8, 2024"
format:
  revealjs:
    slide-number: true
    show-slide-number: all
execute:
  echo: true
  warning: false
  message: false
---


```{r}
#| include: false

source("../_common.R")
fontawesome::fa_html_dependency()
```

# Course logistics

https://sds261-sql.netlify.app/

* syllabus
* class notes
* clicker questions
* project
* getting started with GitHub

# **SQL**:\n Structured Query Language

## What is a database?

* structured collection of data organized with
    - efficient storage
    - easy retrieval
    - consistent management
    
* data stored in tables which are linked to one another via keys



## Tidy data

* data frame (R) or table (SQL)
* columns of variables
* rows of observational units



## Differences between **R** and **SQL**

* tables in **SQL** databases can be arbitrarily large
    - live in storage, computer's hard drive (usually remote)
    
* data frames in **R** 
    - live in memory (RAM) on your personal computer
    
    
* tables in a database are linked via a key.


# Today's example

## The `airlines` database

Consider a database of US flights between 2010 and 2017.  The flights are downloaded from the <a href = "https://www.transtats.bts.gov/Homepage.asp" target = "_blank">Bureau of Transportation Statistics</a>, US Department of Transportation. The database is a superset of the `nycflights13` **R** package that tracks only flights in and out of airports serving New York City in 2013.

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("../images/airport-terminal.jpg")
```




## **SQL** connection

To set up a **SQL** connection, you need the location of the server (`host`) as well as a `user`name and `password`.

```{r}
con_air <- DBI::dbConnect(
  RMariaDB::MariaDB(),
  dbname = "airlines",
  host = Sys.getenv("MDSR_HOST"),
  user = Sys.getenv("MDSR_USER"),
  password = Sys.getenv("MDSR_PWD")
)
```

Hadley Wickham discusses how to use Sys.getenv: https://cran.r-project.org/web/packages/httr/vignettes/secrets.html


## Tables in `airlines` database


```{r}
DBI::dbListTables(con_air)
```




## **SQL** tables as `tbl`

```{r}
carriers <- dplyr::tbl(con_air, "carriers")
dim(carriers)
head(carriers)
```



## **SQL** tables as `tibble`

The function `collect()` copies a **SQL** table from it's server location on disk to your local memory location in **R**.

```{r}
carriers_tibble <- carriers |>
  dplyr::collect()

dim(carriers_tibble)
head(carriers_tibble)
```




## How much space does `carriers` take up?

The data frame in **R** takes up 2 orders of magnitude of memory more than the table which just points to the object in **SQL**.

```{r}
carriers |>
  object.size() |>
  print(units = "Kb")

carriers_tibble |>
  object.size() |>
  print(units = "Kb")
```



## What is **SQL**?

* **SQL** is a programming language for working with relational databases.
* **SQL** has been around since the 1970s, but has, unfortunately, many different dialects.
* To connect to the Smith and **mdsr** databases (via **R** and **DBeaver**), we will use **MySQL**.
* To connect to **DuckDB**, we will use the dialect native to **DuckDB**.



# Using **SQL** in RStudio

We will write **SQL** code in three distinct ways:

1. Using the package **dbplyr** **R** will directly translate **dplyr** code into **SQL**.
2. Using the **DBI** package, we can send **SQL** queries through an `r` chunk.
3. Using a `sql` chunk, we can write actual **SQL** code inside a quarto document.



## 1. Translating **dplyr** code into **SQL**

The function `dbListTables()` in the **DBI** package will tell us what tables exist in the **airlines** database.

```{r}
DBI::dbListTables(con_air)
flights <- dplyr::tbl(con_air, "flights")
carriers <- dplyr::tbl(con_air, "carriers")
```


## 1. Translating **dplyr** code into **SQL**

* Over what years is the `flights` data taken?

```{r}
yrs <- flights |>
  summarize(min_year = min(year), max_year = max(year))

yrs
```

## 1. Translating **dplyr** code into **SQL**

Because `flights` is not actually a `data.frame` in **R** (but instead a `tbl` in **SQL**), the work that was done above was actually performed in **SQL**.  To see the **SQL** code, we can use the function `show_query`.

```{r}
dplyr::show_query(yrs)
```


## 1. Translating **dplyr** code into **SQL**


* Create a data set containing only flights between `LAX` and `BOS` in 2012.

```{r}
la_bos <- flights |>
  filter(year == 2012 & ((origin == "LAX" & dest == "BOS") | 
           (origin == "BOS" & dest == "LAX"))) 

dplyr::show_query(la_bos)
```

## 1. Translating **dplyr** code into **SQL**

* **dbplyr** doesn't translate every **R** command into **SQL**.

* **SQL** is not a statistical software and doesn't, for example, have a mechanism for creating data visualizations.

* track which **R** commands are connected to **SQL** at the <a href = "https://dbplyr.tidyverse.org/reference/" target= "_blank">**dbplyr** reference sheet</a>.

## 2. **SQL** queries via the **DBI** package

* Look at the first few rows of the `flights` data.

```{r}
DBI::dbGetQuery(con_air,
                "SELECT * FROM flights LIMIT 8;")
```


## 2. **SQL** queries via the **DBI** package

* How many flights per year are in the `flights` table?

```{r}
DBI::dbGetQuery(con_air, 
  "SELECT year, count(*) AS num_flights FROM flights GROUP BY year ORDER BY num_flights;")
```

## 3. Direct **SQL** queries via `sql` chunks {.scrollable}

**SQL** queries can be written directly inside a `sql` chunk in RStudio.

```{sql}
#| connection: con_air
#| echo: fenced

SELECT * FROM flights LIMIT 8;
```


## 3. Direct **SQL** queries via `sql` chunks {.scrollable}

**SQL** queries can be written directly inside a `sql` chunk in RStudio.

```{sql}
#| connection: con_air
#| echo: fenced

SELECT year, count(*) AS num_flights 
       FROM flights 
       GROUP BY year 
       ORDER BY num_flights;
```

## Good practice

Always a good idea to terminate the **SQL** connection when you are done with it.

```{r}
dbDisconnect(con_air, shutdown = TRUE)
```

# Using **SQL** in **DBeaver**

* **DBeaver** is a free **SQL** client that supports MySQL 

* writing **SQL** code in **R** has some benefits (e.g., piping results tables into **ggplot2** for visualizations)

* using a **SQL** client that is designed for **SQL** queries has benefits as well.  

* to use **DBeaver**, <a href = "https://dbeaver.io/download/" target = "_blank">download the client</a> onto your computer and open it from your Applications.


# Tools: GitHub

* Lab assignments are submitted via GitHub 
* Follow Jenny Bryan's advice on how to get GitHub set-up: http://happygitwithr.com/
* Follow course specific advice: https://sds261-sql.netlify.app/github

## Steps for weekly homework {.scrollable}

1. Receive a link to the new assignment (clicking on the link will create a new private repo)  
2. Use RStudio  
     + New Project, version control, Git  
     + Clone the repo using SSH  
3. Create a new file sds261-lab#-lname-fname.qmd. (If the .qmd file already exists, rename the file to sds261-lab#-lname-fname.qmd.) 
4. Do the assignment  
     + **commit** and **push** after every problem  
5. For work done in **DBeaver** (.sql files), use the same naming convention: sds261-lab#-lname-fname.sql.
5. All necessary files *must* be in the same folder (e.g., data, .sql files, etc.)  

## A GitHub merge conflict {.scrollable}

- On GitHub (on the web) edit the README document and Commit it with a message describing what you did.

- Then, in RStudio also edit the README document with a different change.
     + Commit your changes
     + Try to push – you’ll get an error!
     + Try pulling
     + Resolve the merge conflict and then commit and push
 
- As you work in teams you are likely to run into merge conflicts, learning how to resolve them properly will be very important.


# GitHub

```{r, out.width = "500px", echo=FALSE}
knitr::include_graphics("../images/git_xkcd.png")
```




