---
title: Editing Databases
author: "Jo Hardin"
date: "January 17, 2024"
format:
  revealjs:
    slide-number: true
    show-slide-number: all
execute:
  echo: true
  warning: false
  message: false
---

<!--

this lecture is way too short (barely an hour including clicker and worksheet).  there are a lot of things that can be expanded (see below), but it would be even better with a great example or two.

* slide 11, what is AUTO_DETECT?
* fix slide 10 to match the selector gadget
* Ivanka example, use REGEXP
* slide 9, can i input without quotes?
* can I input just **one** field?
* is epid a number or character?  look at both where it is entered (originally and with the Elon Musk insertion) as well as for example where epid > 20221231 on slide 12
* add 2 values in INSERT INTO (elon musk plus one other)
* slide 23 walk through POSITION example, breaking down the example, use more slides
* add SHOW TABLES along the way to show the temp table
* add `ALTER` to `ALTER TABLE` because that's what DuckDB uses, and it's the answer to a problem in Lab 6
* sum two columns:
ALTER TABLE your_table ADD COLUMN sum_column INTEGER;
UPDATE your_table SET sum_column = column1 + column2;



-->

```{r}
#| include: false

source("../_common.R")
fontawesome::fa_html_dependency()
```
 
 
<!--

The slides were way to short.  Barely an hour with clicker and worksheet.  Here are some things to add, but might be good to also add another topic.


-->
 

# Today's example

We will continue to use **DuckDB** so that we have write access to the files we want to edit.

```{r}
con_duckdb <- DBI::dbConnect(duckdb::duckdb(),
                             dbdir = "duck_datab")
```

## Saturday Night Live {.scrollable}


```{r}
#| label: fig-snl
#| out.width: 90%
#| fig-cap: "image credit: NBC"
#| fig-alt: "Image says 'Saturday Night Live'."
#| echo: false
knitr::include_graphics("../images/SNL.jpg")
```

Consider the Saturday Night Live datasets available on the <a href = "https://github.com/hhllcks/snldb/" target = "_blank">snldb GitHub repo</a>. 



## Changing data {.scrollable}

The `UPDATE` function allows you to change a value in a table across all rows that match a certain criteria. 

```{sql}
#| connection: con_duckdb
#| echo: false
#| include: false

DROP TABLE IF EXISTS impressions;
```

```{r}
#| echo: false

duckdb_read_csv(con = con_duckdb, name = "impressions", files = "data/impressions.csv")
```


```{sql}
#| connection: con_duckdb

SELECT * FROM impressions 
   WHERE name LIKE 'Ivanka%';
```

## `UPDATE` {.scrollable}

For funsies, let's change Ivanka Trump to Ivanka Kushner.

```{sql}
#| connection: con_duckdb

UPDATE impressions
   SET name = 'Ivanka Kushner'
   WHERE name LIKE 'Ivanka%';
```



```{sql}
#| connection: con_duckdb

SELECT * FROM impressions 
   WHERE name LIKE 'Ivanka%';
```


## `UPDATE` {.scrollable}

::: {.callout-tip icon=false}

## <i class="fas fa-triangle-exclamation"></i> Watch out!

Be careful with `UPDATE`. A careless `UPDATE` could write over all of the data in your table.  There is no **undo** function.
:::


## Inserting data {.scrollable}

Task: include recent hosts in the `hosts` table.  

By searching the <a href = "http://www.snlarchives.net/Episodes/" target = "_blank">SNL archives</a>, we can see that the next host, chronologically was Elon Musk on May 8, 2021.

```{r}
#| label: fig-hosts
#| out.width: 90%
#| fig-cap: "Hosts information from snlarchives.net"
#| fig-alt: "Screenshot of the list of hosts, ordered chronologically."
#| echo: false
knitr::include_graphics("../images/nexthost.jpg")
```



## Inserting data {.scrollable}

Task: include recent hosts in the `hosts` table.  

```{sql}
#| connection: con_duckdb
#| echo: false
#| include: false

DROP TABLE IF EXISTS hosts;
```


```{r}
#| echo: false

duckdb_read_csv(con = con_duckdb, name = "hosts", files = "data/hosts.csv")
```

By searching the <a href = "http://www.snlarchives.net/Episodes/" target = "_blank">SNL archives</a>, we can see that the next host, chronologically was Elon Musk on May 8, 2021.

```{sql}
#| connection: con_duckdb

SELECT * FROM hosts
    ORDER BY epid DESC
    LIMIT 10;
```


## Inserting data {.scrollable}

`INSERT` allows us to add the relevant information associated with the episode of SNL that Elon Musk hosted.

```{sql}
#| connection: con_duckdb

INSERT INTO hosts (epid, aid)
   VALUES ('20210508', 'Elon Musk');
```

```{sql}
#| connection: con_duckdb

SELECT * FROM hosts
    ORDER BY epid DESC
    LIMIT 10;
```


## Inserting data {.scrollable}

It would be tedious to `INSERT` all of the most recent host information by hand.  Instead, we'll scrape the <a href = "http://www.snlarchives.net/Episodes/" target = "_blank">SNL archives</a> using the **R** package **rvest**, which allows us to pull out the appropriate html elements.  The `epid` and `aid` are joined together in a tibble, and `filter`ed to only include episodes which are not already in the `episodes` table.


```{r}
library(rvest)

recent_hosts <- read_html("http://www.snlarchives.net/Episodes/") |>
  html_nodes("tr") |>
  purrr::map_df( ~ tibble(
    epid = .x |> html_node("a.ms-2.me-2") |>
      html_attr("href") |>
      str_extract("\\d+"),
    aid = .x |> html_node("td:nth-child(2)") |>
      html_text2() |>
      str_extract("[\\w\\. \\w\\.]+(?=/|$)")
  )) |>
  filter(epid > 20210508)


write_csv(recent_hosts, "data/recent_hosts.csv")

```

## Inserting data {.scrollable}


```{sql}
#| connection: con_duckdb

INSERT INTO hosts
   SELECT *
   FROM READ_CSV('data/recent_hosts.csv', AUTO_DETECT = TRUE);
```


```{sql}
#| connection: con_duckdb

SELECT * FROM hosts
  ORDER BY epid DESC
  LIMIT 10;
```

## Deleting data {.scrollable}

You might change your mind and decide that you really only want hosts from years up to 2022. The `DELETE` function deletes any rows specified by the `WHERE` clause.

```{sql}
#| connection: con_duckdb

DELETE FROM hosts
   WHERE epid > 20221231;
```

```{sql}
#| connection: con_duckdb

SELECT * FROM hosts
  ORDER BY epid DESC
  LIMIT 10;
```

## Altering the table

`ALTER TABLE` changes the structure of a table. For example, you can add or delete columns, create or destroy indexes, change the type of existing columns, or rename columns or the table itself.

Multiple `ADD`, `ALTER`, `DROP`, and `CHANGE` clauses are permitted in a single `ALTER TABLE` statement, separated by commas. 

Caveat: I have found **DuckDB** to be slightly finicky in some of the operations...

## Altering the table (`DROP` columns)

```{sql}
#| eval: false

ALTER TABLE t1
DROP COLUMN col1,
DROP COLUMN col2;
```

## Altering the table (`CHANGE` name and definition)

* rename an `INT NOT NULL` column from `a` to `b`  and change its definition to use the `BIGINT` data type while retaining the `NOT NULL` attribute.

```{sql}
#| eval: false

ALTER TABLE t1 CHANGE a b BIGINT NOT NULL;
```

## Altering the table (`CHANGE` definition not name)

* `CHANGE`, the syntax requires two column names, so you must specify the same name twice to leave the name unchanged. For example, to change the definition of column `b`.

```{sql}
#| eval: false

ALTER TABLE t1 CHANGE b b INT NOT NULL;
```


## Altering the table (`MODIFY` definition)

* `MODIFY` is more convenient to change the definition without changing the name because it requires the column name only once.

```{sql}
#| eval: false

ALTER TABLE t1 MODIFY b INT NOT NULL;
```

## Altering the table (`CHANGE` name not definition)

* `CHANGE`, the syntax requires a column definition, so to leave the definition unchanged, you must respecify the definition the column currently has. For example, to rename an `INT NOT NULL` column from `b` to `a`.

```{sql}
#| eval: false

ALTER TABLE t1 CHANGE b a INT NOT NULL;
```

## Altering the table (`RENAME COLUMN` name not definition)

* `RENAME COLUMN` is more convenient to change the name without changing the definition because it requires only the old and new names.

```{sql}
#| eval: false

ALTER TABLE t1 RENAME COLUMN b TO a;
```

## Altering the table (`RENAME COLUMN` multiple columns)

* cannot `RENAME COLUMN` to a column name that already exists.  The following are valid.

```{sql}
#| eval: false

/* swap a and b */
ALTER TABLE t1 RENAME COLUMN a TO b,
               RENAME COLUMN b TO a;

/* "rotate" a, b, c through a cycle */
ALTER TABLE t1 RENAME COLUMN a TO b,
               RENAME COLUMN b TO c,
               RENAME COLUMN c TO a;
```


## Temporary Tables


Temporary tables are used to break down complex queries into smaller, more manageable steps. For example, let's say we want to `JOIN` two tables after each has been filtered using different `WHERE` clauses.  The filtered tables can each be saved into their own temporary tables and then the temporary tables can be merged.  


Tables in **DuckDB** are saved (to disk), even when the connection is closed.  However, temporary tables are saved in memory (instead of on disk) and are deleted when the connection is closed.




## Temporary Tables (episodes)

```{sql}
#| connection: con_duckdb
#| echo: false
#| include: false

DROP TABLE IF EXISTS episodes;
```

```{r}
#| echo: false
duckdb_read_csv(con = con_duckdb, name = "episodes", files = "data/episodes.csv")
```


```{sql}
#| connection: con_duckdb

SELECT * FROM episodes LIMIT 10;
```


## Temporary Tables {.scrollable}

We wouldn't want to wrangle the date every single time we used the data.

```{sql}
#| connection: con_duckdb
    
CREATE TEMP TABLE episodes_date AS
    SELECT *, CASE
             WHEN POSITION(',' IN aired) > 0 THEN
    EXTRACT(YEAR FROM CAST(
                SUBSTRING(aired, POSITION(',' IN aired) + 2) || '-' ||
                CASE
                    WHEN POSITION('January' IN aired) > 0 THEN '01'
                    WHEN POSITION('February' IN aired) > 0 THEN '02'
                    WHEN POSITION('March' IN aired) > 0 THEN '03'
                    WHEN POSITION('April' IN aired) > 0 THEN '04'
                    WHEN POSITION('May' IN aired) > 0 THEN '05'
                    WHEN POSITION('June' IN aired) > 0 THEN '06'
                    WHEN POSITION('July' IN aired) > 0 THEN '07'
                    WHEN POSITION('August' IN aired) > 0 THEN '08'
                    WHEN POSITION('September' IN aired) > 0 THEN '09'
                    WHEN POSITION('October' IN aired) > 0 THEN '10'
                    WHEN POSITION('November' IN aired) > 0 THEN '11'
                    WHEN POSITION('December' IN aired) > 0 THEN '12'
                    ELSE '01' -- Default to January if no month is found
                END || '-' ||
                SUBSTRING(aired, POSITION(' ' IN aired) + 1, 2) AS DATE
            ))
            END AS year FROM episodes;
```

## What does `POSITION` do?  {.scrollable}

In case you are curious about the date wrangling code... consider `SUBSTRING(aired, POSITION(',' IN aired) + 2)`

1. `POSITION(',' IN aired)`: This part of the expression uses the `POSITION` function to find the position of the first occurrence of the comma (`,`) in the string `aired`. The result is the index (position) of the comma within the string.

2. `POSITION(',' IN aired) + 2`: This adds 2 to the index of the comma. The `+ 2` is used to move the starting point of the substring two positions to the right of the comma. This is done to exclude the comma itself and any following spaces.

3. `SUBSTRING(aired, POSITION(',' IN aired) + 2)`: This part uses the SUBSTRING function to extract a substring from the string `aired`. The starting position of the substring is determined by `POSITION(',' IN aired) + 2`, and it goes until the end of the string. This effectively removes the part of the string that comes before and including the first comma.

In summary, the entire expression is extracting a substring from the original string `aired`, starting from two positions to the right of the first comma and continuing until the end of the string. This can be useful in scenarios where you want to remove or isolate part of a string based on the position of a specific character (in this case, the comma).


## Temporary Table exists!

```{sql}
#| connection: con_duckdb

SELECT * FROM episodes_date LIMIT 10;
```


## Using a temporary table

Now that the `year` variable has been created in the new temporary table called `episodes_date`, we can use `episode_date` to query and find, for example, all of the hosts in 2019.

```{sql}
#| connection: con_duckdb

SELECT hosts.aid, ep.aired, ep.year FROM hosts 
JOIN episodes_date AS ep ON hosts.epid = ep.epid
WHERE year = 2019
LIMIT 25;
```


## Best practice

It is always a good idea to terminate the **SQL** connection when you are done with it.

```{r}
dbDisconnect(con_duckdb, shutdown = TRUE)
```


