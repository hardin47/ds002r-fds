
# Clicker Questions

to go along with <br>

<b><a href = "https://mdsr-book.github.io/mdsr3e/" target = "_blank">Modern Data Science with R, 3rd edition</a></b> by Baumer, Kaplan, and Horton  

<b><a href = "https://r4ds.hadley.nz/" target = "_blank">R for Data Science, 2nd edition</a></b> by Wickham, Çetinkaya-Rundel, and Grolemund 

<!-- the two formats are html and revealjs -->


```{=html}
<style>
.reveal ol ol {
   list-style-type: lower-alpha;
}
</style>
```


```{r}
#| echo: false
#| message: false
#| warning: false

# figure options
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
  fig.width = 10, fig.asp = 0.618, out.width = "90%",
  fig.retina = 3, dpi = 300, fig.align = "center"
)

library(tidyverse)
library(lubridate)

# Make sure to put a space before and after every slide break "---"

```


---

(@) R / R Studio / Quarto[^1]
    (a) all good
    (b) started, progress is slow and steady
    (c) started, very stuck
    (d) haven’t started yet
    (e) what do you mean by "R"?

[^1]: wherever you are, make sure you are communicating with me when you have questions!

---

(@) Git / GitHub[^2]
    (a) all good
    (b) started, progress is slow and steady
    (c) started, very stuck
    (d) haven’t started yet
    (e) what do you mean by "Git"?

[^2]: wherever you are, make sure you are communicating with me when you have questions!

---

(@) Which of the following includes talking to the remove version of GitHub?[^3]
    (a) changing your name (updating the YAML)
    (b) committing the file(s)
    (c) pushing the file(s)
    (d) some of the above
    (e) all of the above
    
[^3]: c. pushing the file(s)

---

(@) What is the error?[^4]  
    (a) poor assignment operator
    (b) unmatched quotes
    (c) improper syntax for function argument
    (d) invalid object name
    (e) no mistake  


[^4]: a. poor assignment operator

```{r}
#| eval: false
#| echo: true
shup2 <-- "Hello to you!"
```

---

(@) What is the error?[^5]
    (a) poor assignment operator
    (b) unmatched quotes
    (c) improper syntax for function argument
    (d) invalid object name
    (e) no mistake

```{r}
#| eval: false
#| echo: true
3shup <-  "Hello to you!"
```

[^5]: d. invalid object name

---

(@) What is the error?[^6]
    (a) poor assignment operator
    (b) unmatched quotes
    (c) improper syntax for function argument
    (d) invalid object name
    (e) no mistake

```{r}
#| eval: false
#| echo: true
shup4 <-  "Hello to you!
```

[^6]: b. unmatched quotes

---

(@) What is the error?[^7]
    (a) poor assignment operator
    (b) unmatched quotes
    (c) improper syntax for function argument
    (d) invalid object name
    (e) no mistake

```{r}
#| eval: false
#| echo: true
shup5 <-  date()
```

[^7]: e. no mistake

---

(@) What is the error?[^8]
    (a) poor assignment operator
    (b) unmatched quotes
    (c) improper syntax for function argument
    (d) invalid object name
    (e) no mistake

```{r}
#| eval: false
#| echo: true
shup6 <-  sqrt 10
```

[^8]: c. improper syntax for a function argument

---

(@) Do you keep a calendar / schedule / planner?[^9]
     (a) Yes
     (b) No
     
[^9]: a. I mean, the right answer has to be Yes, right!??!

---

(@) Do you keep a calendar / schedule / planner?  If you answered "Yes" ...[^10]
     (a)	Yes, on Google Calendar
     (b)	Yes, on Calendar for macOS
     (c)	Yes, on Outlook for Windows
     (d)	Yes, in some other app
     (e)	Yes, by hand


[^10]: no right answer here!

---

(@) Where should I put things I've created for the HW (e.g., data, .ics file, etc.)[^11]
    (a) Upload into remote GitHub directory
    (b) In the local folder which also has the R project
    (c) In my Downloads
    (d) Somewhere on my Desktop
    (e) In my Home directory
    
[^11]: b. In the local folder which also has the R project.  It could be on the Desktop or the Home directory, but it must be in the same place as the R project. Do **not** upload files to the remote GitHub directory or you will find yourself with two different copies of the files.

---

(@) The goal of making a figure is...[^12]
     (a)  To draw attention to your work.
     (b) To facilitate comparisons.
     (c) To provide as much information as possible.

[^12]: Yes! All the responses are reasons to make a figure.

---

(@) A good reason to make a particular choice of a graph is:[^13]
     (a) Because the journal / field has particular expectations for how the data are presented.
     (b) Because some variables naturally fit better on some graphs (e.g., numbers on scatter plots).
     (c) Because that graphic displays the message you want as optimally as possible.

[^13]: c. Because that graphic displays the message you want as optimally as possible.

---

(@) Why are the points orange?[^14]
     (a) R translates "navy" into orange.
     (b) color must be specified in `geom_point()`
     (c) color must be specified **outside** the `aes()` function
     (d) the default plot color is orange
     
:::: {.columns}

::: {.column width="35%"}
```{r}
#| echo: false
library(mosaic)
data(Births78)
ggplot(data = Births78, 
       aes(x = date, y = births, color = "navy")) + 
  geom_point() +          
  labs(title = "US Births in 1978")
```
:::

::: {.column width="65%"}
```{r}
#| eval: false
#| echo: true
ggplot(data = Births78, 
       aes(x = date, y = births, color = "navy")) + 
  geom_point() +          
  labs(title = "US Births in 1978")
```
:::

::::

[^14]: c. color must be specified **outside** the `aes()` function

---

(@) Why are the dots blue and the lines colored?[^15]
     (a) dot color is given as "navy", line color is given as `wday`.
     (b) both colors are specified in the `ggplot()` function.
     (c) dot coloring takes precedence over line coloring.
     (d) line coloring takes precedence over dot coloring.
     
```{r}
#| echo: false
#| out-width: 60%
library(mosaic)
data(Births78)
ggplot(data = Births78, 
       aes(x = date, y = births)) + 
  geom_line(aes(color = wday)) +       
  geom_point(color = "navy") +          
  labs(title = "US Births in 1978")
```
     
[^15]: a. dot color is specified as "navy", line color is specified as `wday`.

---

(@) Setting vs. Mapping.  If I want information to be passed to all data points (not variable):[^16]
     (a) map the information inside the `aes()` function.
     (b) set the information outside the `aes()` function
     
[^16]: b. set the information outside the `aes()` function

---

(@) The Snow figure was most successful at:[^17]
     (a) making the data stand out
     (b) facilitating comparison
     (c) putting the work in context
     (d) simplifying the story

[^17]: answers may vary. I'd say c. putting the work in context.  Others might say b. facilitating comparison or d. simplifying the story.  However, I don't think a correct answer is a. making the data stand out.

---

(@) The Challenger figure(s) was(were) least successful at:[^18]
    (a) making the data stand out
    (b) facilitating comparison
    (c) putting the work in context
    (d) simplifying the story

[^18]: a. making the data stand out

---

(@) The biggest difference between Snow and the Challenger was:[^19]
    (a)	The **amount** of information portrayed.
    (b)	One was better at displaying **cause**.
    (c)	One showed the relevant **comparison** better.
    (d)	One was more **artistic**.

[^19]: c. One showed the relevant **comparison** better.

---
 
(@) Caffeine and Calories.  What was the biggest concern over the average value axes?[^20]
     (a) It isn’t at the origin.
     (b) They should have used all the data possible to find averages.
     (c) There wasn’t a random sample.
     (d) There wasn’t a label explaining why the axes were where they were.
     
[^20]: a. It isn’t at the origin. in combination with d. There wasn’t a label explaining why the axes were where they were.  The story associated with the average value axes is not clear to the reader.

---

(@) What is wrong with the following code?[^25]
    (a) should only  be one =
    (b) Sydney should be lower case
    (c) name should not be in quotes
    (d) use mutate instead of filter
    (e) babynames in wrong place

```{r}
#| eval: false
#| echo: true
Result <- |> filter(babynames,
		name== “Sydney”)
```

[^25]: e. babynames in wrong place

---

(@) Which data represents the ideal format for **ggplot2** and **dplyr**?[^26]

```{r}
#| echo: false
tribble_a <- tribble(
  ~year, ~Algeria, ~Brazil, ~Columbia,
  2000, 7, 12, 16,
  2001, 9, 14, 18
)
tribble_a |> gt::gt(caption = "table a") 
```

```{r}
#| echo: false
tribble_b <- tribble(
  ~country, ~Y2000, ~Y2001,
  "Algeria", 7, 9,
  "Brazil", 12, 14,
  "Columbia", 16, 18
)
tribble_b |> gt::gt(caption = "table b") 
```

```{r}
#| echo: false
tribble_c <- tribble(
  ~country, ~year, ~value,
  "Algeria", 2000, 7,
  "Algeria", 2001, 9,
  "Brazil", 2000, 12,
  "Brazil", 2001, 14,
  "Columbia", 2000, 16, 
  "Columbia", 2001, 18
)
tribble_c |> gt::gt(caption = "table c") 
```

[^26]: c. Table c is best because the columns allow us to work with each of the variable separately.

---

(@) Each of the statements except one will accomplish the same calculation.  Which one does not match?[^27]

```{r}
#| eval: false
#| echo: true
#(a) 
babynames |> 
  group_by(year, sex) |> 
  summarize(totalBirths = sum(num))

#(b) 
group_by(babynames, year, sex) |> 
  summarize(totalBirths = sum(num))

#(c)
group_by(babynames, year, sex) |> 
  summarize(totalBirths = mean(num))

#(d)
temp <- group_by(babynames, year, sex)

summarize(temp, totalBirths = sum(num))

#(e)
summarize(group_by(babynames, year, sex), 
          totalBirths = sum(num))
```

[^27]: c. does something different because it takes the `mean()` (average) instead of the `sum()`.  The other commands compute the total number of births broken down by `year` and `sex`.

---

(@) Fill in Q1.[^28]
    (a) `filter()`
    (b) `arrange()`
    (c) `select()`
    (d) `mutate()`
    (e) `group_by()`
    
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2,3"
result <- babynames |>
  Q1(name %in% c("Jane", "Mary")) |> 
  # just the Janes and Marys
  group_by(Q2, Q2) |> 
  summarize(total = Q3)
```

[^28]: a. `filter()`

---

(@) Fill in Q2.[^29]
    (a) `(year, sex)`
    (b) `(year, name)`
    (c) `(year, num)`
    (d) `(sex, name)`
    (e) `(sex, num)`
    
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "3,4"
result <- babynames |>
  Q1(name %in% c("Jane", "Mary")) |> 
  group_by(Q2, Q2) |> 
  # for each year for each name
  summarize(total = Q3)
```

[^29]: b. `(year, name)`

---

(@) Fill in Q3.[^30]
    (a) `n_distinct(name)`
    (b) `n_distinct(n)`
    (c) `sum(name)`
    (d) `sum(num)`
    (e) `mean(num)`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4,5"
result <- babynames |>
  Q1(name %in% c("Jane", "Mary")) |> 
  group_by(Q2, Q2) |> 
  summarize(total = Q3)
  # number of babies (each year, each name)
```

[^30]: d. `sum(num)`

---

(@) Running the code.[^31]

```{r}
#| echo: true
babynames <- babynames::babynames |> 
  rename(num = n)

babynames |>
  filter(name %in% c("Jane", "Mary")) |> 
  # just the Janes and Marys
  group_by(name, year) |> 
  # for each year for each name
  summarize(total = sum(num))
```


```{r}
#| error: true
#| echo: true

babynames |>
  filter(name %in% c("Jane", "Mary")) |> 
  group_by(name, year) |> 
  summarize(number = sum(num))

babynames |>
  filter(name %in% c("Jane", "Mary")) |> 
  group_by(name, year) |> 
  summarize(n_distinct(name))

babynames |>
  filter(name %in% c("Jane", "Mary")) |> 
  group_by(name, year) |> 
  summarize(n_distinct(num))

babynames |>
  filter(name %in% c("Jane", "Mary")) |> 
  group_by(name, year) |> 
  summarize(sum(name))

babynames |>
  filter(name %in% c("Jane", "Mary")) |> 
  group_by(name, year) |> 
  summarize(mean(num))

babynames |>
  filter(name %in% c("Jane", "Mary")) |> 
  group_by(name, year) |> 
  summarize(median(num))
```

[^31]: running the different code chunks with relevant output.

---

(@) Fill in Q1.[^32]
     (a) `gdp`
     (b) `year`
     (c) `gdpval`
     (d) `country`
     (e) `–country`

```{r}
#| echo: false
library(googlesheets4)
gs4_deauth()
GDP <- read_sheet("https://docs.google.com/spreadsheets/d/1RctTQmKB0hzbm1E8rGcufYdMshRdhmYdeL29nXqmvsc/pub?gid=0")
```

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "3"
GDP |>  
  select(country = starts_with("Income"), everything()) |> 
       pivot_longer(cols = Q1, 
                    names_to = Q2, 
                    values_to = Q3)
```

[^32]: e. `-country`

---

(@) Fill in Q2.[^33]
     (a) `gdp`
     (b) `year`
     (c) `gdpval`
     (d) `country`
     (e) `–country`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4"
GDP |>  
  select(country = starts_with("Income"), everything()) |> 
       pivot_longer(cols = Q1, 
                    names_to = Q2, 
                    values_to = Q3)
```

[^33]: b. `year`

---

(@) Fill in Q3.[^34]
     (a) `gdp`
     (b) `year`
     (c) `gdpval`
     (d) `country`
     (e) `–country`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "5"
GDP |>  
  select(country = starts_with("Income"), everything()) |> 
       pivot_longer(cols = Q1, 
                    names_to = Q2, 
                    values_to = Q3)
```

[^34]: c. `gdpval`  (if possible, good idea to name variables something different from the name of the data frame)

---

(@) Response to stimulus (in ms) after only 3 hrs of sleep for 9 days. You want to make a plot with the subject's reaction time (y-axis) vs the number of days of sleep restriction (x-axis) using the following `ggplot()` code. Which data frame should you use?[^35]
    a. use raw data
    b. use `pivot_wider()` on raw data
    c. use `pivot_longer()` on raw data
    
```{r}
#| echo: true
#| eval: false
ggplot(___, aes(x = ___, y = ___, color = ___)) + 
  geom_line()
```

```{r}
#| echo: false
sleep_wide <- readr::read_csv("https://mac-stat.github.io/data/sleep_wide.csv")
sleep_wide
```

[^35]: c. use `pivot_longer()` on raw data.  The reference to the study is: Gregory Belenky, Nancy J. Wesensten, David R. Thorne, Maria L. Thomas, Helen C. Sing, Daniel P. Redmond, Michael B. Russo and Thomas J. Balkin (2003) Patterns of performance degradation and restoration during sleep restriction and subsequent recovery: a sleep dose-response study. Journal of Sleep Research 12, 1–12.

---

```{r}
#| echo: true
sleep_long <- sleep_wide |>
  pivot_longer(cols = -Subject,
               names_to = "day",
               names_prefix = "day_",
               values_to = "reaction_time")

sleep_long
```

---

(@) Consider band members from the Beatles and the Rolling Stones.  Who is removed in a `right_join()`?[^36]
   a. Mick
   b. John
   c. Paul
   d. Keith
   e. Impossible to know

```{r}
#| echo: true
#| eval: false
band_members |> 
  right_join(band_instruments, by = "name")
```

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true
band_members
```
:::

:::{.column width="50%"}
```{r}
#| echo: true
band_instruments
```
:::
::::

[^36]: a. Mick

---

(@) Consider band members from the Beatles and the Rolling Stones.  Which variables are removed in a `right_join()`?[^37]
   a. `name`
   b. `band`
   c. `plays`
   d. none of them

```{r}
#| echo: true
#| eval: false
band_members |> 
  right_join(band_instruments, by = "name")
```

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true
band_members
```
:::

:::{.column width="50%"}
```{r}
#| echo: true
band_instruments
```
:::
::::

[^37]: d. none of them (the default is to retain all the variables)

---

(@) What happens to Mick's `plays` variable in a `full_join()`?[^38]
   a. Mick is removed
   b. changes to guitar
   c. changes to bass
   d. `NA`
   e. `NULL`

```{r}
#| echo: true
#| eval: false
band_members |> 
  full_join(band_instruments, by = "name")
```

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: true
band_members
```
:::

:::{.column width="50%"}
```{r}
#| echo: true
band_instruments
```
:::
::::

[^38]: d. `NA` (it would be `NULL` in **SQL**)
---


(@) What is the output of the following R code?[^39]
   a. TRUE
   b. TRUE TRUE TRUE TRUE
   c. TRUE FALSE FALSE FALSE
   d. FALSE

```{r}
#| eval: false
#| echo: true

fruit <- c("apple", "banana", "pear", "pineapple")
str_detect(fruit, "a")
```
  

[^39]: b.  TRUE TRUE TRUE TRUE

---

(@) What is the output of the following R code?[^40]
   a. "one -pple"     "two p-ars"     "three bananas"
   b. "on- -ppl-"     "two p--rs"     "thr-- b-n-n-s"
   c. "on- apple"     "two p-ars"     "thr-e bananas"

```{r}
#| eval: false
#| echo: true
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, c("a", "e", "i"), "-")
```
[^40]: a. "one -pple"     "two p-ars"     "three bananas"  (because `str_replace()` is vectorized)

---

(@) What is the output of the following R code?[^41]
    a. "abc"  "hifg"
    b. "ab"  "hifg"
    c. "ab"  "ifg"
    d. "abc" "ifg"

```{r}
#| eval: false
#| echo: true
x <- c("abcde", "ghifgh")
str_sub(x, start = c(1, 3), end = c(2, 5))
```

[^41]: c. "ab"  "ifg"  Again, `str_sub()` is vectorized.  So the subset of string one is from 1 to 2.  The subset of string two is from 3 to 5.

---

(@) What is January 31 + one month?[^42]
    a. February 31
    b. March 4
    c. February 28 (assuming no leap year)
    d. I don't want to answer the question
    
[^42]: I don't know what the answer is.  Ill-defined question.

---

(@)  What is the difference between what these two lines of code?[^43]
    a. same thing
    b. different months
    c. different output formatting
    d. different input
    e. different calculation
    
```{r}
#| eval: false
#| echo: true
library(lubridate)
today <- ymd("2024-09-25")
month(today)
month(today, label = TRUE)
```

[^43]: c. different output formatting  (the first produces `9` the second produces `Sep`)

---

(@) What does this number mean?[^44]
    a. Today is the 39th day of the month.
    b. Today is the 39th day of the year.
    c. Today is the 39th week of the month.
    d. Today is the 39th week of the year.

```{r}
#| echo: true
today <- ymd("2024-09-25")
week(today)
```

[^44]: d. Today is the 39th week of the year.

---

(@) What is the difference in these two functions?[^45]
   a. Day of month and day of year.
   b. Day of month and day of week.
   c. Day of week and day of year.
   d. Day of weekend and day of month.

```{r}
#| echo: true
mday(today)
yday(today)
```

[^45]: a. Day of month and day of year. (Day of year is often called the "Julian Day".)

---

(@) What is the result of the code?[^46]
    a. TRUE
    b. FALSE
    c. "2025-09-01"
    d. "2025-09-25"
    
```{r}
#| echo: true
#| eval: false
today > ymd("2025-09-01")
```
    
[^46]: b. FALSE


---


(@) `grep("q[^u]", very.large.word.list)` would not match which of the following?[^47]
    (a) Iraqi
    (b) Iraqian
    (c) Iraq
    (d) zaqqun (tree that "springs out of the bottom of Hell", in the Quran)
    (e) Qantas (the Australian airline)
    
[^47]: neither c. nor e. would match. Inside the bracket "[^u]" matches anything other than a "u", but it has to match something.

---

(@) Which of the following regex would match to both "grey" and "gray"?[^48]
    (a) "gr[ae]y"
    (b) "gr(a|e)y"
    (c) "gray | grey"
    (d) "gr[a|e]y"
    (e) some / all of the above -- which ones?

[^48]: e. all of the above. Inside a character class `|` is a normal character and would therefore match "grey" and "gray" and "gr|y".  Which is not what we want, but would work to match both "grey" and "gray".


---

(@) What will the result be for the following code?[^49]  
    (a) 10
    (b) 1
    (c) 0
    (d) NA

```{r}
#| eval: false
#| echo: true
str_extract("My dog is 10 years old", "\\d")
``` 
    
[^49]: b. 1 (because `\d` matches only a single digit).


---


(@) What will the result be for the following code?[^50]  
    (a) 10
    (b) 1
    (c) 0
    (d) NA

```{r}
#| eval: false
#| echo: true
str_extract("My dog is 10 years old", "\\d+")
``` 
    
[^50]: a. 10 (because `\d+` matches at least one digit).


---

(@) What will the result be for the following code?[^51]
    (a) .
    (b) Episode 2: The pie whisperer. (4 August 2015)
    (c) Episode
    (d) E

```{r}
#| eval: false
#| echo: true
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".")
```

[^51]: d. E (because `.` matches anything, and returns only a single character).

---

(@) What will the result be for the following code?[^52]
    (a) .
    (b) Episode 2: The pie whisperer. (4 August 2015)
    (c) Episode
    (d) E

```{r}
#| eval: false
#| echo: true
str_extract("Episode 2: The pie whisperer. (4 August 2015)", ".+")
```

[^52]: b. Episode 2: The pie whisperer. (4 August 2015) (because `.` matches anything, and with the `+` it returns multiple characters).

---

(@) What will the result be for the following code?[^53]
    (a) .
    (b) Episode 2: The pie whisperer. (4 August 2015)
    (c) Episode
    (d) E

```{r}
#| eval: false
#| echo: true
str_extract("Episode 2: The pie whisperer. (4 August 2015)", "\\.")
```

[^53]: a. . (because `\.` matches the period, .).

---

(@) What is the difference between the output for the two regular expressions below?[^54]
    a. They give the same result.
    b. The first is not case sensitive.
    c. The second allow for all the variants.
    d. The first includes Jane.
    
```{r}
#| eval: false
#| echo: true
string <- c("Mary", "Mar", "Janet", "jane", "Susan", "Sue")
str_extract(string, "\\bMary|Jane|Sue\\b")
str_extract(string, "\\b(Mary|Jane|Sue)\\b")
```

[^54]: d. The first includes Jane.

---

(@) How can I pull out just the numerical information in "\$47"?[^54]
    (a) "(?<=\\$)\\d"
    (b) "(?<=\\$)\\d+"
    (c) "\\d(?=\\$)"
    (d) "\\d+(?=\\$)"

```{r}
#| eval: false
#| echo: false
str_extract("$47", "(?<=\\$)\\d+")
```

[^54]: b. "(?<=\\$)\\d+"


---

(@) You want to know all the types of pies in the text strings.  They are written as, for example "apple pie".[^55]
    (a) "\\w+(?!pie)"
    (b) "\\w+(?! pie)"
    (c) "\\w+(?=pie)"
    (d) "\\w+(?= pie)"

```{r}
#| eval: false
#| echo: false
str_extract(c("apple pie", "chocolate pie", "peach pie"), "\\w+(?= pie)")
```

[^55]: d. "\\w+(?= pie)"

---

```{r}
#| echo: true
str_extract(c("apple pie", "chocolate pie", "peach pie"), "\\w+(?= pie)")
```

```{r}
#| echo: true
str_extract(c("apple pie", "chocolate pie", "peach pie"), "\\w+(?=pie)")
```

---

(@) We say that lookarounds are "zero-lenghth assertions".  What does that mean?[^56]
    (a) we return the string in the lookaround
    (b) we replace the string in the lookaround
    (c) we return the string at the lookaround
    (d) we replace the string at the lookaround

[^56]: c. we return the string at the lookaround


---

(@) What will happen when I run the following code?[^57]
    a. 0
    b. 3
    c. 9
    d. NA
    e. error (code will fail)

```{r}
#| error: true
#| echo: true
#| eval: false
my_power <- function(x, y){
  return(x^y)
}
my_power(3)
```

[^57]: e. error (code will fail)

---

(@) What will happen when I run the following code?[^58]
    a. 0
    b. 3
    c. 9
    d. NA
    e. error (code will fail)

```{r}
#| echo: true
#| eval: false
my_power <- function(x, y = 2){
  return(x^y)
}
my_power(3)
```

[^58]: c. 9

---

(@) What will happen when I run the following code?[^59]
    a. 4
    b. 8
    c. 9
    d. NA
    e. error (code will fail)

```{r}
#| echo: true
#| eval: false
my_power <- function(x, y = 2){
  return(x^y)
}
my_power(2, 3)
```

[^59]: b. 8

---

(@) What will happen when I run the following code?[^60]
    a. 4
    b. 8
    c. 9
    d. NA
    e. error (code will fail)

```{r}
#| echo: true
#| eval: false
my_power <- function(x = 2, y = 3){
  return(x^y)
}
my_power( )
```

[^60]: b. 8

---

(@) Consider the `addTen()` function.  The following output is a result of which `map_*()` call?[^61]
   a. `map(c(1,4,7), addTen)`
   b. `map_dbl(c(1,4,7), addTen)`
   c. `map_chr(c(1,4,7), addTen)`
   d. `map_lgl(c(1,4,7), addTen)`
   
```{r}
#| echo: true
addTen <- function(wow) {
  return(wow + 10)
}
```

```{r}
#| echo: false
map_chr(c(1,4,7), addTen)
```

[^61]: c. `map_chr(c(1,4,7), addTen)` because the output is in quotes, the values are strings, not numbers.

---

(@) Which of the following input is allowed?[^62]
    a. `map(c(1, 4, 7), addTen)`
    b. `map(list(1, 4, 7), addTen)`
    c. `map(data.frame(a=1, b=4, c=7), addTen)`
    d. some of the above
    e. all of the above

[^62]: e. all of the above.  The `map()` function allows vectors, lists, and data frames as input.

---

(@) Which of the following produces a different output?[^63]
    a. `map(c(1, 4, 7), addTen)`
    b. `map(c(1, 4, 7), ~addTen(.x))`
    c. `map(c(1, 4, 7), ~addTen)`
    d. `map(c(1, 4, 7), function(hi) (hi + 10))`
    e. `map(c(1, 4, 7), ~(.x + 10))`
    
[^63]: c. `map(c(1, 4, 7), ~addTen)`.  The `~` acts on functions that do not have their own name or that are defined by `function(...)`.  By adding the argument `(.x)` we've expanded the `addTen()` function, and so it needs a `~`.  The `addTen()` function all alone does not use a `~`.

---

(@) What will the following code output?[^64]
    a. 3 random normals
    b. 6 random normals
    c. 18 random normals
    
```{r}
#| echo: false
#| eval: true
input <- tibble::tribble(
  ~ n, ~ mean, ~ sd,
   1,     1,    3,
   2,    3,   1,
   3,   47,  10
)
```
```{r}
#| echo: true
#| eval: true
input
```

```{r}
#| echo: true
#| eval: false
input |> 
  pmap(rnorm)
```
[^64]: b. 6 random normals (1 with mean 1, sd 3; 2 with mean 3, sd 1; 3 with mean 47, sd 10)

---

(@) What is the following error telling me?[^65]
  a. I haven't loaded **lubridate**.
  b. I can't add months and days.
  c. There is no object called `jan31`.
  d. `months()` is not a function.
  e. There is no error
  
```{r}
#| eval: false
#| echo: true
jan31 + months(0:11) + days(31)
#> Error in eval(expr, envir, enclos): object 'jan31' not found
```

[^65]: c. There is no object called `jan31`.

---

(@) What is the following error telling me?[^66]
  a. I haven't loaded **lubridate**.
  b. I can't add months and days.
  c. There is no object called `jan31`.
  d. `ymd()` is not a function.
  e. There is no error.
  
```{r}
#| eval: false
#| echo: true
  jan31 <- ymd("2021-01-31")
#> Error in ymd("2021-01-31"): could not find function "ymd"
  jan31 + months(0:11) + days(31)
#> Error in eval(expr, envir, enclos): object 'jan31' not found
```

[^66]: a. I haven't loaded **lubridate** (which is why it doesn't recognize that `ymd()` is not a function).

---

(@) What is the following error telling me?[^67]
  a. I haven't loaded **lubridate**.
  b. I can't add months and days.
  c. There is no object called `jan31`.
  d. `ymd()` is not a function.
  e. There is no error.
  
```{r}
#| eval: false
#| echo: true
  library(lubridate)
#> 
#> Attaching package: 'lubridate'
#> The following objects are masked from 'package:base':
#> 
#>     date, intersect, setdiff, union
  jan31 <- ymd("2021-01-31")
  jan31 + months(0:11) + days(31)
#>  [1] "2021-03-03" NA           "2021-05-01" NA           "2021-07-01"
#>  [6] NA           "2021-08-31" "2021-10-01" NA           "2021-12-01"
#> [11] NA           "2022-01-31"
```

[^67]: e. There is no error.

---


(@) In R the `ifelse()` function takes the arguments:[^68]
   a. question, yes, no
   b. question, no, yes
   c. statement, yes, no
   d. statement, no, yes
   e. option1, option2, option3


[^68]: a. question, yes, no

---

(@) What is the output of the following:[^69]
    a.	"cat", 30, "cat", "cat", 6 
    b.	"cat", "30", "cat", "cat", "6"
    c.	1, "cat", 5, "cat", "cat"
    d.	1, "cat", 5, NA, "cat"
    e.	"1", "cat", "5", NA, "cat"

```{r}
#| eval: false
#| echo: true
data <- c(1, 30, 5, NA, 6)

ifelse(data > 5, "cat", data)
```

[^69]: e.	"1", "cat", "5", NA, "cat"  (Note that the numbers were converted to character strings!)

---

(@) In R, the `set.seed()` function[^70]
   a. makes your computations go faster
   b. keeps track of your computation time
   c. provides an important parameter
   d. repeats the function
   e. makes your results reproducible

[^70]: e. makes your results reproducible


---

(@) What does the following give us?[^71]
  a. the number of hats that match
  b. the number of hats that don't match
  c. the proportion of hats that match
  d. the proportion of hats that don't match
  e. whether or not at least one hat matches
  
```{r}
#| echo: false

hats <- 1:10
random_hats <- sample(hats, size = 10, replace = TRUE)
```
  
```{r}
#| echo: true
sum(hats == random_hats)
```

[^71]: a. the number of hats that match


---

(@) What does the following give us?[^72]
  a. the number of hats that match
  b. the number of hats that don't match
  c. the proportion of hats that match
  d. the proportion of hats that don't match
  e. whether or not at least one hat matches
  
```{r}
#| echo: true
mean(hats == random_hats)
```

[^72]: c. the proportion of hats that match


---

(@) What does the following give us?[^73]
  a. the number of hats that match
  b. the number of hats that don't match
  c. the proportion of hats that match
  d. the proportion of hats that don't match
  e. whether or not at least one hat matches
  
```{r}
#| echo: true
sum(hats == random_hats) > 0
```

[^73]: e. whether or not at least one hat matches

---

(@) In the SAT example, we ran a single iteration and found that the false positive and false negative rates were problematic.  What should we do next?[^74]
   a. Repeat for many iterations.
   b. Change the initial settings.
   c. Bring this analysis to the people with power.
   d. Always use two models.
   e. Always use only one model.
   
[^74]: a. Repeat for many iterations. (The next step needs to gather information on how the FP and FN results hold, it might have just been something odd in my simulation... )

--- 

(@) In the SAT example, what types of things might we vary?[^75]
   a. proportion to red vs blue
   b. how variable the values are:  `N(talent, 15)`
   c. different number of times blues get to take the test
   d. how close `grades` and `SAT` are to `talent` (bias?)

[^75]: all of the above

---

(@) What would you want to know from the investment allocation plots?[^76]
    a. What is the average rate of return?
    b. What is the maximum rate of return?
    c. What is the minimum rate of return?
    d. How often do I lose money?

[^76]: It totally depends on your personality and your finances.  b. doesn't make much sense.  But a., c., and d. are all very reasonable questions to ask about your investments.

---

(@) If 16 infants with **no genuine preference** choose 16 toys, what is the most likely number of "helping" toys that will be chosen?[^77]
   (a)	4
   (b)	7
   (c)	8
   (d)	9
   (e)	10


[^77]:  c.	8

---

(@) How likely is it that exactly 8 helpers will be chosen (if there is no preference)?[^78]
   (a)	0-15% 
   (b)	16-30% 
   (c)	31-49%
   (d)	50%
   (e)	51-100%


[^78]:  b. 0.196 (19.6% of the time)

---

(@) What if we flipped a coin 160 times?  What percent of the time will the simulation flip exactly 80 heads?[^79]
   (a)	0-15% 
   (b)	16-30% 
   (c)	31-49%
   (d)	50%
   (e)	51-100%

[^79]: a. 0.063 (6.3% of the time)

---

(@) Is our actual result of 14 (under the coin model)...[^80]
   (a) very surprising?
   (b) somewhat surprising?
   (c) not very surprising?
   
[^80]: a. very surprising (prob of 14 or more is 0.0021)

---

(@) Hypothesis: the number of hours that grade-school children spend doing homework predicts their future success on standardized tests.[^81]
    (a) null, one sided
    (b) null, two sided
    (c) alternative, one sided
    (d) alternative, two sided

[^81]: c. alternative, one sided (because probably we are studying that it **increases** their success rate)

---

(@) Hypothesis: king cheetahs on average run the same speed as standard spotted cheetahs.[^82]
    (a) null, one sided
    (b) null, two sided
    (c) alternative, one sided
    (d) alternative, two sided

[^82]: a. null, two sided (because I have no idea which cheetah might run faster)

---

(@) Hypothesis: the mean length of African elephant tusks has changed over the last 100 years.[^83]
    (a) null, one sided
    (b) null, two sided
    (c) alternative, one sided
    (d) alternative, two sided

[^83]: d. alternative, two sided (because I have no idea whether they've increased or decreased)

---

(@) Hypothesis: the risk of facial clefts is equal for babies born to mothers who take folic acid supplements compared with those from mothers who do not.[^84]
    (a) null, one sided
    (b) null, two sided
    (c) alternative, one sided
    (d) alternative, two sided

[^84]: a. null, one sided (because I happen to know that folic acid is thought to prevent facial clefts)

---

(@) Hypothesis: caffeine intake during pregnancy affects mean birth weight.[^85]
    (a) null, one sided
    (b) null, two sided
    (c) alternative, one sided
    (d) alternative, two sided

[^85]: c. alternative, one sided (because I happen to know that caffeine is thought to decrease baby's birth weight)

---

(@) In this class, the word parameter means:[^86]
    (a) The values in a model
    (b) Numbers that need to be tuned
    (c) A number which is calculated from a sample of data.
    (d) A number which (is almost always unknown and) describes a population.

[^86]: d. A number which (is almost always unknown and) describes a population.

---





---


---

(@) What is a **SQL** server?[^101]
   (a) A relational database management system.
   (b) A software whose main purpose is to store and retrieve data.
   (c) A highly secure server and does not allow any database file manipulation during execution.
   (d) All of the above.

[^101]: a. A relational database management system.


---

(@) When was **SQL** created?[^102]
   (a) 1960s
   (b) 1970s
   (c) 1980s
   (d) 1990s
   (e) 2000s

[^102]: b. The first versions were created in the 1970s and called SEQUEL (Structured English QUEry Language).  c. **SQL** came about in particular systems in the 1980s.
   
---

(@) What type of databases is **SQL** designed for?[^103]
   (a) hierarchical database management systems.
   (b) network database management systems.
   (c) object-oriented database management systems.
   (d) relational database management systems.

[^103]: d. relational database management systems.

---

(@) Which is bigger:[^104]
   (a) computer's hard drive / storage
   (b) computer's memory / RAM

[^104]: a. computer's hard drive / storage

---

(@) Where are each stored?[^105]
   (a) **SQL** `tbl` and **R**  `tibble` both in storage
   (b) **SQL** `tbl` and **R**  `tibble` both in memory
   (c) **SQL** `tbl` in storage and **R**  `tibble` in memory
   (d) **SQL** `tbl` in memory and **R**  `tibble` in storage
   
[^105]: c. **SQL** `tbl` in storage and **R**  `tibble` in memory

---

(@) Which **SQL** clause is used to extract data from a database?[^106]
   (a) OPEN
   (b) EXTRACT
   (c) SELECT
   (d) GET

[^106]: c. SELECT

---

(@) With SQL, how to you retrieve a column named "FirstName" from a table named "Persons"?[^107]
   (a) `SELECT` Persons.FirstName
   (b) EXTRACT FIRSTNAME `FROM` Persons
   (c) `SELECT` FirstName `FROM` Persons
   (d) `SELECT` "FirstName" `FROM` "Persons"

[^107]: c. `SELECT` FirstName `FROM` Persons

---

(@) With SQL, how do you select all the columns from a table named "Persons"?[^108]
   (a) `SELECT` Persons
   (b) `SELECT` * `FROM` Persons
   (c) `SELECT` [all] `FROM` Persons
   (d) `SELECT` *.Persons

[^108]: b. `SELECT` * `FROM` Persons

---

(@) With **SQL**, how can you return the number of records in the "Persons" table?[^109]
   (a) `SELECT` `COLUMNS(*)` `FROM` Persons
   (b) `SELECT` `COUNT(*)` `FROM` Persons
   (c) `SELECT` `NO(*)` `FROM` Persons
   (d) `SELECT` `LEN(*)` `FROM` Persons

[^109]: b. `SELECT` `COUNT(*)` `FROM` Persons

---

(@) With **SQL**, how do you select all the records from a table named "Persons" where the value of the column "FirstName" is "Peter"?[^110]
   (a) `SELECT` * `FROM` Persons `WHERE` FirstName <> 'Peter'
   (b) `SELECT` * `FROM` Persons `WHERE` FirstName = 'Peter'
   (c) `SELECT` * `FROM` Persons `WHERE` FirstName == 'Peter'
   (d) `SELECT` [all] `FROM` Persons `WHERE` FirstName `LIKE` 'Peter'
   (e) `SELECT` [all] `FROM` Persons `WHERE` FirstName = 'Peter'
   
[^110]: b. `SELECT` * `FROM` Persons `WHERE` FirstName = 'Peter' (d. would also work.)

---

(@) With SQL, how do you select all the records from a table named "Persons" where the "FirstName" is "Peter" and the "LastName" is "Jackson"?[^111]
   (a) `SELECT` FirstName = 'Peter', LastName = 'Jackson' `FROM` Persons
   (b) `SELECT` * `FROM` Persons `WHERE` FirstName <> 'Peter' AND LastName <> 'Jackson'
   (c) `SELECT` * `FROM` Persons `WHERE` FirstName = 'Peter' AND LastName = 'Jackson'
   (d) `SELECT` * `FROM` Persons `WHERE` FirstName == 'Peter' AND LastName == 'Jackson'

[^111]: c. `SELECT` * `FROM` Persons `WHERE` FirstName = 'Peter' AND LastName = 'Jackson'

---

(@) Which operator selects values within a range?[^112]
    (a) `BEWTEEN`
    (b) `WITHIN`
    (c) `RANGE`

[^112]: a. `BEWTEEN`

---

(@) With **SQL**, how do you select all the records from a table named "Persons" where the "LastName" is alphabetically between (and including) "Hansen" and "Pettersen"?[^113]
    (a) `SELECT` LastName > 'Hansen' AND LastName < 'Pettersen' `FROM` Persons
    (b) `SELECT` * `FROM` Persons `WHERE` LastName BETWEEN 'Hansen' AND 'Pettersen'
    (c) `SELECT` * `FROM` Persons `WHERE` LastName > 'Hansen' AND LastName < 'Pettersen'

[^113]: b. `SELECT` * `FROM` Persons `WHERE` LastName BETWEEN 'Hansen' AND 'Pettersen'

---

(@) Which **SQL** statement returns only different values?[^114]
    (a) `SELECT` `UNIQUE`
    (b) `SELECT` `DISTINCT`
    (c) `SELECT` `DIFFERENT`

[^114]: b. `SELECT` `DISTINCT`

---

(@) Which **SQL** keyword is used to sort the result-set?[^115]
    (a) `ORDER BY`
    (b) `ORDER`
    (c) `SORT`
    (d) `SORT BY`
 
[^115]: a. `ORDER BY`

---

(@) With **SQL**, how can you return all the records from a table named "Persons" sorted descending by "FirstName"?[^116]
    (a) `SELECT` * `FROM` Persons `ORDER` FirstName `DESC`
    (b) `SELECT` * `FROM` Persons `SORT` 'FirstName' `DESC`
    (c) `SELECT` * `FROM` Persons `ORDER BY` FirstName `DESC`
    (d) `SELECT` * `FROM` Persons `SORT BY` 'FirstName' `DESC`

[^116]: c. `SELECT` * `FROM` Persons ORDER BY FirstName DESC

---

(@) The OR operator displays a record if ANY conditions listed are true. The AND operator displays a record if ALL of the conditions listed are true.[^117]
    (a) TRUE
    (b) FALSE 

[^117]: a. TRUE

---

(@) In order to `SELECT` the records with foods that are either green or yellow fruit:[^118] 
    (a) ... `WHERE` type = 'fruit' AND color = 'yellow' OR color = 'green'  
    (b) ... `WHERE` (type = 'fruit' AND color = 'yellow') OR color = 'green'  
    (c) ... `WHERE` type = 'fruit' AND (color = 'yellow' OR color = 'green')  
    (d) ... `WHERE` type = 'fruit' AND color = 'yellow' AND color = 'green'  
    (e) ... `WHERE` type = 'fruit' AND (color = 'yellow' AND color = 'green') 
   
[^118]: c. ... `WHERE` type = 'fruit' AND (color = 'yellow' OR color = 'green') 

---

(@) What is the purpose of a `JOIN`?[^119]  
    (a) it filters the rows returned by the `SELECT` statement.
    (b) it specifies the columns to be retrieved.
    (c) it combines rows from two or more tables based on a related column.
    (d) it orders the results in ascending or descending order.

[^119]: c. it combines rows from two or more tables based on a related column.

---

(@) What is the purpose of the `UNION` operator in SQL?[^120]
    (a) it combines the results of two or more `SELECT` statements. 
    (b) it performs a pattern match on a string.
    (c) it retrieves the maximum value in a column.
    (d) it filters the rows returned by the `SELECT` statement.

[^120]: a. it combines the results of two or more `SELECT` statements.

---

(@) What is the purpose of the `INNER JOIN` in SQL?[^121]
    (a) it retrieves the maximum value in a column.
    (b) it combines rows from two or more tables based on a related column. 
    (c) it filters the rows returned by the `SELECT` statement.
    (d) it performs a pattern match on a string.

[^121]: b. it combines rows from two or more tables based on a related column.

---

(@) What is the purpose of the `LEFT JOIN` in SQL?[^122]
    (a) it combines rows from two or more tables based on a related column.
    (b) it retrieves the maximum value in a column.
    (c) it filters the rows returned by the `SELECT` statement. 
    (d) it performs a pattern match on a string.

[^122]: a. it combines rows from two or more tables based on a related column.

---

(@) `RIGHT JOIN` keeps all the rows in ...?[^123]  
    (a) the first table.
    (b) the second table.
    (c) both tables.
    (d) neither table

[^123]: a. the first table

---

(@) Who is removed in a `RIGHT JOIN`?[^124]
    (a) Mick
    (b) John
    (c) Paul
    (d) Keith

```{r}
#| echo: false
#| out-width: 50%

library(cowplot)
library(ggpubr)

fig1_path <- "images/members.jpg"
fig2_path <- "images/instruments.jpg"

fig1 <- ggdraw() + draw_image(fig1_path)
fig2 <- ggdraw() + draw_image(fig2_path)

ggarrange(fig1, fig2, ncol = 2)
```

[^124]: a. Mick

---

(@) Which variable(s) are removed in a `RIGHT JOIN`?[^125]
    (a) name
    (b) band
    (c) plays
    (d) none of them

```{r}
#| echo: false
#| out-width: 50%

library(cowplot)
library(ggpubr)

fig1_path <- "images/members.jpg"
fig2_path <- "images/instruments.jpg"

fig1 <- ggdraw() + draw_image(fig1_path)
fig2 <- ggdraw() + draw_image(fig2_path)

ggarrange(fig1, fig2, ncol = 2)
```

[^125]: d. none of them (all variables are kept in all joins)
 

---

(@) In **SQL**, what happens to Mick's "plays" variables in a `FULL JOIN`?[^126]
    (a) Mick is removed
    (b) guitar
    (c) bass
    (d) NA
    (e) `NULL`

```{r}
#| echo: false
#| out-width: 40%

library(cowplot)
library(ggpubr)

fig1_path <- "images/members.jpg"
fig2_path <- "images/instruments.jpg"

fig1 <- ggdraw() + draw_image(fig1_path)
fig2 <- ggdraw() + draw_image(fig2_path)

ggarrange(fig1, fig2, ncol = 2)
```

[^126]: e. `NULL` (it would be NA in **R**)
 

---

<!--look at exercises: https://github.com/STAT545-UBC/STAT545-UBC-original-website/blob/master/block022_regular-expression.md

which reg expr matches all countries with "ee"

countries with "i" or "t" and ends in "land"; has "ee"; continents with "o"

can use flights data for cities with particular names-->



<!--
---

(@) In **SQL**, which operator is used to search for a specified pattern in a column?[^137]
    (a) `LIKE`
    (b) `GET`
    (c) `FROM`

[^137]: a. `LIKE` (We didn't cover, and **SQL** has it's own characters, for example `%` for wildcard.)-->

---

(@) With **SQL**, how do you select all the records from a table named "Persons" where the value of the column "FirstName" starts with an "a"?[^137]
    (a) `SELECT` * `FROM` Persons `WHERE` FirstName = 'a.*'
    (b) `SELECT` * `FROM` Persons `WHERE` FirstName = 'a*'
    (c) `SELECT` * `FROM` Persons `WHERE` FirstName `REGEXP` 'a.*'
    (d) `SELECT` * `FROM` Persons `WHERE` FirstName `REGEXP` 'a*'
    (e) `SELECT` * `FROM` Persons `WHERE` FirstName `REGEXP` '(?i)a.*'

[^137]: e. `SELECT` * `FROM` Persons `WHERE` FirstName `REGEXP` '(?i)a.*' (n.b., the `LIKE` function will give you a similar result, with `%` as a wildcard: SELECT` * `FROM` Persons `WHERE` FirstName LIKE 'a%')

---

(@) What is the main way to absolutely recognize a record within a database?[^138]
    (a) Foreign key
    (b) Primary key
    (c) Unique key
    (d) Natural key
    (e) Alternate key

[^138]: b. Primary key

---

(@) What does a foreign key do?[^139]
    (a) Directly identifies another table
    (b) Directly identifies another column
    (c) Gives access to another entire database
    (d) Translates the database into another language
    
[^139]: b. Directly identifies another column

---

(@) Which of these would likely be used as a foreign key between a table on student enrollment and student grades?[^140]
    (a) grades
    (b) tuition
    (c) student\_name
    (d) student\_hometown
    
[^140]: c. student\_name

---

(@) For the student records (for two tables: enrollment and grades), which is the most likely combination?[^141]
    (a) name as primary key to both 
    (b) name as foreign to both
    (c) name as primary in enrollment and foreign in grades
    (d) name as foreign in enrollment and primary in grades
    
[^141]: c. name as primary in enrollment and foreign in grades (the primary key must uniquely identify the records, and name is unlikely to do that in a grades database.)

---

(@) Which **SQL** statement is used to create a database table called 'Customers'?[^142]
    (a) `CREATE DATABASE TAB` Customers
    (b) `CREATE DATABASE` Customers
    (c) `CREATE DATABASE TABLE` Customers
    (d) `CREATE TABLE` Customers
    (e) `CREATE DB` Customers

[^142]: d. `CREATE TABLE` Customers

---

(@) Which **SQL** statement revises data in a database?[^143]
    (a) `SAVE AS` 
    (b) `MODIFY`
    (c) `SAVE`
    (d) `UPDATE`

[^143]: d. `UPDATE`

---

(@) Which **SQL** statement takes out data from a database?[^144]
    (a) `REMOVE`
    (b) `DELETE`
    (c) `COLLAPSE`

[^144]: b. `DELETE`

---

(@) The `NOT NULL` constraint enforces a column to not accept `NULL` values.[^145]
    (a) FALSE
    (b) TRUE

[^145]: b. TRUE

---

(@) Which **SQL** statement places new data in a database?[^146]
    (a) `ADD RECORD`
    (b) `INSERT INTO`
    (c) `ADD NEW`
    (d) `INSERT NEW` 
 
[^146]: b. `INSERT INTO`

---

(@) With **SQL**, how can you insert a new record into the "Persons" table?[^147]
    (a) `INSERT` `INTO` Persons VALUES ('Jimmy', 'Jackson')
    (b) `INSERT` ('Jimmy', 'Jacskon') `INTO` Persons
    (c) `INSERT` VALUES ('Jimmy', 'Jackson') `INTO` Persons

[^147]: a. `INSERT` `INTO` Persons VALUES ('Jimmy', 'Jackson')

---

(@) With **SQL**, how can you insert "Olsen" as the "LastName" in the "Persons" table?[^148]
    (a) `INSERT` `INTO` Persons (LastName) VALUES ('Olsen')
    (b) `INSERT` `INTO` Persons ('Olsen) `INTO` LastName
    (c) `INSERT` ('Olsen') `INTO` Persons (LastName)
 
[^148]: a. `INSERT` `INTO` Persons (LastName) VALUES ('Olsen')

---

(@) How can you change "Hansen" into "Nilsen" in the "LastName" column in the Persons table?[^149]
    (a) `MODIFY` Persons `SET` LastName='Nilsen' `WHERE` LastName='Hansen'
    (b) `UPDATE` Persons `SET` LastName='Hansen' `INTO` LastName='Nilsen'
    (c) `MODIFY` Persons `SET` LastName='Hansen' `INTO` LastName='Nilsen'
    (d) `UPDATE` Persons `SET` LastName='Nilsen' `WHERE` LastName='Hansen' 

[^149]: d. `UPDATE` Persons `SET` LastName='Nilsen' `WHERE` LastName='Hansen' 

---

(@) With **SQL**, how can you delete the records where the "FirstName" is "Peter" in the Persons Table?[^150]
    (a) `DELETE` `FROM` Persons `WHERE` FirstName='Peter'
    (b) `DELETE` FirstName='Peter' `FROM` Persons
    (c) `DELETE ROW` FirstName='Peter' `FROM` Persons

[^150]: a. `DELETE` `FROM` Persons `WHERE` FirstName='Peter'

---

(@) In the `flights` table, the following `INDEX`es exist: `Tailnum`, `Year`, and `Date`.  How many rows would be looked through if the `WHERE` filter was on `month` only?[^151]
    (a) more than 6.3 million
    (b) less than 6.3 million
    (c) more than 700,000
    (d) less than 700,000
    
[^151]: a. more than 6.3 million. Because there is no index on month (and we don't have a year to incorporate month into the Date index), we need to look through all 48 million rows.

---

(@) Which has a larger cardinality, `Tailnum` or `Year`?[^152]
    (a) `Tailnum`
    (b) `Year`
    (c) they have the same cardinality
    (d) neither has a cardinality

[^152]: a. `Tailnum`. The cardinality is the number of unique values, and there are many more unique planes than years.


---

(@) Which index takes up more storage space, the one on `Tailnum` or the one on `Year`?[^153]
    (a) `Tailnum`
    (b) `Year`
    (c) they take up the same space
    (d) you can't index on either variable

[^153]: a. `Tailnum`. Because the cardinality is higher, it will take up much more space in the index.

---

(@) Which index is more effective at reducing querying time, the one on `Tailnum` or the one on `Year`?[^154]
    (a) `Tailnum`
    (b) `Year`
    (c) the queries would be the same
    (d) you can't query on either variable
    
[^154]: a. `Tailnum`. Because the index is more complete, it will make the querying more efficient.

---

(@) What does the **R** function `ifelse(a, b, c)` do?[^155]
    (a) a = TRUE option, b = FALSE option, c = question
    (b) a = FALSE option, b = TRUE option, c = question
    (c) a = question, b = TRUE option, c = FALSE option
    (d) a = question, b = FALSE option, c = TRUE option

[^155]: c. a = question, b = TRUE option, c = FALSE option

---

(@) What does the **R** function `case_when()` do?[^156]
    (a) renames a variable
    (b) changes the data type of a variable
    (c) partitions a numeric variable
    (d) creates a new variable by re-coding an original variable

[^156]: d. creates a new variable by re-coding an original variable

---

(@) What does the **R** function `cut()` do?[^157]
    (a) renames a variable
    (b) changes the data type of a variable
    (c) partitions a numeric variable
    (d) creates a new variable by re-coding an original variable

[^157]: c. partitions a numeric variable

---





