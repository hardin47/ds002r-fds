[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Schedule",
    "section": "",
    "text": "Here’s your roadmap for the semester! Each day, follow the general process outlined below:\n\nEnjoy the notes / text \nAttend class, review the  worksheet and solutions if you have any questions after working on it during class.  Slides from class are linked below.\nComplete the Lab assignment ( html linked below),  submit the assignment to GitHub before 10am the following class period.\nDiscuss the reflection questions  and ethics considerations  (see the  class notes) with your classmates and professor.\nThe textbooks are  Modern Data Science with R (MDSR), 3rd edition by Baumer, Kaplan, and Horton and  R for Data Science (R4DS), 2nd edition by Wickham, Çetinkaya-Rundel, and Grolemund.\nHomework assignments are found at the GitHub course organization. Due dates are provided on each assignment (roughly every other week). See the course GitHub page for more information on how to find, complete, and submit assignments.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndate\ntopic\nclass materials\ndue dates\nresources\n\n\n\n\nWeek 1  8.26.24\nintro +  R + RStudio +  GitHub\n Introduction    MDSR Prologue   Why Git? + monsters    Introduction   WS 1   WS 2\n\n\n\n\nWeek 2  9.2.24\nno class Mon  ggplot\n  R4DS Visualize   graphics   ggplot    Data Viz   WS 3\n HW 1 - due 9.3\n\n\n\nWeek 3  9.9.24\nggplot\n  R4DS Visualize   graphics   ggplot    Data Viz   WS 4\n HW 2 - due 9.10  Quiz 9.11\n\n\n\nWeek 4  9.16.24\ntidyverse\n  R4DS Transform   wrangling    Wrangling   WS 5\n Project 1 - due 9.18\n\n\n\nWeek 5  9.23.24\ntidy strings\n\n HW 3 - due 9.24  Quiz 9.25\n\n\n\nWeek 6  9.30.24\nmap + functions\n\n Project 2 - due 10.2\n\n\n\nWeek 7  10.7.24\niteration + simulations\n\n HW 4 - due 10.8  Quiz 10.9\n\n\n\nWeek 8  10.14.24\nno class Mon  code review +  reprex\n\n\n\n\n\nWeek 9  10.21.24\npermutation tests\n\n HW 5 - due 10.22  Quiz 10.23\n\n\n\nWeek 10  10.28.24\nweb scraping\n\n Project 3 - due 10.30\n\n\n\nWeek 11  11.4.24\nSQL\n\n HW 6 - due 11.5  Quiz 11.6\n\n\n\nWeek 12  11.11.24\nregular expressions\n\n Project 4 - due 11.13\n\n\n\nWeek 13  11.18.24\ntext analysis\n\n HW 7 - due 11.19  Quiz 11.20\n\n\n\nWeek 14  11.25.24\nShiny no class Wed\n\n\n\n\n\nWeek 15  12.2.24\n\n\n Project 5 - due 12.4  + presentations\n\n\n\n\n\n\n\n\n\n\n:::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "clicker_study.html",
    "href": "clicker_study.html",
    "title": "Clicker Questions",
    "section": "",
    "text": "to go along with \nModern Data Science with R, 3rd edition by Baumer, Kaplan, and Horton\nR for Data Science, 2nd edition by Wickham, Çetinkaya-Rundel, and Grolemund\n\n\n\n\nR / R Studio / Quarto1\n\nall good\nstarted, progress is slow and steady\nstarted, very stuck\nhaven’t started yet\nwhat do you mean by “R”?\n\n\n\n\nGit / GitHub2\n\nall good\nstarted, progress is slow and steady\nstarted, very stuck\nhaven’t started yet\nwhat do you mean by “Git”?\n\n\n\n\nWhich of the following includes talking to the remove version of GitHub?3\n\nchanging your name (updating the YAML)\ncommitting the file(s)\npushing the file(s)\nsome of the above\nall of the above\n\n\n\n\nWhat is the error?4\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\nshup2 &lt;-- \"Hello to you!\"\n\n\n\nWhat is the error?5\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\n3shup &lt;-  \"Hello to you!\"\n\n\n\nWhat is the error?6\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\nshup4 &lt;-  \"Hello to you!\n\n\n\nWhat is the error?7\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\nshup5 &lt;-  date()\n\n\n\nWhat is the error?8\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\nshup6 &lt;-  sqrt 10\n\n\n\nDo you keep a calendar / schedule / planner?9\n\nYes\nNo\n\n\n\n\nDo you keep a calendar / schedule / planner? If you answered “Yes” …10\n\nYes, on Google Calendar\nYes, on Calendar for macOS\nYes, on Outlook for Windows\nYes, in some other app\nYes, by hand\n\n\n\n\nWhere should I put things I’ve created for the HW (e.g., data, .ics file, etc.)11\n\nUpload into remote GitHub directory\nIn the local folder which also has the R project\nIn my Downloads\nSomewhere on my Desktop\nIn my Home directory\n\n\n\n\nThe goal of making a figure is…12\n\nTo draw attention to your work.\nTo facilitate comparisons.\nTo provide as much information as possible.\n\n\n\n\nA good reason to make a particular choice of a graph is:13\n\nBecause the journal / field has particular expectations for how the data are presented.\nBecause some variables naturally fit better on some graphs (e.g., numbers on scatter plots).\nBecause that graphic displays the message you want as optimally as possible.\n\n\n\n\nWhy are the points orange?14\n\nR translates “navy” into orange.\ncolor must be specified in geom_point()\ncolor must be specified outside the aes() function\nthe default plot color is orange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78, \n       aes(x = date, y = births, color = \"navy\")) + \n  geom_point() +          \n  ggtitle(\"US Births in 1978\")\n\n\n\n\n\nWhy are the dots blue and the lines colored?15\n\ndot color is given as “navy”, line color is given as wday.\nboth colors are specified in the ggplot() function.\ndot coloring takes precedence over line coloring.\nline coloring takes precedence over dot coloring.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting vs. Mapping. If I want information to be passed to all data points (not variable):16\n\nmap the information inside the aes() function.\nset the information outside the aes() function\n\n\n\n\nThe Snow figure was most successful at:17\n\nmaking the data stand out\nfacilitating comparison\nputting the work in context\nsimplifying the story\n\n\n\n\nThe Challenger figure(s) was(were) least successful at:18\n\nmaking the data stand out\nfacilitating comparison\nputting the work in context\nsimplifying the story\n\n\n\n\nThe biggest difference between Snow and the Challenger was:19\n\nThe amount of information portrayed.\nOne was better at displaying cause.\nOne showed the relevant comparison better.\nOne was more artistic.\n\n\n\n\nCaffeine and Calories. What was the biggest concern over the average value axes?20\n\nIt isn’t at the origin.\nThey should have used all the data possible to find averages.\nThere wasn’t a random sample.\nThere wasn’t a label explaining why the axes were where they were.\n\n\n\n\n\nWhat is a SQL server?.21\n\n\nA relational database management system.\nA software whose main purpose is to store and retrieve data.\nA highly secure server and does not allow any database file manipulation during execution.\nAll of the above.\n\n\n\nWhen was SQL created?22\n\n\n1960s\n1970s\n1980s\n1990s\n2000s\n\n\n\nWhat type of databases is SQL designed for?23\n\n\nhierarchical database management systems.\nnetwork database management systems.\nobject-oriented database management systems.\nrelational database management systems.\n\n\n\nWhich is bigger:24\n\n\ncomputer’s hard drive / storage\ncomputer’s memory / RAM\n\n\n\nWhere are each stored?25\n\n\nSQL tbl and R tibble both in storage\nSQL tbl and R tibble both in memory\nSQL tbl in storage and R tibble in memory\nSQL tbl in memory and R tibble in storage\n\n\n\nWhich SQL clause is used to extract data from a database?26\n\n\nOPEN\nEXTRACT\nSELECT\nGET\n\n\n\nWith SQL, how to you retrieve a column named “FirstName” from a table named “Persons”?27\n\n\nSELECT Persons.FirstName\nEXTRACT FIRSTNAME FROM Persons\nSELECT FirstName FROM Persons\nSELECT “FirstName” FROM “Persons”\n\n\n\nWith SQL, how do you select all the columns from a table named “Persons”?28\n\n\nSELECT Persons\nSELECT * FROM Persons\nSELECT [all] FROM Persons\nSELECT *.Persons\n\n\n\nWith SQL, how can you return the number of records in the “Persons” table?29\n\n\nSELECT COLUMNS(*) FROM Persons\nSELECT COUNT(*) FROM Persons\nSELECT NO(*) FROM Persons\nSELECT LEN(*) FROM Persons\n\n\n\nWith SQL, how do you select all the records from a table named “Persons” where the value of the column “FirstName” is “Peter”?30\n\n\nSELECT * FROM Persons WHERE FirstName &lt;&gt; ‘Peter’\nSELECT * FROM Persons WHERE FirstName = ‘Peter’\nSELECT * FROM Persons WHERE FirstName == ‘Peter’\nSELECT [all] FROM Persons WHERE FirstName LIKE ‘Peter’\nSELECT [all] FROM Persons WHERE FirstName = ‘Peter’\n\n\n\nWith SQL, how do you select all the records from a table named “Persons” where the “FirstName” is “Peter” and the “LastName” is “Jackson”?31\n\n\nSELECT FirstName = ‘Peter’, LastName = ‘Jackson’ FROM Persons\nSELECT * FROM Persons WHERE FirstName &lt;&gt; ‘Peter’ AND LastName &lt;&gt; ‘Jackson’\nSELECT * FROM Persons WHERE FirstName = ‘Peter’ AND LastName = ‘Jackson’\nSELECT * FROM Persons WHERE FirstName == ‘Peter’ AND LastName == ‘Jackson’\n\n\n\nWhich operator selects values within a range?32 (a) BEWTEEN (b) WITHIN (c) RANGE\n\n\n\nWith SQL, how do you select all the records from a table named “Persons” where the “LastName” is alphabetically between (and including) “Hansen” and “Pettersen”?33 (a) SELECT LastName &gt; ‘Hansen’ AND LastName &lt; ‘Pettersen’ FROM Persons (b) SELECT * FROM Persons WHERE LastName BETWEEN ‘Hansen’ AND ‘Pettersen’ (c) SELECT * FROM Persons WHERE LastName &gt; ‘Hansen’ AND LastName &lt; ‘Pettersen’\n\n\n\nWhich SQL statement returns only different values?34 (a) SELECT UNIQUE (b) SELECT DISTINCT (c) SELECT DIFFERENT\n\n\n\nWhich SQL keyword is used to sort the result-set?35 (a) ORDER BY (b) ORDER (c) SORT (d) SORT BY\n\n\n\nWith SQL, how can you return all the records from a table named “Persons” sorted descending by “FirstName”?36 (a) SELECT * FROM Persons ORDER FirstName DESC (b) SELECT * FROM Persons SORT ‘FirstName’ DESC (c) SELECT * FROM Persons ORDER BY FirstName DESC (d) SELECT * FROM Persons SORT BY ‘FirstName’ DESC\n\n\n\nThe OR operator displays a record if ANY conditions listed are true. The AND operator displays a record if ALL of the conditions listed are true.37 (a) TRUE (b) FALSE\n\n\n\nIn order to SELECT the records with foods that are either green or yellow fruit:38 (a) … WHERE type = ‘fruit’ AND color = ‘yellow’ OR color = ‘green’\n(b) … WHERE (type = ‘fruit’ AND color = ‘yellow’) OR color = ‘green’\n(c) … WHERE type = ‘fruit’ AND (color = ‘yellow’ OR color = ‘green’)\n(d) … WHERE type = ‘fruit’ AND color = ‘yellow’ AND color = ‘green’\n(e) … WHERE type = ‘fruit’ AND (color = ‘yellow’ AND color = ‘green’)\n\n\n\nWhat is the purpose of a JOIN?39\n(a) it filters the rows returned by the SELECT statement. (b) it specifies the columns to be retrieved. (c) it combines rows from two or more tables based on a related column. (d) it orders the results in ascending or descending order.\n\n\n\nWhat is the purpose of the UNION operator in SQL?40 (a) it combines the results of two or more SELECT statements. (b) it performs a pattern match on a string. (c) it retrieves the maximum value in a column. (d) it filters the rows returned by the SELECT statement.\n\n\n\nWhat is the purpose of the INNER JOIN in SQL?41 (a) it retrieves the maximum value in a column. (b) it combines rows from two or more tables based on a related column. (c) it filters the rows returned by the SELECT statement. (d) it performs a pattern match on a string.\n\n\n\nWhat is the purpose of the LEFT JOIN in SQL?42 (a) it combines rows from two or more tables based on a related column. (b) it retrieves the maximum value in a column. (c) it filters the rows returned by the SELECT statement. (d) it performs a pattern match on a string.\n\n\n\nRIGHT JOIN keeps all the rows in …?43\n(a) the first table. (b) the second table. (c) both tables. (d) neither table\n\n\n\nWho is removed in a RIGHT JOIN?44 (a) Mick (b) John (c) Paul (d) Keith\n\n\n\n\n\n\n\n\n\n\n\n\nWhich variable(s) are removed in a RIGHT JOIN?45 (a) name (b) band (c) plays (d) none of them\n\n\n\n\n\n\n\n\n\n\n\n\nIn SQL, what happens to Mick’s “plays” variables in a FULL JOIN?46 (a) Mick is removed (b) guitar (c) bass (d) NA (e) NULL\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrep(\"q[^u]\", very.large.word.list) would not match which of the following?47 (a) Iraqi (b) Iraqian (c) Iraq (d) zaqqun (tree that “springs out of the bottom of Hell”, in the Quran) (e) Qantas (the Australian airline)\n\n\n\nWhich of the following regex would match to both “grey” and “gray”?48 (a) “gr[ae]y” (b) “gr(a|e)y” (c) “gray | grey” (d) “gr[a|e]y” (e) some / all of the above – which ones?\n\n\n\nWhat will the result be for the following code?49\n(a) 10 (b) 1 (c) 0 (d) NA\n\n\nstr_extract(\"My dog is 10 years old\", \"\\\\d\")\n\n\n\nWhat will the result be for the following code?50\n(a) 10 (b) 1 (c) 0 (d) NA\n\n\nstr_extract(\"My dog is 10 years old\", \"\\\\d+\")\n\n\n\nWhat will the result be for the following code?51 (a) . (b) Episode 2: The pie whisperer. (4 August 2015) (c) Episode (d) E\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".\")\n\n\n\nWhat will the result be for the following code?52 (a) . (b) Episode 2: The pie whisperer. (4 August 2015) (c) Episode (d) E\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".+\")\n\n\n\nWhat will the result be for the following code?53 (a) . (b) Episode 2: The pie whisperer. (4 August 2015) (c) Episode (d) E\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \"\\\\.\")\n\n\n\nHow can I pull out just the numerical information in $47?54 (a) “(?&lt;=\\\\()\\\\d\"\n    (b) \"(?&lt;=\\\\\\))\\d+” (c) “\\d(?=\\\\()\"\n    (d) \"\\\\d+(?=\\\\\\))”\n\n\n\nYou want to know all the types of pies in the text strings. They are written as, for example “apple pie”.55 (a) “\\w+(?!pie)” (b) “\\w+(?! pie)” (c) “\\w+(?=pie)” (d) “\\w+(?= pie)”\n\n\n\nstr_extract(c(\"apple pie\", \"chocolate pie\", \"peach pie\"), \"\\\\w+(?= pie)\")\n\n[1] \"apple\"     \"chocolate\" \"peach\"    \n\n\n\nstr_extract(c(\"apple pie\", \"chocolate pie\", \"peach pie\"), \"\\\\w+(?=pie)\")\n\n[1] NA NA NA\n\n\n\n\nWe say that lookarounds are “zero-lenghth assertions”. What does that mean?56 (a) we return the string in the lookaround (b) we replace the string in the lookaround (c) we return the string at the lookaround (d) we replace the string at the lookaround\n\n\n\n\nWith SQL, how do you select all the records from a table named “Persons” where the value of the column “FirstName” starts with an “a”?57 (a) SELECT * FROM Persons WHERE FirstName = ‘a.’ (b) SELECT  FROM Persons WHERE FirstName = ’a’ (c) SELECT  FROM Persons WHERE FirstName REGEXP ’a.’ (d) SELECT  FROM Persons WHERE FirstName REGEXP ’a’ (e) SELECT  FROM Persons WHERE FirstName REGEXP’(?i)a.*’\n\n\n\nWhat is the main way to absolutely recognize a record within a database?58 (a) Foreign key (b) Primary key (c) Unique key (d) Natural key (e) Alternate key\n\n\n\nWhat does a foreign key do?59 (a) Directly identifies another table (b) Directly identifies another column (c) Gives access to another entire database (d) Translates the database into another language\n\n\n\nWhich of these would likely be used as a foreign key between a table on student enrollment and student grades?60 (a) grades (b) tuition (c) student_name (d) student_hometown\n\n\n\nFor the student records (for two tables: enrollment and grades), which is the most likely combination?61 (a) name as primary key to both (b) name as foreign to both (c) name as primary in enrollment and foreign in grades (d) name as foreign in enrollment and primary in grades\n\n\n\nWhich SQL statement is used to create a database table called ‘Customers’?62 (a) CREATE DATABASE TAB Customers (b) CREATE DATABASE Customers (c) CREATE DATABASE TABLE Customers (d) CREATE TABLE Customers (e) CREATE DB Customers\n\n\n\nWhich SQL statement revises data in a database?63 (a) SAVE AS (b) MODIFY (c) SAVE (d) UPDATE\n\n\n\nWhich SQL statement takes out data from a database?64 (a) REMOVE (b) DELETE (c) COLLAPSE\n\n\n\nThe NOT NULL constraint enforces a column to not accept NULL values.65 (a) FALSE (b) TRUE\n\n\n\nWhich SQL statement places new data in a database?66 (a) ADD RECORD (b) INSERT INTO (c) ADD NEW (d) INSERT NEW\n\n\n\nWith SQL, how can you insert a new record into the “Persons” table?67 (a) INSERT INTO Persons VALUES (‘Jimmy’, ‘Jackson’) (b) INSERT (‘Jimmy’, ‘Jacskon’) INTO Persons (c) INSERT VALUES (‘Jimmy’, ‘Jackson’) INTO Persons\n\n\n\nWith SQL, how can you insert “Olsen” as the “LastName” in the “Persons” table?68 (a) INSERT INTO Persons (LastName) VALUES (‘Olsen’) (b) INSERT INTO Persons (‘Olsen) INTO LastName (c) INSERT (’Olsen’) INTO Persons (LastName)\n\n\n\nHow can you change “Hansen” into “Nilsen” in the “LastName” column in the Persons table?69 (a) MODIFY Persons SET LastName=‘Nilsen’ WHERE LastName=‘Hansen’ (b) UPDATE Persons SET LastName=‘Hansen’ INTO LastName=‘Nilsen’ (c) MODIFY Persons SET LastName=‘Hansen’ INTO LastName=‘Nilsen’ (d) UPDATE Persons SET LastName=‘Nilsen’ WHERE LastName=‘Hansen’\n\n\n\nWith SQL, how can you delete the records where the “FirstName” is “Peter” in the Persons Table?70 (a) DELETE FROM Persons WHERE FirstName=‘Peter’ (b) DELETE FirstName=‘Peter’ FROM Persons (c) DELETE ROW FirstName=‘Peter’ FROM Persons\n\n\n\nIn the flights table, the following INDEXes exist: Tailnum, Year, and Date. How many rows would be looked through if the WHERE filter was on month only?71 (a) more than 6.3 million (b) less than 6.3 million (c) more than 700,000 (d) less than 700,000\n\n\n\nWhich has a larger cardinality, Tailnum or Year?72 (a) Tailnum (b) Year (c) they have the same cardinality (d) neither has a cardinality\n\n\n\nWhich index takes up more storage space, the one on Tailnum or the one on Year?73 (a) Tailnum (b) Year (c) they take up the same space (d) you can’t index on either variable\n\n\n\nWhich index is more effective at reducing querying time, the one on Tailnum or the one on Year?74 (a) Tailnum (b) Year (c) the queries would be the same (d) you can’t query on either variable\n\n\n\nWhat does the R function ifelse(a, b, c) do?75 (a) a = TRUE option, b = FALSE option, c = question (b) a = FALSE option, b = TRUE option, c = question (c) a = question, b = TRUE option, c = FALSE option (d) a = question, b = FALSE option, c = TRUE option\n\n\n\nWhat does the R function case_when() do?76 (a) renames a variable (b) changes the data type of a variable (c) partitions a numeric variable (d) creates a new variable by re-coding an original variable\n\n\n\nWhat does the R function cut() do?77 (a) renames a variable (b) changes the data type of a variable (c) partitions a numeric variable (d) creates a new variable by re-coding an original variable\n\n\n\n:::"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "syllabus",
    "section": "",
    "text": "Jo Hardin 2351 Estella jo.hardin@pomona.edu\nOffice Hours: Mon 3:30-4:30pm, Tues 10-11am & 2:30-3:30pm, Thurs 10am-noon\nMentor Sessions:\nMon 8-10pm, Tues 8-10pm\nEstella 2099\nMentors: Federica Domecq Lacroze and Z Skigen\n\n\n\n\n\nArtwork by @allison_horst.\n\n\n\n\n\n\n\nFoundations of Data Science in R is a first course in data science. Data play an increasingly important role in many fields. Being able to understand data and the ethical implications in data driven decisions is paramount to being an informed member of society. As an introduction to data science with R, this course will introduce students to basic data science concepts. Prerequisite: CSCI004 or CSCI005 or CSCI051 or equivalent experience in programming.\n\n\n\n\n\n\nAnonymous Feedback\n\n\n\nAs someone who is, myself, constantly learning and growing in many ways, I welcome your feedback about the course, the classroom dynamics, or anything else you’d like me to know. There is a link on Canvas to an anonymous feedback form. Please feel free to provide me with feedback at any time!\n\n\n\n\n\nBy the end of the term, students will be able to:\n\nscrape, process, and clean data from the web\nwrangle data in a variety of formats\ncontextualize variation in data\nconstruct point and interval estimates using resampling techniques\ndesign accurate, clear and appropriate data graphics\nquery large relational databases (using SQL)\nwork fluently with regular expression\ncommunicate data-driven decisions\n\n\n\n\nIn an ideal world, science would be objective. However, much of science is subjective and is historically built on a small subset of privileged voices. In this class, we will make an effort to recognize how science (and data science!) has played a role in both understanding diversity as well as in promoting systems of power and privilege. I acknowledge that there may be both overt and covert biases in the material due to the lens with which it was written, even though the material is primarily of a scientific nature. Integrating a diverse set of experiences is important for a more comprehensive understanding of science. I would like to discuss issues of diversity in statistics as part of the course from time to time.\nPlease contact me if you have any suggestions to improve the quality of the course materials.\nFurthermore, I would like to create a learning environment for my students that supports a diversity of thoughts, perspectives and experiences, and honors your identities (including race, gender, class, sexuality, religion, ability, etc.) To help accomplish this:\n\nIf you have a name and/or set of pronouns that differ from those that appear in your official records, please let me know!\nIf you feel like your performance in the class is being impacted by your experiences outside of class, please don’t hesitate to come and talk with me. You can also relay information to me via your mentors. I want to be a resource for you.\n\nI (like many people) am still in the process of learning about diverse perspectives and identities. If something was said in class (by anyone) that made you feel uncomfortable, please talk to me about it. As a participant in course discussions, you should also strive to honor the diversity of your classmates.\n\n\n\n\n\n Modern Data Science with R, 3rd edition by Baumer, Kaplan, and Horton.\nR for Data Science, 2nd edition by Wickham, Çetinkaya-Rundel, and Grolemund.\n\n\n\n\n\n\nDates\n\n\n\n\nCheck-in quizzes on 9.11, 9.25, 10.9, 10.23, 11.6, and 11.20 (in class)\n9.18.24 Project 1 due\n10.2.24 Project 2 due\n10.30.24 Project 3 due\n11.13.24 Project 4 due\n12.4.24 Project 5 due\n12.2.24 (4:15pm) Data Science Panel with industry data scientists\n12.6.24 (Friday) or 12.9.24 (Monday) Project Presentations (9am-noon)\n12.9.24 Final project(s) write-up due (on GitHub by midnight)\n\n\n\n\n\n\n\n\n\n\n\nBest and most comprehensive Git help: http://happygitwithr.com/\nVersion control with Git\nMore on Git\nOnline Git book with lots of info\n\n\n\n\n\n\n\n\nA fantastic ggplot2 tutorial\nGreat tutorials through the Coding Club\nGoogle for R\nIncredibly helpful cheatsheets from RStudio.\n\ndata wrangling\nggplot2\nShiny\nQuarto\nRStudio IDE\n\n\n\n\n\n\n\n\nW3 schools Introduction to SQL\nW3 schools SQL Exercises, Practice, Solution\nR packages for working with databases\nIntroduction to dbplyr\n\n\n\n\n\n\n\nstringr vignette\nstringr package\nJenny Bryan et al.’s STAT 545 notes\nregexpal\n\nRegExr\nRegexOne\n\n\n\n\nHomework assignments will be graded out of 5 points, which are based on a combination of accuracy and effort. Below are rough guidelines for grading.\n[5] All problems completed with detailed solutions provided and 75% or more of the problems are fully correct. Additionally, there are no extraneous messages, warnings, or printed lists of numbers.\n[4] All problems completed with detailed solutions and 50-75% correct; OR close to all problems completed and 75%-100% correct. Or all problems are completed and there are extraneous messages, warnings, or printed lists of numbers.\n[3] Close to all problems completed with less than 75% correct.\n[2] More than half but fewer than all problems completed and &gt; 75% correct.\n[1] More than half but fewer than all problems completed and &lt; 75% correct; OR less than half of problems completed.\n[0] No work submitted, OR half or less than half of the problems submitted and without any detail/work shown to explain the solutions. You will get a zero if your file is not compiled and submitted on GitHub.\n\n\n\n\n\nThere will be 5 mini-projects (due roughly every other week). You will also compile the projects, reflect on the process, and present your work to your classrmates. Project information is available here: DS 002R Projects\n\n\n\n\nGitHub will be used as a way to practice reproducible and collaborative science. There may be a slight learning curve, but knowing Git will be an extremely useful skill as you venture beyond this class.\nR will be used for all homework assignments. R is freely available at http://www.r-project.org/ and is already installed on college computers. Additionally, you need to install R Studio in order to use Quarto, https://posit.co/downloads/. If you are not already familiar with R, please work through some of the materials provided ASAP.\nYou are welcome to use Pomona’s R Studio server at https://rstudio.campus.pomona.edu/ (or https://rstudio.pomona.edu if you are off campus). If you use the server, you can connect directly to your Git account without installing Git locally on your own computer. [If you are not a Pomona student, you will need to get an account from Pomona’s ITS. Go to ITS, tell them that you are taking a Pomona course, and ask for an account for using RStudio.]\n\n\n\n\n\nThis class will be interactive, and your engagement is expected (every day in class). Although notes will be posted, your engagement is an integral part of the in-class learning process.\nIn class: after answering one question, wait until 5 other people have spoken before answering another question. [Feel free to ask as many questions as often as you like!]\n\n\n\n\nYou are on your honor to present only your work as part of your course assessments. Below, I’ve provided Pomona’s academic honesty policy. But before the policy, I’ve given some thoughts on cheating which I have taken from Nick Ball’s CHEM 147 Collective (thank you, Prof Ball!). Prof Ball gives us all something to think about when we are learning in a classroom as well as on our journey to become scientists and professionals:\nThere are many known reasons why we may feel the need to “cheat” on problem sets or exams:\n\n\nAn academic environment that values grades above learning.\nFinancial aid is critical for remaining in school that places undue pressure on maintaining a high GPA.\nNavigating school, work, and/or family obligations that have diverted focus from class.\nChallenges balancing coursework and mental health.\nBalancing academic, family, peer, or personal issues.\n\n\nBeing accused of cheating – whether it has occurred or not – can be devastating for students. The college requires me to respond to potential academic dishonesty with a process that is very long and damaging. As your instructor, I care about you and want to offer alternatives to prevent us from having to go through this process. If you find yourself in a situation where “cheating” seems like the only option:\nPlease come talk to me. We will figure this out together.\nPomona College is an academic community, all of whose members are expected to abide by ethical standards both in their conduct and in their exercise of responsibilities toward other members of the community. The college expects students to understand and adhere to basic standards of honesty and academic integrity. These standards include, but are not limited to, the following:\n\n\nIn projects and assignments prepared independently, students never represent the ideas or the language of others as their own.\nStudents do not destroy or alter either the work of other students or the educational resources and materials of the College.\nStudents neither give nor receive assistance in examinations.\nStudents do not take unfair advantage of fellow students by representing work completed for one course as original work for another or by deliberately disregarding course rules and regulations.\nIn laboratory or research projects involving the collection of data, students accurately report data observed and do not alter these data for any reason.\n\n\n\n\n\nPlease email and / or set up a time to talk if you have any questions about or difficulty with the material, the computing, or the course. Talk to me as soon as possible if you find yourself struggling. The material will build on itself, so it will be much easier to catch up if the concepts get clarified earlier rather than later. This semester is going to be fun. Let’s do it.\n\n\n\n\n\n\nGrading\n\n\n\n\n30% Homework\n30% Quizzes\n30% Projects & Final Presentation\n10% Class engagement\n\n\n\n\n:::"
  },
  {
    "objectID": "syllabus.html#math-150-spring-2023",
    "href": "syllabus.html#math-150-spring-2023",
    "title": "syllabus",
    "section": "",
    "text": "Class: Tuesdays & Thursdays, 1:15-2:30pm\nJo Hardin\n2351 Estella\njo.hardin@pomona.edu\n\n\nMondays 1:30-3pm\nTuesdays 2:30-3:30pm\nWednesday 9-11am\nThursday 3-4pm\nor by appointment\n\n\nMonday 6-8pm\nWednesday 8-10pm\nEstella 2131\n\n\n\n\n\nArtwork by @allison_horst."
  },
  {
    "objectID": "syllabus.html#the-course",
    "href": "syllabus.html#the-course",
    "title": "syllabus",
    "section": "",
    "text": "Foundations of Data Science in R is a first course in data science. Data play an increasingly important role in many fields. Being able to understand data and the ethical implications in data driven decisions is paramount to being an informed member of society. As an introduction to data science with R, this course will introduce students to basic data science concepts. Prerequisite: CSCI004 or CSCI005 or CSCI051 or equivalent experience in programming.\n\n\n\n\n\n\nAnonymous Feedback\n\n\n\nAs someone who is, myself, constantly learning and growing in many ways, I welcome your feedback about the course, the classroom dynamics, or anything else you’d like me to know. There is a link on Canvas to an anonymous feedback form. Please feel free to provide me with feedback at any time!"
  },
  {
    "objectID": "syllabus.html#student-learning-outcomes",
    "href": "syllabus.html#student-learning-outcomes",
    "title": "syllabus",
    "section": "",
    "text": "By the end of the semester, students will be able to do the following:\n\nevaluate quantitative information with regards to clinical and biological data. We’ll be sure to keep in mind:\n\nCareful presentation of data\nConsideration of variability\nMeaningful comparisons\n\ncritically evaluate the medical literature with respect to design, analysis, and interpretation of results.\nunderstand the role of inherent variability and keep it in perspective when inferring results to a population.\ncritically evaluate medical results given in the mainstream media.\nread published studies with skepticism. Some people (in all fields!) wrongly believe that all studies published in a peer review publication must be 100% accurate and/or well designed studies. In this course, you will learn the tools to recognize, interpret, and critique statistical results in medical literature."
  },
  {
    "objectID": "syllabus.html#inclusion-goals",
    "href": "syllabus.html#inclusion-goals",
    "title": "syllabus",
    "section": "",
    "text": "In an ideal world, science would be objective. However, much of science is subjective and is historically built on a small subset of privileged voices. In this class, we will make an effort to recognize how science (and data science!) has played a role in both understanding diversity as well as in promoting systems of power and privilege. I acknowledge that there may be both overt and covert biases in the material due to the lens with which it was written, even though the material is primarily of a scientific nature. Integrating a diverse set of experiences is important for a more comprehensive understanding of science. I would like to discuss issues of diversity in statistics as part of the course from time to time.\nPlease contact me if you have any suggestions to improve the quality of the course materials.\nFurthermore, I would like to create a learning environment for my students that supports a diversity of thoughts, perspectives and experiences, and honors your identities (including race, gender, class, sexuality, religion, ability, etc.) To help accomplish this:\n\nIf you have a name and/or set of pronouns that differ from those that appear in your official records, please let me know!\nIf you feel like your performance in the class is being impacted by your experiences outside of class, please don’t hesitate to come and talk with me. You can also relay information to me via your mentors. I want to be a resource for you.\n\nI (like many people) am still in the process of learning about diverse perspectives and identities. If something was said in class (by anyone) that made you feel uncomfortable, please talk to me about it. As a participant in course discussions, you should also strive to honor the diversity of your classmates."
  },
  {
    "objectID": "syllabus.html#technical-details",
    "href": "syllabus.html#technical-details",
    "title": "syllabus",
    "section": "",
    "text": "Modern Data Science with R, 3rd edition by Baumer, Kaplan, and Horton.\nR for Data Science, 2nd edition by Wickham, Çetinkaya-Rundel, and Grolemund.\n\n\n\n\n\n\nDates\n\n\n\n\nCheck-in quizzes on 9.11, 9.25, 10.9, 10.23, 11.6, and 11.20 (in class)\n9.18.24 Project 1 due\n10.2.24 Project 2 due\n10.30.24 Project 3 due\n11.13.24 Project 4 due\n12.4.24 Project 5 due\n12.2.24 (4:15pm) Data Science Panel with industry data scientists\n12.6.24 (Friday) or 12.9.24 (Monday) Project Presentations (9am-noon)\n12.9.24 Final project(s) write-up due (on GitHub by midnight)"
  },
  {
    "objectID": "syllabus.html#important-features",
    "href": "syllabus.html#important-features",
    "title": "syllabus",
    "section": "",
    "text": "The prerequisite for this class is some computer science.\n\n\n\nLabs will take place on most days with the lab write-up due just before the following class period. See instructions for using GitHub on the course website for how to turn in assignments.\n\n\n\nThe class expectations are that you show up for class and labs and turn in a final project. A successful final project is required to pass the class. Additionally, you should not miss more than 1 or 2 classes nor should you miss turning in more than 1 or 2 labs.\n\n:::"
  },
  {
    "objectID": "syllabus.html#footnotes",
    "href": "syllabus.html#footnotes",
    "title": "syllabus",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nadapted from Monica Linden, Brown University↩︎"
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "Class notes can be found at http://st47s.com/DS002R/Notes/.\n\n\n\n\n\n\n\n:::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "clicker.html",
    "href": "clicker.html",
    "title": "Clicker Questions",
    "section": "",
    "text": "to go along with \nModern Data Science with R, 3rd edition by Baumer, Kaplan, and Horton\nR for Data Science, 2nd edition by Wickham, Çetinkaya-Rundel, and Grolemund\n\n\n\n\nR / R Studio / Quarto1\n\nall good\nstarted, progress is slow and steady\nstarted, very stuck\nhaven’t started yet\nwhat do you mean by “R”?\n\n\n\n\nGit / GitHub2\n\nall good\nstarted, progress is slow and steady\nstarted, very stuck\nhaven’t started yet\nwhat do you mean by “Git”?\n\n\n\n\nWhich of the following includes talking to the remove version of GitHub?3\n\nchanging your name (updating the YAML)\ncommitting the file(s)\npushing the file(s)\nsome of the above\nall of the above\n\n\n\n\nWhat is the error?4\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\nshup2 &lt;-- \"Hello to you!\"\n\n\n\nWhat is the error?5\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\n3shup &lt;-  \"Hello to you!\"\n\n\n\nWhat is the error?6\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\nshup4 &lt;-  \"Hello to you!\n\n\n\nWhat is the error?7\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\nshup5 &lt;-  date()\n\n\n\nWhat is the error?8\n\npoor assignment operator\nunmatched quotes\nimproper syntax for function argument\ninvalid object name\nno mistake\n\n\n\nshup6 &lt;-  sqrt 10\n\n\n\nDo you keep a calendar / schedule / planner?9\n\nYes\nNo\n\n\n\n\nDo you keep a calendar / schedule / planner? If you answered “Yes” …10\n\nYes, on Google Calendar\nYes, on Calendar for macOS\nYes, on Outlook for Windows\nYes, in some other app\nYes, by hand\n\n\n\n\nWhere should I put things I’ve created for the HW (e.g., data, .ics file, etc.)11\n\nUpload into remote GitHub directory\nIn the local folder which also has the R project\nIn my Downloads\nSomewhere on my Desktop\nIn my Home directory\n\n\n\n\nThe goal of making a figure is…12\n\nTo draw attention to your work.\nTo facilitate comparisons.\nTo provide as much information as possible.\n\n\n\n\nA good reason to make a particular choice of a graph is:13\n\nBecause the journal / field has particular expectations for how the data are presented.\nBecause some variables naturally fit better on some graphs (e.g., numbers on scatter plots).\nBecause that graphic displays the message you want as optimally as possible.\n\n\n\n\nWhy are the points orange?14\n\nR translates “navy” into orange.\ncolor must be specified in geom_point()\ncolor must be specified outside the aes() function\nthe default plot color is orange\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78, \n       aes(x = date, y = births, color = \"navy\")) + \n  geom_point() +          \n  ggtitle(\"US Births in 1978\")\n\n\n\n\n\nWhy are the dots blue and the lines colored?15\n\ndot color is given as “navy”, line color is given as wday.\nboth colors are specified in the ggplot() function.\ndot coloring takes precedence over line coloring.\nline coloring takes precedence over dot coloring.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting vs. Mapping. If I want information to be passed to all data points (not variable):16\n\nmap the information inside the aes() function.\nset the information outside the aes() function\n\n\n\n\nThe Snow figure was most successful at:17\n\nmaking the data stand out\nfacilitating comparison\nputting the work in context\nsimplifying the story\n\n\n\n\nThe Challenger figure(s) was(were) least successful at:18\n\nmaking the data stand out\nfacilitating comparison\nputting the work in context\nsimplifying the story\n\n\n\n\nThe biggest difference between Snow and the Challenger was:19\n\nThe amount of information portrayed.\nOne was better at displaying cause.\nOne showed the relevant comparison better.\nOne was more artistic.\n\n\n\n\nCaffeine and Calories. What was the biggest concern over the average value axes?20\n\nIt isn’t at the origin.\nThey should have used all the data possible to find averages.\nThere wasn’t a random sample.\nThere wasn’t a label explaining why the axes were where they were.\n\n\n\n\n\nWhat is a SQL server?.21\n\n\nA relational database management system.\nA software whose main purpose is to store and retrieve data.\nA highly secure server and does not allow any database file manipulation during execution.\nAll of the above.\n\n\n\nWhen was SQL created?22\n\n\n1960s\n1970s\n1980s\n1990s\n2000s\n\n\n\nWhat type of databases is SQL designed for?23\n\n\nhierarchical database management systems.\nnetwork database management systems.\nobject-oriented database management systems.\nrelational database management systems.\n\n\n\nWhich is bigger:24\n\n\ncomputer’s hard drive / storage\ncomputer’s memory / RAM\n\n\n\nWhere are each stored?25\n\n\nSQL tbl and R tibble both in storage\nSQL tbl and R tibble both in memory\nSQL tbl in storage and R tibble in memory\nSQL tbl in memory and R tibble in storage\n\n\n\nWhich SQL clause is used to extract data from a database?26\n\n\nOPEN\nEXTRACT\nSELECT\nGET\n\n\n\nWith SQL, how to you retrieve a column named “FirstName” from a table named “Persons”?27\n\n\nSELECT Persons.FirstName\nEXTRACT FIRSTNAME FROM Persons\nSELECT FirstName FROM Persons\nSELECT “FirstName” FROM “Persons”\n\n\n\nWith SQL, how do you select all the columns from a table named “Persons”?28\n\n\nSELECT Persons\nSELECT * FROM Persons\nSELECT [all] FROM Persons\nSELECT *.Persons\n\n\n\nWith SQL, how can you return the number of records in the “Persons” table?29\n\n\nSELECT COLUMNS(*) FROM Persons\nSELECT COUNT(*) FROM Persons\nSELECT NO(*) FROM Persons\nSELECT LEN(*) FROM Persons\n\n\n\nWith SQL, how do you select all the records from a table named “Persons” where the value of the column “FirstName” is “Peter”?30\n\n\nSELECT * FROM Persons WHERE FirstName &lt;&gt; ‘Peter’\nSELECT * FROM Persons WHERE FirstName = ‘Peter’\nSELECT * FROM Persons WHERE FirstName == ‘Peter’\nSELECT [all] FROM Persons WHERE FirstName LIKE ‘Peter’\nSELECT [all] FROM Persons WHERE FirstName = ‘Peter’\n\n\n\nWith SQL, how do you select all the records from a table named “Persons” where the “FirstName” is “Peter” and the “LastName” is “Jackson”?31\n\n\nSELECT FirstName = ‘Peter’, LastName = ‘Jackson’ FROM Persons\nSELECT * FROM Persons WHERE FirstName &lt;&gt; ‘Peter’ AND LastName &lt;&gt; ‘Jackson’\nSELECT * FROM Persons WHERE FirstName = ‘Peter’ AND LastName = ‘Jackson’\nSELECT * FROM Persons WHERE FirstName == ‘Peter’ AND LastName == ‘Jackson’\n\n\n\nWhich operator selects values within a range?32 (a) BEWTEEN (b) WITHIN (c) RANGE\n\n\n\nWith SQL, how do you select all the records from a table named “Persons” where the “LastName” is alphabetically between (and including) “Hansen” and “Pettersen”?33 (a) SELECT LastName &gt; ‘Hansen’ AND LastName &lt; ‘Pettersen’ FROM Persons (b) SELECT * FROM Persons WHERE LastName BETWEEN ‘Hansen’ AND ‘Pettersen’ (c) SELECT * FROM Persons WHERE LastName &gt; ‘Hansen’ AND LastName &lt; ‘Pettersen’\n\n\n\nWhich SQL statement returns only different values?34 (a) SELECT UNIQUE (b) SELECT DISTINCT (c) SELECT DIFFERENT\n\n\n\nWhich SQL keyword is used to sort the result-set?35 (a) ORDER BY (b) ORDER (c) SORT (d) SORT BY\n\n\n\nWith SQL, how can you return all the records from a table named “Persons” sorted descending by “FirstName”?36 (a) SELECT * FROM Persons ORDER FirstName DESC (b) SELECT * FROM Persons SORT ‘FirstName’ DESC (c) SELECT * FROM Persons ORDER BY FirstName DESC (d) SELECT * FROM Persons SORT BY ‘FirstName’ DESC\n\n\n\nThe OR operator displays a record if ANY conditions listed are true. The AND operator displays a record if ALL of the conditions listed are true.37 (a) TRUE (b) FALSE\n\n\n\nIn order to SELECT the records with foods that are either green or yellow fruit:38 (a) … WHERE type = ‘fruit’ AND color = ‘yellow’ OR color = ‘green’\n(b) … WHERE (type = ‘fruit’ AND color = ‘yellow’) OR color = ‘green’\n(c) … WHERE type = ‘fruit’ AND (color = ‘yellow’ OR color = ‘green’)\n(d) … WHERE type = ‘fruit’ AND color = ‘yellow’ AND color = ‘green’\n(e) … WHERE type = ‘fruit’ AND (color = ‘yellow’ AND color = ‘green’)\n\n\n\nWhat is the purpose of a JOIN?39\n(a) it filters the rows returned by the SELECT statement. (b) it specifies the columns to be retrieved. (c) it combines rows from two or more tables based on a related column. (d) it orders the results in ascending or descending order.\n\n\n\nWhat is the purpose of the UNION operator in SQL?40 (a) it combines the results of two or more SELECT statements. (b) it performs a pattern match on a string. (c) it retrieves the maximum value in a column. (d) it filters the rows returned by the SELECT statement.\n\n\n\nWhat is the purpose of the INNER JOIN in SQL?41 (a) it retrieves the maximum value in a column. (b) it combines rows from two or more tables based on a related column. (c) it filters the rows returned by the SELECT statement. (d) it performs a pattern match on a string.\n\n\n\nWhat is the purpose of the LEFT JOIN in SQL?42 (a) it combines rows from two or more tables based on a related column. (b) it retrieves the maximum value in a column. (c) it filters the rows returned by the SELECT statement. (d) it performs a pattern match on a string.\n\n\n\nRIGHT JOIN keeps all the rows in …?43\n(a) the first table. (b) the second table. (c) both tables. (d) neither table\n\n\n\nWho is removed in a RIGHT JOIN?44 (a) Mick (b) John (c) Paul (d) Keith\n\n\n\n\n\n\n\n\n\n\n\n\nWhich variable(s) are removed in a RIGHT JOIN?45 (a) name (b) band (c) plays (d) none of them\n\n\n\n\n\n\n\n\n\n\n\n\nIn SQL, what happens to Mick’s “plays” variables in a FULL JOIN?46 (a) Mick is removed (b) guitar (c) bass (d) NA (e) NULL\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrep(\"q[^u]\", very.large.word.list) would not match which of the following?47 (a) Iraqi (b) Iraqian (c) Iraq (d) zaqqun (tree that “springs out of the bottom of Hell”, in the Quran) (e) Qantas (the Australian airline)\n\n\n\nWhich of the following regex would match to both “grey” and “gray”?48 (a) “gr[ae]y” (b) “gr(a|e)y” (c) “gray | grey” (d) “gr[a|e]y” (e) some / all of the above – which ones?\n\n\n\nWhat will the result be for the following code?49\n(a) 10 (b) 1 (c) 0 (d) NA\n\n\nstr_extract(\"My dog is 10 years old\", \"\\\\d\")\n\n\n\nWhat will the result be for the following code?50\n(a) 10 (b) 1 (c) 0 (d) NA\n\n\nstr_extract(\"My dog is 10 years old\", \"\\\\d+\")\n\n\n\nWhat will the result be for the following code?51 (a) . (b) Episode 2: The pie whisperer. (4 August 2015) (c) Episode (d) E\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".\")\n\n\n\nWhat will the result be for the following code?52 (a) . (b) Episode 2: The pie whisperer. (4 August 2015) (c) Episode (d) E\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".+\")\n\n\n\nWhat will the result be for the following code?53 (a) . (b) Episode 2: The pie whisperer. (4 August 2015) (c) Episode (d) E\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \"\\\\.\")\n\n\n\nHow can I pull out just the numerical information in $47?54 (a) “(?&lt;=\\\\()\\\\d\"\n    (b) \"(?&lt;=\\\\\\))\\d+” (c) “\\d(?=\\\\()\"\n    (d) \"\\\\d+(?=\\\\\\))”\n\n\n\nYou want to know all the types of pies in the text strings. They are written as, for example “apple pie”.55 (a) “\\w+(?!pie)” (b) “\\w+(?! pie)” (c) “\\w+(?=pie)” (d) “\\w+(?= pie)”\n\n\n\nstr_extract(c(\"apple pie\", \"chocolate pie\", \"peach pie\"), \"\\\\w+(?= pie)\")\n\n[1] \"apple\"     \"chocolate\" \"peach\"    \n\n\n\nstr_extract(c(\"apple pie\", \"chocolate pie\", \"peach pie\"), \"\\\\w+(?=pie)\")\n\n[1] NA NA NA\n\n\n\n\nWe say that lookarounds are “zero-lenghth assertions”. What does that mean?56 (a) we return the string in the lookaround (b) we replace the string in the lookaround (c) we return the string at the lookaround (d) we replace the string at the lookaround\n\n\n\n\nWith SQL, how do you select all the records from a table named “Persons” where the value of the column “FirstName” starts with an “a”?57 (a) SELECT * FROM Persons WHERE FirstName = ‘a.’ (b) SELECT  FROM Persons WHERE FirstName = ’a’ (c) SELECT  FROM Persons WHERE FirstName REGEXP ’a.’ (d) SELECT  FROM Persons WHERE FirstName REGEXP ’a’ (e) SELECT  FROM Persons WHERE FirstName REGEXP’(?i)a.*’\n\n\n\nWhat is the main way to absolutely recognize a record within a database?58 (a) Foreign key (b) Primary key (c) Unique key (d) Natural key (e) Alternate key\n\n\n\nWhat does a foreign key do?59 (a) Directly identifies another table (b) Directly identifies another column (c) Gives access to another entire database (d) Translates the database into another language\n\n\n\nWhich of these would likely be used as a foreign key between a table on student enrollment and student grades?60 (a) grades (b) tuition (c) student_name (d) student_hometown\n\n\n\nFor the student records (for two tables: enrollment and grades), which is the most likely combination?61 (a) name as primary key to both (b) name as foreign to both (c) name as primary in enrollment and foreign in grades (d) name as foreign in enrollment and primary in grades\n\n\n\nWhich SQL statement is used to create a database table called ‘Customers’?62 (a) CREATE DATABASE TAB Customers (b) CREATE DATABASE Customers (c) CREATE DATABASE TABLE Customers (d) CREATE TABLE Customers (e) CREATE DB Customers\n\n\n\nWhich SQL statement revises data in a database?63 (a) SAVE AS (b) MODIFY (c) SAVE (d) UPDATE\n\n\n\nWhich SQL statement takes out data from a database?64 (a) REMOVE (b) DELETE (c) COLLAPSE\n\n\n\nThe NOT NULL constraint enforces a column to not accept NULL values.65 (a) FALSE (b) TRUE\n\n\n\nWhich SQL statement places new data in a database?66 (a) ADD RECORD (b) INSERT INTO (c) ADD NEW (d) INSERT NEW\n\n\n\nWith SQL, how can you insert a new record into the “Persons” table?67 (a) INSERT INTO Persons VALUES (‘Jimmy’, ‘Jackson’) (b) INSERT (‘Jimmy’, ‘Jacskon’) INTO Persons (c) INSERT VALUES (‘Jimmy’, ‘Jackson’) INTO Persons\n\n\n\nWith SQL, how can you insert “Olsen” as the “LastName” in the “Persons” table?68 (a) INSERT INTO Persons (LastName) VALUES (‘Olsen’) (b) INSERT INTO Persons (‘Olsen) INTO LastName (c) INSERT (’Olsen’) INTO Persons (LastName)\n\n\n\nHow can you change “Hansen” into “Nilsen” in the “LastName” column in the Persons table?69 (a) MODIFY Persons SET LastName=‘Nilsen’ WHERE LastName=‘Hansen’ (b) UPDATE Persons SET LastName=‘Hansen’ INTO LastName=‘Nilsen’ (c) MODIFY Persons SET LastName=‘Hansen’ INTO LastName=‘Nilsen’ (d) UPDATE Persons SET LastName=‘Nilsen’ WHERE LastName=‘Hansen’\n\n\n\nWith SQL, how can you delete the records where the “FirstName” is “Peter” in the Persons Table?70 (a) DELETE FROM Persons WHERE FirstName=‘Peter’ (b) DELETE FirstName=‘Peter’ FROM Persons (c) DELETE ROW FirstName=‘Peter’ FROM Persons\n\n\n\nIn the flights table, the following INDEXes exist: Tailnum, Year, and Date. How many rows would be looked through if the WHERE filter was on month only?71 (a) more than 6.3 million (b) less than 6.3 million (c) more than 700,000 (d) less than 700,000\n\n\n\nWhich has a larger cardinality, Tailnum or Year?72 (a) Tailnum (b) Year (c) they have the same cardinality (d) neither has a cardinality\n\n\n\nWhich index takes up more storage space, the one on Tailnum or the one on Year?73 (a) Tailnum (b) Year (c) they take up the same space (d) you can’t index on either variable\n\n\n\nWhich index is more effective at reducing querying time, the one on Tailnum or the one on Year?74 (a) Tailnum (b) Year (c) the queries would be the same (d) you can’t query on either variable\n\n\n\nWhat does the R function ifelse(a, b, c) do?75 (a) a = TRUE option, b = FALSE option, c = question (b) a = FALSE option, b = TRUE option, c = question (c) a = question, b = TRUE option, c = FALSE option (d) a = question, b = FALSE option, c = TRUE option\n\n\n\nWhat does the R function case_when() do?76 (a) renames a variable (b) changes the data type of a variable (c) partitions a numeric variable (d) creates a new variable by re-coding an original variable\n\n\n\nWhat does the R function cut() do?77 (a) renames a variable (b) changes the data type of a variable (c) partitions a numeric variable (d) creates a new variable by re-coding an original variable\n\n\n\n:::"
  },
  {
    "objectID": "clicker_slides.html",
    "href": "clicker_slides.html",
    "title": "Clicker Questions",
    "section": "",
    "text": "Clicker Questions\nto go with Modern Data Science wi\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Project",
    "section": "",
    "text": "Artwork by @allison_horst.\n\n\n\n\nThroughout the semester, you will complete a series of mini-projects. The first project is the creation of a website connected to your GitHub account. Subsequent projects will be posted onto the website you create.\nEach individual project has instructions that are given separately, and will be graded according to the specific instructions. However, I encourage you to consider the overall project as a potential deliverable that you could include on a resume, show to future employers, discuss in graduate school interviews, etc. That is, approach the assignment as an opportunity for you to take something away from the class which is bigger than just a grade.\n\n:::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "project.html#building-a-database",
    "href": "project.html#building-a-database",
    "title": "Final Project",
    "section": "Building a Database",
    "text": "Building a Database\nbuild a database using the skills we’ve covered in the two week course.\n\nData\nYou will need to find your own (large!) data with at least 3 publicly available tables that have keys connecting them. Additionally, the data should have some strings that need parsing.\n\nuse the rvest package to scrape html data… it will be messy!\n\n\n\nDue Dates\n\nTuesday, January 16. Email prof with dataset idea for project. Include the following:\n\nHolistic description of the dataset (a few sentences).\nExplanation of keys that link the data tables.\nDescription of the observational units and columns in each data table.\nFull reference for data citation.\nLink to the resources.\n\nEnd of week 2. We will have some time in class to work on the project.\nTuesday, January 23. Completed project is due."
  },
  {
    "objectID": "project.html#assignment",
    "href": "project.html#assignment",
    "title": "Final Project",
    "section": "Assignment",
    "text": "Assignment\n\nInput data\nDescribe creation / construction / changing of the DB using DuckDB or MySQL.\nSome data wrangling in SQL and R (comparison). Should include some joining.\nSomething with regular expressions\nSome analysis (probably in R). Must include at least one visualization. For fun, you could make a Shiny App (not required)."
  },
  {
    "objectID": "project.html#something-new",
    "href": "project.html#something-new",
    "title": "Final Project",
    "section": "",
    "text": "Each individual should have some analysis that goes beyond a Cox PH model. For your analysis, you should give details of what is going on, how it is relevant, what are the technical conditions, what are the conclusions, etc. Your analysis should indicate a sense that you understand and that you can communicate the results to a possible client. Some possible topics to investigate include:\n\nInvestigation of the proportional hazards assumption (what does the R function cox.zph() do?)\nExponential or Weibull PH regression (parametric survival model)\nDeriving / detailing AIC & BIC for model selection on Cox PH\nPower analysis (a simulation?)\nDerivation of the sample size calculation for the log rank test (and application to the data)\nAn analysis of the Schoenfeld residuals (how are they calculated and why is that calculation relevant?)\nBootstrapping the survival model (what are the assumptions? what do you conclude?)\nAn analysis of possible time dependent covariates (what should you see? what do you see? do transformations help?)\nAn analysis / understanding / simulation of the multiple comparisons issues for assessing many different models (or other exploratory hypotheses).\nAndersen-Gill extension of the Cox PH model for time-varying covariates (available in rms R package). [Note: A-G isn’t meant to test PH, per se, but rather it allows for variables that are time varying.]\nAnother topic related to survival analysis that you find interesting."
  },
  {
    "objectID": "project.html#r-thoughts",
    "href": "project.html#r-thoughts",
    "title": "Final Project",
    "section": "",
    "text": "Use R Markdown to create a reproducible analysis. Anyone should be able to run your analysis using only the .Rmd file.\nTurn in both .Rmd and .pdf files for your final analysis.\nIf you are working in pairs, the project is extended in two ways. 1. You must both be able to work on the files. Ideally, you will share your work via GitHub or other software which tracks changes and coordinates work. 2. You must do two new items (one each).\nNote that the event of interest is “visit to primary care physician.”\nBe as creative as possible trying to think about how you might like to graphically display the data. If you come up with a cool idea for a graph but don’t know how to implement it, please let me know, and I will write the code for you!!\nPlease do not re-code the variables or change the variable names outside of R. You may, however, transform (mutate()) the variables within your R code (that is, for example, if you wanted to divide months by 12 to have years, or square a variable, etc.).\n\n\n\n\nYour primary assessment will be based on the above items (modeling, understanding of new topic, additional analysis, interpretation).\nAdditionally there will be two competitions. Winning either will add 5 points (out of 100) to your score.\n\nGraphic: the class will vote on who has the best graphic.\nModel: using a holdout sample (I only gave you part of the data), I will assess your final model. The group whose model best describes the holdout sample (as measured by the c-index) will win the model prize."
  },
  {
    "objectID": "project.html#footnotes",
    "href": "project.html#footnotes",
    "title": "Final Project",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nmeasured by the \\(c\\) index↩︎"
  },
  {
    "objectID": "clicker_study.html#footnotes",
    "href": "clicker_study.html#footnotes",
    "title": "Clicker Questions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nwherever you are, make sure you are communicating with me when you have questions!↩︎\nwherever you are, make sure you are communicating with me when you have questions!↩︎\n\npushing the file(s)\n\n↩︎\n\npoor assignment operator\n\n↩︎\n\ninvalid object name\n\n↩︎\n\nunmatched quotes\n\n↩︎\n\nno mistake\n\n↩︎\n\nimproper syntax for a function argument\n\n↩︎\n\nI mean, the right answer has to be Yes, right!??!\n\n↩︎\nno right answer here!↩︎\n\nIn the local folder which also has the R project. It could be on the Desktop or the Home directory, but it must be in the same place as the R project. Do not upload files to the remote GitHub directory or you will find yourself with two different copies of the files.\n\n↩︎\nYes! All the responses are reasons to make a figure.↩︎\n\nBecause that graphic displays the message you want as optimally as possible.\n\n↩︎\n\ncolor must be specified outside the aes() function\n\n↩︎\n\ndot color is specified as “navy”, line color is specified as wday.\n\n↩︎\n\nset the information outside the aes() function\n\n↩︎\nanswers may vary. I’d say c. putting the work in context. Others might say b. facilitating comparison or d. simplifying the story. However, I don’t think a correct answer is a. making the data stand out.↩︎\n\nmaking the data stand out\n\n↩︎\n\nOne showed the relevant comparison better.\n\n↩︎\n\nIt isn’t at the origin. in combination with d. There wasn’t a label explaining why the axes were where they were. The story associated with the average value axes is not clear to the reader.\n\n↩︎\n\nA relational database management system.\n\n↩︎\n\nThe first versions were created in the 1970s and called SEQUEL (Structured English QUEry Language). c. SQL came about in particular systems in the 1980s.\n\n↩︎\n\nrelational database management systems.\n\n↩︎\n\ncomputer’s hard drive / storage\n\n↩︎\n\nSQL tbl in storage and R tibble in memory\n\n↩︎\n\nSELECT\n\n↩︎\n\nSELECT FirstName FROM Persons\n\n↩︎\n\nSELECT * FROM Persons\n\n↩︎\n\nSELECT COUNT(*) FROM Persons\n\n↩︎\n\nSELECT * FROM Persons WHERE FirstName = ‘Peter’ (d. would also work.)\n\n↩︎\n\nSELECT * FROM Persons WHERE FirstName = ‘Peter’ AND LastName = ‘Jackson’\n\n↩︎\n\nBEWTEEN\n\n↩︎\n\nSELECT * FROM Persons WHERE LastName BETWEEN ‘Hansen’ AND ‘Pettersen’\n\n↩︎\n\nSELECT DISTINCT\n\n↩︎\n\nORDER BY\n\n↩︎\n\nSELECT * FROM Persons ORDER BY FirstName DESC\n\n↩︎\n\nTRUE\n\n↩︎\n\n… WHERE type = ‘fruit’ AND (color = ‘yellow’ OR color = ‘green’)\n\n↩︎\n\nit combines rows from two or more tables based on a related column.\n\n↩︎\n\nit combines the results of two or more SELECT statements.\n\n↩︎\n\nit combines rows from two or more tables based on a related column.\n\n↩︎\n\nit combines rows from two or more tables based on a related column.\n\n↩︎\n\nthe first table\n\n↩︎\n\nMick\n\n↩︎\n\nnone of them (all variables are kept in all joins)\n\n↩︎\n\nNULL (it would be NA in R)\n\n↩︎\nneither c. nor e. would match. Inside the bracket “[^u]” matches anything other than a “u”, but it has to match something.↩︎\n\nall of the above. Inside a character class | is a normal character and would therefore match “grey” and “gray” and “gr|y”. Which is not what we want, but would work to match both “grey” and “gray”.\n\n↩︎\n\n1 (because \\d matches only a single digit).\n\n↩︎\n\n10 (because \\d+ matches at least one digit).\n\n↩︎\n\nE (because . matches anything, and returns only a single character).\n\n↩︎\n\nEpisode 2: The pie whisperer. (4 August 2015) (because . matches anything, and with the + it returns multiple characters).\n\n↩︎\n\n. (because \\. matches the period, .).\n\n↩︎\n\n“(?&lt;=\\$)\\d+”\n\n↩︎\n\n“\\w+(?= pie)”\n\n↩︎\n\nwe return the string at the lookaround\n\n↩︎\n\nSELECT * FROM Persons WHERE FirstName REGEXP ’(?i)a.*’ (n.b., the LIKE function will give you a similar result, with % as a wildcard: SELECT*FROMPersonsWHERE` FirstName LIKE ‘a%’)\n\n↩︎\n\nPrimary key\n\n↩︎\n\nDirectly identifies another column\n\n↩︎\n\nstudent_name\n\n↩︎\n\nname as primary in enrollment and foreign in grades (the primary key must uniquely identify the records, and name is unlikely to do that in a grades database.)\n\n↩︎\n\nCREATE TABLE Customers\n\n↩︎\n\nUPDATE\n\n↩︎\n\nDELETE\n\n↩︎\n\nTRUE\n\n↩︎\n\nINSERT INTO\n\n↩︎\n\nINSERT INTO Persons VALUES (‘Jimmy’, ‘Jackson’)\n\n↩︎\n\nINSERT INTO Persons (LastName) VALUES (‘Olsen’)\n\n↩︎\n\nUPDATE Persons SET LastName=‘Nilsen’ WHERE LastName=‘Hansen’\n\n↩︎\n\nDELETE FROM Persons WHERE FirstName=‘Peter’\n\n↩︎\n\nmore than 6.3 million. Because there is no index on month (and we don’t have a year to incorporate month into the Date index), we need to look through all 48 million rows.\n\n↩︎\n\nTailnum. The cardinality is the number of unique values, and there are many more unique planes than years.\n\n↩︎\n\nTailnum. Because the cardinality is higher, it will take up much more space in the index.\n\n↩︎\n\nTailnum. Because the index is more complete, it will make the querying more efficient.\n\n↩︎\n\na = question, b = TRUE option, c = FALSE option\n\n↩︎\n\ncreates a new variable by re-coding an original variable\n\n↩︎\n\npartitions a numeric variable\n\n↩︎"
  },
  {
    "objectID": "clicker_slides.html#footnotes",
    "href": "clicker_slides.html#footnotes",
    "title": "Foundations of Data Science in R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nwherever you are, make sure you are communicating with me when you have questions!\nwherever you are, make sure you are communicating with me when you have questions!\n\npushing the file(s)\n\n\n\npoor assignment operator\n\n\n\ninvalid object name\n\n\n\nunmatched quotes\n\n\n\nno mistake\n\n\n\nimproper syntax for a function argument\n\n\n\nI mean, the right answer has to be Yes, right!??!\n\n\nno right answer here!\n\nIn the local folder which also has the R project. It could be on the Desktop or the Home directory, but it must be in the same place as the R project. Do not upload files to the remote GitHub directory or you will find yourself with two different copies of the files.\n\n\nYes! All the responses are reasons to make a figure.\n\nBecause that graphic displays the message you want as optimally as possible.\n\n\n\ncolor must be specified outside the aes() function\n\n\n\ndot color is specified as “navy”, line color is specified as wday.\n\n\n\nset the information outside the aes() function\n\n\nanswers may vary. I’d say c. putting the work in context. Others might say b. facilitating comparison or d. simplifying the story. However, I don’t think a correct answer is a. making the data stand out.\n\nmaking the data stand out\n\n\n\nOne showed the relevant comparison better.\n\n\n\nIt isn’t at the origin. in combination with d. There wasn’t a label explaining why the axes were where they were. The story associated with the average value axes is not clear to the reader.\n\n\n\nA relational database management system.\n\n\n\nThe first versions were created in the 1970s and called SEQUEL (Structured English QUEry Language). c. SQL came about in particular systems in the 1980s.\n\n\n\nrelational database management systems.\n\n\n\ncomputer’s hard drive / storage\n\n\n\nSQL tbl in storage and R tibble in memory\n\n\n\nSELECT\n\n\n\nSELECT FirstName FROM Persons\n\n\n\nSELECT * FROM Persons\n\n\n\nSELECT COUNT(*) FROM Persons\n\n\n\nSELECT * FROM Persons WHERE FirstName = ‘Peter’ (d. would also work.)\n\n\n\nSELECT * FROM Persons WHERE FirstName = ‘Peter’ AND LastName = ‘Jackson’\n\n\n\nBEWTEEN\n\n\n\nSELECT * FROM Persons WHERE LastName BETWEEN ‘Hansen’ AND ‘Pettersen’\n\n\n\nSELECT DISTINCT\n\n\n\nORDER BY\n\n\n\nSELECT * FROM Persons ORDER BY FirstName DESC\n\n\n\nTRUE\n\n\n\n… WHERE type = ‘fruit’ AND (color = ‘yellow’ OR color = ‘green’)\n\n\n\nit combines rows from two or more tables based on a related column.\n\n\n\nit combines the results of two or more SELECT statements.\n\n\n\nit combines rows from two or more tables based on a related column.\n\n\n\nit combines rows from two or more tables based on a related column.\n\n\n\nthe first table\n\n\n\nMick\n\n\n\nnone of them (all variables are kept in all joins)\n\n\n\nNULL (it would be NA in R)\n\n\nneither c. nor e. would match. Inside the bracket “[^u]” matches anything other than a “u”, but it has to match something.\n\nall of the above. Inside a character class | is a normal character and would therefore match “grey” and “gray” and “gr|y”. Which is not what we want, but would work to match both “grey” and “gray”.\n\n\n\n1 (because \\d matches only a single digit).\n\n\n\n10 (because \\d+ matches at least one digit).\n\n\n\nE (because . matches anything, and returns only a single character).\n\n\n\nEpisode 2: The pie whisperer. (4 August 2015) (because . matches anything, and with the + it returns multiple characters).\n\n\n\n. (because \\. matches the period, .).\n\n\n\n“(?&lt;=\\$)\\d+”\n\n\n\n“\\w+(?= pie)”\n\n\n\nwe return the string at the lookaround\n\n\n\nSELECT * FROM Persons WHERE FirstName REGEXP ’(?i)a.*’ (n.b., the LIKE function will give you a similar result, with % as a wildcard: SELECT*FROMPersonsWHERE` FirstName LIKE ‘a%’)\n\n\n\nPrimary key\n\n\n\nDirectly identifies another column\n\n\n\nstudent_name\n\n\n\nname as primary in enrollment and foreign in grades (the primary key must uniquely identify the records, and name is unlikely to do that in a grades database.)\n\n\n\nCREATE TABLE Customers\n\n\n\nUPDATE\n\n\n\nDELETE\n\n\n\nTRUE\n\n\n\nINSERT INTO\n\n\n\nINSERT INTO Persons VALUES (‘Jimmy’, ‘Jackson’)\n\n\n\nINSERT INTO Persons (LastName) VALUES (‘Olsen’)\n\n\n\nUPDATE Persons SET LastName=‘Nilsen’ WHERE LastName=‘Hansen’\n\n\n\nDELETE FROM Persons WHERE FirstName=‘Peter’\n\n\n\nmore than 6.3 million. Because there is no index on month (and we don’t have a year to incorporate month into the Date index), we need to look through all 48 million rows.\n\n\n\nTailnum. The cardinality is the number of unique values, and there are many more unique planes than years.\n\n\n\nTailnum. Because the cardinality is higher, it will take up much more space in the index.\n\n\n\nTailnum. Because the index is more complete, it will make the querying more efficient.\n\n\n\na = question, b = TRUE option, c = FALSE option\n\n\n\ncreates a new variable by re-coding an original variable\n\n\n\npartitions a numeric variable"
  },
  {
    "objectID": "clicker.html#footnotes",
    "href": "clicker.html#footnotes",
    "title": "Clicker Questions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nwherever you are, make sure you are communicating with me when you have questions!↩︎\nwherever you are, make sure you are communicating with me when you have questions!↩︎\n\npushing the file(s)\n\n↩︎\n\npoor assignment operator\n\n↩︎\n\ninvalid object name\n\n↩︎\n\nunmatched quotes\n\n↩︎\n\nno mistake\n\n↩︎\n\nimproper syntax for a function argument\n\n↩︎\n\nI mean, the right answer has to be Yes, right!??!\n\n↩︎\nno right answer here!↩︎\n\nIn the local folder which also has the R project. It could be on the Desktop or the Home directory, but it must be in the same place as the R project. Do not upload files to the remote GitHub directory or you will find yourself with two different copies of the files.\n\n↩︎\nYes! All the responses are reasons to make a figure.↩︎\n\nBecause that graphic displays the message you want as optimally as possible.\n\n↩︎\n\ncolor must be specified outside the aes() function\n\n↩︎\n\ndot color is specified as “navy”, line color is specified as wday.\n\n↩︎\n\nset the information outside the aes() function\n\n↩︎\nanswers may vary. I’d say c. putting the work in context. Others might say b. facilitating comparison or d. simplifying the story. However, I don’t think a correct answer is a. making the data stand out.↩︎\n\nmaking the data stand out\n\n↩︎\n\nOne showed the relevant comparison better.\n\n↩︎\n\nIt isn’t at the origin. in combination with d. There wasn’t a label explaining why the axes were where they were. The story associated with the average value axes is not clear to the reader.\n\n↩︎\n\nA relational database management system.\n\n↩︎\n\nThe first versions were created in the 1970s and called SEQUEL (Structured English QUEry Language). c. SQL came about in particular systems in the 1980s.\n\n↩︎\n\nrelational database management systems.\n\n↩︎\n\ncomputer’s hard drive / storage\n\n↩︎\n\nSQL tbl in storage and R tibble in memory\n\n↩︎\n\nSELECT\n\n↩︎\n\nSELECT FirstName FROM Persons\n\n↩︎\n\nSELECT * FROM Persons\n\n↩︎\n\nSELECT COUNT(*) FROM Persons\n\n↩︎\n\nSELECT * FROM Persons WHERE FirstName = ‘Peter’ (d. would also work.)\n\n↩︎\n\nSELECT * FROM Persons WHERE FirstName = ‘Peter’ AND LastName = ‘Jackson’\n\n↩︎\n\nBEWTEEN\n\n↩︎\n\nSELECT * FROM Persons WHERE LastName BETWEEN ‘Hansen’ AND ‘Pettersen’\n\n↩︎\n\nSELECT DISTINCT\n\n↩︎\n\nORDER BY\n\n↩︎\n\nSELECT * FROM Persons ORDER BY FirstName DESC\n\n↩︎\n\nTRUE\n\n↩︎\n\n… WHERE type = ‘fruit’ AND (color = ‘yellow’ OR color = ‘green’)\n\n↩︎\n\nit combines rows from two or more tables based on a related column.\n\n↩︎\n\nit combines the results of two or more SELECT statements.\n\n↩︎\n\nit combines rows from two or more tables based on a related column.\n\n↩︎\n\nit combines rows from two or more tables based on a related column.\n\n↩︎\n\nthe first table\n\n↩︎\n\nMick\n\n↩︎\n\nnone of them (all variables are kept in all joins)\n\n↩︎\n\nNULL (it would be NA in R)\n\n↩︎\nneither c. nor e. would match. Inside the bracket “[^u]” matches anything other than a “u”, but it has to match something.↩︎\n\nall of the above. Inside a character class | is a normal character and would therefore match “grey” and “gray” and “gr|y”. Which is not what we want, but would work to match both “grey” and “gray”.\n\n↩︎\n\n1 (because \\d matches only a single digit).\n\n↩︎\n\n10 (because \\d+ matches at least one digit).\n\n↩︎\n\nE (because . matches anything, and returns only a single character).\n\n↩︎\n\nEpisode 2: The pie whisperer. (4 August 2015) (because . matches anything, and with the + it returns multiple characters).\n\n↩︎\n\n. (because \\. matches the period, .).\n\n↩︎\n\n“(?&lt;=\\$)\\d+”\n\n↩︎\n\n“\\w+(?= pie)”\n\n↩︎\n\nwe return the string at the lookaround\n\n↩︎\n\nSELECT * FROM Persons WHERE FirstName REGEXP ’(?i)a.*’ (n.b., the LIKE function will give you a similar result, with % as a wildcard: SELECT*FROMPersonsWHERE` FirstName LIKE ‘a%’)\n\n↩︎\n\nPrimary key\n\n↩︎\n\nDirectly identifies another column\n\n↩︎\n\nstudent_name\n\n↩︎\n\nname as primary in enrollment and foreign in grades (the primary key must uniquely identify the records, and name is unlikely to do that in a grades database.)\n\n↩︎\n\nCREATE TABLE Customers\n\n↩︎\n\nUPDATE\n\n↩︎\n\nDELETE\n\n↩︎\n\nTRUE\n\n↩︎\n\nINSERT INTO\n\n↩︎\n\nINSERT INTO Persons VALUES (‘Jimmy’, ‘Jackson’)\n\n↩︎\n\nINSERT INTO Persons (LastName) VALUES (‘Olsen’)\n\n↩︎\n\nUPDATE Persons SET LastName=‘Nilsen’ WHERE LastName=‘Hansen’\n\n↩︎\n\nDELETE FROM Persons WHERE FirstName=‘Peter’\n\n↩︎\n\nmore than 6.3 million. Because there is no index on month (and we don’t have a year to incorporate month into the Date index), we need to look through all 48 million rows.\n\n↩︎\n\nTailnum. The cardinality is the number of unique values, and there are many more unique planes than years.\n\n↩︎\n\nTailnum. Because the cardinality is higher, it will take up much more space in the index.\n\n↩︎\n\nTailnum. Because the index is more complete, it will make the querying more efficient.\n\n↩︎\n\na = question, b = TRUE option, c = FALSE option\n\n↩︎\n\ncreates a new variable by re-coding an original variable\n\n↩︎\n\npartitions a numeric variable\n\n↩︎"
  },
  {
    "objectID": "handout/lab1_db_sds261_j24.html",
    "href": "handout/lab1_db_sds261_j24.html",
    "title": "Lab 1 - working with Databases",
    "section": "",
    "text": "Today’s lab will provide practice working with the different tools we can use to implement SQL code. We haven’t covered much SQL syntax, so the focus will be more on the tools than on writing code. You should, however, be trying to understand the SQL code as you go along.\nThe goals for lab 1 include:"
  },
  {
    "objectID": "syllabus.html#sds-261-januar-2024",
    "href": "syllabus.html#sds-261-januar-2024",
    "title": "syllabus",
    "section": "",
    "text": "Class: daily 10-11:30am Lab: daily (not Fridays) 1:30-3pm Office hours: daily 11:30-1:30pm\nJo Hardin\njo.hardin@pomona.edu\n\n\n\n\n\nArtwork by @allison_horst."
  },
  {
    "objectID": "syllabus.html#student-learning-outcomes.",
    "href": "syllabus.html#student-learning-outcomes.",
    "title": "syllabus",
    "section": "",
    "text": "By the end of the term, students will be able to:\n\nscrape, process, and clean data from the web\nwrangle data in a variety of formats\ncontextualize variation in data\nconstruct point and interval estimates using resampling techniques\ndesign accurate, clear and appropriate data graphics\nquery large relational databases (using SQL)\nwork fluently with regular expression\ncommunicate data-driven decisions"
  },
  {
    "objectID": "handout/lab4_regexp_sds261_j24.html",
    "href": "handout/lab4_regexp_sds261_j24.html",
    "title": "Lab 4 - regular expressions",
    "section": "",
    "text": "do something with chatgpt. ask chat gpt how to answer the question. then ask using SQL then ask using stringr.\nSolution: ^(?([0-9]{3}))?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$\nTest your solution on the following potential phone numbers:\nSolution: 1?[0-9]/[0-3]?[0-9]/([0-9]{2})?[0-9]{2}\nTest your solution on the following potential dates:\nSolution: ^(1|t(rue)?|y(es)?|ok(ay)?)$\n–&gt;&gt; need to figure out about lower and upper case in R / grep()\nTest your solution on the following potential responses:\nSolution: 2{1,3}(,[0-9]{3})*.[0-9]+$\nTest your solution on the following potential values:"
  },
  {
    "objectID": "syllabus.html#sds-261-january-2024",
    "href": "syllabus.html#sds-261-january-2024",
    "title": "syllabus",
    "section": "",
    "text": "Class: daily 10-11:30am\nLab: daily (not Fridays) 1:30-3pm\nOffice hours: daily 11:30-1:30pm\n\n\n\n\n\nArtwork by @allison_horst."
  },
  {
    "objectID": "handout/lab2_R_SQL_sds261_j24.html",
    "href": "handout/lab2_R_SQL_sds261_j24.html",
    "title": "Lab2 - SQL in R",
    "section": "",
    "text": "do something with NA / NULL. see hadley’s comments in the where section. https://r4ds.hadley.nz/databases#where\ndo something with distinct()\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "handout/lab4_joins_sds261_j24.html",
    "href": "handout/lab4_joins_sds261_j24.html",
    "title": "Lab4 - joins",
    "section": "",
    "text": "according to Ben: Yelp data does not have referential integrity, and you can find reviews written by users who don’t exist and/or about restaurants that aren’t in the other table.\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "Working on assignments with GitHub",
    "section": "",
    "text": "In DS002R, we will use GitHub + Gradescope to access and submit assignments. Here is the basic structure of how it will work:\n\nGet the assignment materials from GitHub.\nClone the repository to any machine you are using.\nWork on the assignment and push back to GitHub.\nSubmit the assignment on Gradescope.\n\n\n\n\n\n\n\nimage credit: https://xkcd.com/1597/,\n\n\n\n\n\nThe following diagram lays out the process, and the rest of the document provides a more detailed set of instructions.\n\n\n\n\n\nFlowchart of assignment process."
  },
  {
    "objectID": "github.html#pull",
    "href": "github.html#pull",
    "title": "Working on assignments with GitHub",
    "section": "pull",
    "text": "pull\nIf you are working with a colleague or on different machines it is so incredibly important to get in the habit of immediately clicking on pull when you start your work. (If you are working alone on a single machine pull won’t hurt! You’ll just be told that your files are already up to date.)\n\n\n\n\n\nAlways pull before you start. pull-work-save-commit-push"
  },
  {
    "objectID": "github.html#knit-your-work",
    "href": "github.html#knit-your-work",
    "title": "Working on assignments with GitHub",
    "section": "knit your work",
    "text": "knit your work\nDon’t forget to put your name on the assignment. Also, make sure that you knit to pdf. Knit early and often. The more often you knit, the fewer headaches you will have.\n\n\n\n\n\nAlways pull before you start. pull-work-knit-commit-push"
  },
  {
    "objectID": "github.html#commit-your-work",
    "href": "github.html#commit-your-work",
    "title": "Working on assignments with GitHub",
    "section": "commit your work",
    "text": "commit your work\nYou don’t need to commit every file, but you do need to commit files that are integral to the analysis (always commit .qmd, .pdf, data files, images that created the pdf, etc.).\n\n\n\n\n\npull-work-render-commit-push"
  },
  {
    "objectID": "github.html#push-your-work-to-github",
    "href": "github.html#push-your-work-to-github",
    "title": "Working on assignments with GitHub",
    "section": "push your work to GitHub",
    "text": "push your work to GitHub\nIt is good practice to use meaningful commit messages to help your future self figure out your past work.\n\n\n\n\n\npull-work-render-commit-push"
  },
  {
    "objectID": "github.html#check-your-work-on-github",
    "href": "github.html#check-your-work-on-github",
    "title": "Working on assignments with GitHub",
    "section": "check your work on GitHub",
    "text": "check your work on GitHub\nTo make sure that the work went through, always check your GitHub repo online to confirm any changes you made.\n\n\n\n\n\nCheck that your changes are correct."
  },
  {
    "objectID": "project.html#big-picture",
    "href": "project.html#big-picture",
    "title": "Project",
    "section": "Big picture",
    "text": "Big picture\nYour project is meant to answer a question using data. The vast majority of the work will be on the data wrangling side, but you might hope to have a plot or two at the end to help tie together your ideas.\n\nTopics\nThe topics above are meant to direct the project productively. They are not meant to limit you. If you have an idea for a project that doesn’t quite fit into what is outlined above (but is related to the course content), let’s talk about it! Most likely, your idea will fit into the project goals.\nExpanding on the topics above to get you started…\n\n1. SQL queries\nThroughout the course, we’ve seen a few different databases. There are more available in the R mdsr package, and you also have access to some additional MySQL server databases through Smith. Additionally, the professor has access to a MySQL server that contains all of the Stanford Open Policing data, and you are welcome to work with it (just ask for login information). So many interesting questions to consider!\n\n\n2. Regular expressions\nYou might think about web scraping to retrieve data (probably using the rvest R package). For example, you might scrape details about every Taylor Swift song and use regular expressions to format the information in a way that allows easy question asking.\nOr you might find a dataset on the Gilmore Girls and scrape IMDb to match the ratings for each episode.\n\n\n3. Creating SQL database\nYou can use any of a variety of platforms to create a SQL database. As in the class notes and labs, you can create a database using DuckDB. Alternatively, you can use Smith’s MySQL server. Or, you can use SQLite to create a database (in a similar way to DuckDB).\nFor example, you might create a database using the Saturday Night Live data and update all of the files with more recent episodes.\nOr you might look for a TidyTuesday dataset to upload. For example, consider data on cats in the UK which references similar datasets in the US, Australia, and New Zealand.\nIf you are creating a new SQL database, make sure that your database has three or more tables that link to one another."
  },
  {
    "objectID": "project.html#technical-details",
    "href": "project.html#technical-details",
    "title": "Project",
    "section": "Technical details",
    "text": "Technical details\n\nYou may work alone or in pairs.\nThere must be a narrative to accompany all technical products including code, output tables, visualizations, etc. No naked code or graphs. (Figures and Tables should have captions.)\nThe expectation is that you turn in a reproducible Quarto file and accompanying pdf or html file. If you plan to turn in the project in a different format, please check with the professor in advance.\n\n\nDue Dates\n\nTuesday, January 16. Email prof with dataset details and idea for project. Include the following:\n\nQuestion of interest that you hope to address.\nHolistic description of the dataset(s) (a few sentences).\nDescription of the observational units and columns in each data table.\nFull reference for data citation.\nLink to the resources.\n\nEnd of week 2. We will have some time in class to work on the project.\nTuesday, January 23. Completed project is due.\n\n\n:::"
  },
  {
    "objectID": "slides/2024-01-08-db.html#what-is-a-database",
    "href": "slides/2024-01-08-db.html#what-is-a-database",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "What is a database?",
    "text": "What is a database?\n\nstructured collection of data organized with\n\nefficient storage\neasy retrieval\nconsistent management\n\ndata stored in tables which are linked to one another via keys"
  },
  {
    "objectID": "slides/2024-01-08-db.html#tidy-data",
    "href": "slides/2024-01-08-db.html#tidy-data",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "Tidy data",
    "text": "Tidy data\n\ndata frame (R) or table (SQL)\ncolumns of variables\nrows of observational units"
  },
  {
    "objectID": "slides/2024-01-08-db.html#differences-between-r-and-sql",
    "href": "slides/2024-01-08-db.html#differences-between-r-and-sql",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "Differences between R and SQL",
    "text": "Differences between R and SQL\n\ntables in SQL databases can be arbitrarily large\n\nlive in storage, computer’s hard drive (usually remote)\n\ndata frames in R\n\nlive in memory (RAM) on your personal computer\n\ntables in a database are linked via a key."
  },
  {
    "objectID": "slides/2024-01-08-db.html#sql-connection",
    "href": "slides/2024-01-08-db.html#sql-connection",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "SQL connection",
    "text": "SQL connection\nTo set up a SQL connection, you need the location of the server (host) as well as a username and password.\n\ncon_air &lt;- DBI::dbConnect(\n  RMariaDB::MariaDB(),\n  dbname = \"airlines\",\n  host = Sys.getenv(\"MDSR_HOST\"),\n  user = Sys.getenv(\"MDSR_USER\"),\n  password = Sys.getenv(\"MDSR_PWD\")\n)\n\nHadley Wickham discusses how to use Sys.getenv: https://cran.r-project.org/web/packages/httr/vignettes/secrets.html"
  },
  {
    "objectID": "slides/2024-01-08-db.html#sql-tables-as-tbl",
    "href": "slides/2024-01-08-db.html#sql-tables-as-tbl",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "SQL tables as tbl",
    "text": "SQL tables as tbl\n\ncarriers &lt;- dplyr::tbl(con_air, \"carriers\")\ndim(carriers)\n\n[1] NA  2\n\nhead(carriers)\n\n# Source:   SQL [6 x 2]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  carrier name                         \n  &lt;chr&gt;   &lt;chr&gt;                        \n1 02Q     Titan Airways                \n2 04Q     Tradewind Aviation           \n3 05Q     Comlux Aviation, AG          \n4 06Q     Master Top Linhas Aereas Ltd.\n5 07Q     Flair Airlines Ltd.          \n6 09Q     Swift Air, LLC"
  },
  {
    "objectID": "slides/2024-01-08-db.html#sql-tables-as-tibble",
    "href": "slides/2024-01-08-db.html#sql-tables-as-tibble",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "SQL tables as tibble",
    "text": "SQL tables as tibble\nThe function collect() copies a SQL table from it’s server location on disk to your local memory location in R.\n\ncarriers_tibble &lt;- carriers |&gt;\n  dplyr::collect()\n\ndim(carriers_tibble)\n\n[1] 1610    2\n\nhead(carriers_tibble)\n\n# A tibble: 6 × 2\n  carrier name                         \n  &lt;chr&gt;   &lt;chr&gt;                        \n1 02Q     Titan Airways                \n2 04Q     Tradewind Aviation           \n3 05Q     Comlux Aviation, AG          \n4 06Q     Master Top Linhas Aereas Ltd.\n5 07Q     Flair Airlines Ltd.          \n6 09Q     Swift Air, LLC"
  },
  {
    "objectID": "slides/2024-01-08-db.html#how-much-space-does-carriers-take-up",
    "href": "slides/2024-01-08-db.html#how-much-space-does-carriers-take-up",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "How much space does carriers take up?",
    "text": "How much space does carriers take up?\nThe data frame in R takes up 2 orders of magnitude of memory more than the table which just points to the object in SQL.\n\ncarriers |&gt;\n  object.size() |&gt;\n  print(units = \"Kb\")\n\n5.2 Kb\n\ncarriers_tibble |&gt;\n  object.size() |&gt;\n  print(units = \"Kb\")\n\n234.8 Kb"
  },
  {
    "objectID": "slides/2024-01-08-db.html#what-is-sql-structured-query-language",
    "href": "slides/2024-01-08-db.html#what-is-sql-structured-query-language",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "What is SQL (Structured Query Language) ?",
    "text": "What is SQL (Structured Query Language) ?\n\nSQL is a programming language for working with relational databases.\nSQL has been around since the 1970s, but has, unfortunately, many different dialects.\nTo connect to the Smith and mdsr databases (via R and DBeaver), we will use MySQL.\nTo connect to DuckDB, we will use the dialect native to DuckDB."
  },
  {
    "objectID": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql",
    "href": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\nThe function dbListTables() in the DBI package will tell us what tables exist in the airlines database.\n\nDBI::dbListTables(con_air)\n\n[1] \"airports\" \"carriers\" \"flights\"  \"planes\"  \n\nflights &lt;- dplyr::tbl(con_air, \"flights\")\ncarriers &lt;- dplyr::tbl(con_air, \"carriers\")"
  },
  {
    "objectID": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql-1",
    "href": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql-1",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\n\nOver what years is the flights data taken?\n\n\nyrs &lt;- flights |&gt;\n  summarize(min_year = min(year), max_year = max(year))\n\nyrs\n\n# Source:   SQL [1 x 2]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  min_year max_year\n     &lt;int&gt;    &lt;int&gt;\n1     2010     2017"
  },
  {
    "objectID": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql-2",
    "href": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql-2",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\nBecause flights is not actually a data.frame in R (but instead a tbl in SQL), the work that was done above was actually performed in SQL. To see the SQL code, we can use the function show_query.\n\ndplyr::show_query(yrs)\n\n&lt;SQL&gt;\nSELECT MIN(`year`) AS `min_year`, MAX(`year`) AS `max_year`\nFROM `flights`"
  },
  {
    "objectID": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql-3",
    "href": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql-3",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\n\nCreate a data set containing only flights between LAX and BOS in 2012.\n\n\nla_bos &lt;- flights |&gt;\n  filter(year == 2012 & ((origin == \"LAX\" & dest == \"BOS\") | \n           (origin == \"BOS\" & dest == \"LAX\"))) \n\ndplyr::show_query(la_bos)\n\n&lt;SQL&gt;\nSELECT *\nFROM `flights`\nWHERE (`year` = 2012.0 AND ((`origin` = 'LAX' AND `dest` = 'BOS') OR (`origin` = 'BOS' AND `dest` = 'LAX')))"
  },
  {
    "objectID": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql-4",
    "href": "slides/2024-01-08-db.html#translating-dplyr-code-into-sql-4",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\n\ndbplyr doesn’t translate every R command into SQL.\nSQL is not a statistical software and doesn’t, for example, have a mechanism for creating data visualizations.\ntrack which R commands are connected to SQL at the dbplyr reference sheet."
  },
  {
    "objectID": "slides/2024-01-08-db.html#sql-queries-through-the-dbi-package",
    "href": "slides/2024-01-08-db.html#sql-queries-through-the-dbi-package",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "2. SQL queries through the DBI package",
    "text": "2. SQL queries through the DBI package\n\nLook at the first few rows of the flights data.\n\n\nDBI::dbGetQuery(con_air,\n                \"SELECT * FROM flights LIMIT 8;\")\n\n  year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n1 2010    10   1        1           2100       181      159           2320\n2 2010    10   1        1           1920       281      230           2214\n3 2010    10   1        3           2355         8      339            334\n4 2010    10   1        5           2200       125       41           2249\n5 2010    10   1        7           2245        82      104           2347\n6 2010    10   1        7             10        -3      451            500\n7 2010    10   1        7           2150       137      139           2337\n8 2010    10   1        8             15        -7      538            537\n  arr_delay carrier tailnum flight origin dest air_time distance cancelled\n1       159      XE  N11137   2558    EWR  OMA      162     1133         0\n2       256      B6  N659JB    562    FLL  SWF      131     1119         0\n3         5      B6  N563JB    701    JFK  SJU      196     1597         0\n4       112      XE  N16559   5982    IAD  BNA       82      542         0\n5        77      OO  N908SW   6433    LAX  FAT       37      209         0\n6        -9      AA  N3FRAA    700    LAX  DFW      150     1235         0\n7       122      DL  N347NW   1752    ATL  IAD       70      533         0\n8         1      CO  N73283   1740    SMF  IAH      193     1609         0\n  diverted hour minute           time_hour\n1        0   21      0 2010-10-01 21:00:00\n2        0   19     20 2010-10-01 19:20:00\n3        0   23     55 2010-10-01 23:55:00\n4        0   22      0 2010-10-01 22:00:00\n5        0   22     45 2010-10-01 22:45:00\n6        0    0     10 2010-10-01 00:10:00\n7        0   21     50 2010-10-01 21:50:00\n8        0    0     15 2010-10-01 00:15:00"
  },
  {
    "objectID": "slides/2024-01-08-db.html#sql-queries-through-the-dbi-package-1",
    "href": "slides/2024-01-08-db.html#sql-queries-through-the-dbi-package-1",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "2. SQL queries through the DBI package",
    "text": "2. SQL queries through the DBI package\n\nHow many flights per year are in the flights table?\n\n\ndbGetQuery(con_air, \n  \"SELECT year, count(*) AS num_flights FROM flights GROUP BY year ORDER BY num_flights;\")\n\n  year num_flights\n1 2016     5617658\n2 2017     5674621\n3 2015     5819079\n4 2014     5819811\n5 2011     6085281\n6 2012     6096762\n7 2013     6369482\n8 2010     6450117"
  },
  {
    "objectID": "slides/2024-01-08-db.html#direct-sql-queries-through-a-sql-chunk",
    "href": "slides/2024-01-08-db.html#direct-sql-queries-through-a-sql-chunk",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "3. Direct SQL queries through a sql chunk",
    "text": "3. Direct SQL queries through a sql chunk\nSQL queries can be written directly inside a sql chunk in RStudio.\n\n```{sql}\n#| connection: con_air\n\nSELECT * FROM flights LIMIT 8;\n```\n\n\n\n\n8 records\n\n\n\n\nyear\n\n\nmonth\n\n\nday\n\n\ndep_time\n\n\nsched_dep_time\n\n\ndep_delay\n\n\narr_time\n\n\nsched_arr_time\n\n\narr_delay\n\n\ncarrier\n\n\ntailnum\n\n\nflight\n\n\norigin\n\n\ndest\n\n\nair_time\n\n\ndistance\n\n\ncancelled\n\n\ndiverted\n\n\nhour\n\n\nminute\n\n\ntime_hour\n\n\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n1\n\n\n2100\n\n\n181\n\n\n159\n\n\n2320\n\n\n159\n\n\nXE\n\n\nN11137\n\n\n2558\n\n\nEWR\n\n\nOMA\n\n\n162\n\n\n1133\n\n\n0\n\n\n0\n\n\n21\n\n\n0\n\n\n2010-10-01 21:00:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n1\n\n\n1920\n\n\n281\n\n\n230\n\n\n2214\n\n\n256\n\n\nB6\n\n\nN659JB\n\n\n562\n\n\nFLL\n\n\nSWF\n\n\n131\n\n\n1119\n\n\n0\n\n\n0\n\n\n19\n\n\n20\n\n\n2010-10-01 19:20:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n3\n\n\n2355\n\n\n8\n\n\n339\n\n\n334\n\n\n5\n\n\nB6\n\n\nN563JB\n\n\n701\n\n\nJFK\n\n\nSJU\n\n\n196\n\n\n1597\n\n\n0\n\n\n0\n\n\n23\n\n\n55\n\n\n2010-10-01 23:55:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n5\n\n\n2200\n\n\n125\n\n\n41\n\n\n2249\n\n\n112\n\n\nXE\n\n\nN16559\n\n\n5982\n\n\nIAD\n\n\nBNA\n\n\n82\n\n\n542\n\n\n0\n\n\n0\n\n\n22\n\n\n0\n\n\n2010-10-01 22:00:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n7\n\n\n2245\n\n\n82\n\n\n104\n\n\n2347\n\n\n77\n\n\nOO\n\n\nN908SW\n\n\n6433\n\n\nLAX\n\n\nFAT\n\n\n37\n\n\n209\n\n\n0\n\n\n0\n\n\n22\n\n\n45\n\n\n2010-10-01 22:45:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n7\n\n\n10\n\n\n-3\n\n\n451\n\n\n500\n\n\n-9\n\n\nAA\n\n\nN3FRAA\n\n\n700\n\n\nLAX\n\n\nDFW\n\n\n150\n\n\n1235\n\n\n0\n\n\n0\n\n\n0\n\n\n10\n\n\n2010-10-01 00:10:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n7\n\n\n2150\n\n\n137\n\n\n139\n\n\n2337\n\n\n122\n\n\nDL\n\n\nN347NW\n\n\n1752\n\n\nATL\n\n\nIAD\n\n\n70\n\n\n533\n\n\n0\n\n\n0\n\n\n21\n\n\n50\n\n\n2010-10-01 21:50:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n8\n\n\n15\n\n\n-7\n\n\n538\n\n\n537\n\n\n1\n\n\nCO\n\n\nN73283\n\n\n1740\n\n\nSMF\n\n\nIAH\n\n\n193\n\n\n1609\n\n\n0\n\n\n0\n\n\n0\n\n\n15\n\n\n2010-10-01 00:15:00"
  },
  {
    "objectID": "slides/2024-01-08-db.html#direct-sql-queries-through-a-sql-chunk-1",
    "href": "slides/2024-01-08-db.html#direct-sql-queries-through-a-sql-chunk-1",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "3. Direct SQL queries through a sql chunk",
    "text": "3. Direct SQL queries through a sql chunk\nSQL queries can be written directly inside a sql chunk in RStudio.\n\n```{sql}\n#| connection: con_air\n\nSELECT year, count(*) AS num_flights \n       FROM flights \n       GROUP BY year \n       ORDER BY num_flights;\n```\n\n\n\n\n8 records\n\n\n\n\nyear\n\n\nnum_flights\n\n\n\n\n\n\n2016\n\n\n5617658\n\n\n\n\n2017\n\n\n5674621\n\n\n\n\n2015\n\n\n5819079\n\n\n\n\n2014\n\n\n5819811\n\n\n\n\n2011\n\n\n6085281\n\n\n\n\n2012\n\n\n6096762\n\n\n\n\n2013\n\n\n6369482\n\n\n\n\n2010\n\n\n6450117"
  },
  {
    "objectID": "slides/2024-01-08-db.html#sql-queries-via-the-dbi-package",
    "href": "slides/2024-01-08-db.html#sql-queries-via-the-dbi-package",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "2. SQL queries via the DBI package",
    "text": "2. SQL queries via the DBI package\n\nLook at the first few rows of the flights data.\n\n\nDBI::dbGetQuery(con_air,\n                \"SELECT * FROM flights LIMIT 8;\")\n\n  year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n1 2010    10   1        1           2100       181      159           2320\n2 2010    10   1        1           1920       281      230           2214\n3 2010    10   1        3           2355         8      339            334\n4 2010    10   1        5           2200       125       41           2249\n5 2010    10   1        7           2245        82      104           2347\n6 2010    10   1        7             10        -3      451            500\n7 2010    10   1        7           2150       137      139           2337\n8 2010    10   1        8             15        -7      538            537\n  arr_delay carrier tailnum flight origin dest air_time distance cancelled\n1       159      XE  N11137   2558    EWR  OMA      162     1133         0\n2       256      B6  N659JB    562    FLL  SWF      131     1119         0\n3         5      B6  N563JB    701    JFK  SJU      196     1597         0\n4       112      XE  N16559   5982    IAD  BNA       82      542         0\n5        77      OO  N908SW   6433    LAX  FAT       37      209         0\n6        -9      AA  N3FRAA    700    LAX  DFW      150     1235         0\n7       122      DL  N347NW   1752    ATL  IAD       70      533         0\n8         1      CO  N73283   1740    SMF  IAH      193     1609         0\n  diverted hour minute           time_hour\n1        0   21      0 2010-10-01 21:00:00\n2        0   19     20 2010-10-01 19:20:00\n3        0   23     55 2010-10-01 23:55:00\n4        0   22      0 2010-10-01 22:00:00\n5        0   22     45 2010-10-01 22:45:00\n6        0    0     10 2010-10-01 00:10:00\n7        0   21     50 2010-10-01 21:50:00\n8        0    0     15 2010-10-01 00:15:00"
  },
  {
    "objectID": "slides/2024-01-08-db.html#sql-queries-via-the-dbi-package-1",
    "href": "slides/2024-01-08-db.html#sql-queries-via-the-dbi-package-1",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "2. SQL queries via the DBI package",
    "text": "2. SQL queries via the DBI package\n\nHow many flights per year are in the flights table?\n\n\nDBI::dbGetQuery(con_air, \n  \"SELECT year, count(*) AS num_flights FROM flights GROUP BY year ORDER BY num_flights;\")\n\n  year num_flights\n1 2016     5617658\n2 2017     5674621\n3 2015     5819079\n4 2014     5819811\n5 2011     6085281\n6 2012     6096762\n7 2013     6369482\n8 2010     6450117"
  },
  {
    "objectID": "slides/2024-01-08-db.html#direct-sql-queries-via-sql-chunks",
    "href": "slides/2024-01-08-db.html#direct-sql-queries-via-sql-chunks",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "3. Direct SQL queries via sql chunks",
    "text": "3. Direct SQL queries via sql chunks\nSQL queries can be written directly inside a sql chunk in RStudio.\n\n```{sql}\n#| connection: con_air\n\nSELECT * FROM flights LIMIT 8;\n```\n\n\n\n\n8 records\n\n\n\n\nyear\n\n\nmonth\n\n\nday\n\n\ndep_time\n\n\nsched_dep_time\n\n\ndep_delay\n\n\narr_time\n\n\nsched_arr_time\n\n\narr_delay\n\n\ncarrier\n\n\ntailnum\n\n\nflight\n\n\norigin\n\n\ndest\n\n\nair_time\n\n\ndistance\n\n\ncancelled\n\n\ndiverted\n\n\nhour\n\n\nminute\n\n\ntime_hour\n\n\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n1\n\n\n2100\n\n\n181\n\n\n159\n\n\n2320\n\n\n159\n\n\nXE\n\n\nN11137\n\n\n2558\n\n\nEWR\n\n\nOMA\n\n\n162\n\n\n1133\n\n\n0\n\n\n0\n\n\n21\n\n\n0\n\n\n2010-10-01 21:00:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n1\n\n\n1920\n\n\n281\n\n\n230\n\n\n2214\n\n\n256\n\n\nB6\n\n\nN659JB\n\n\n562\n\n\nFLL\n\n\nSWF\n\n\n131\n\n\n1119\n\n\n0\n\n\n0\n\n\n19\n\n\n20\n\n\n2010-10-01 19:20:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n3\n\n\n2355\n\n\n8\n\n\n339\n\n\n334\n\n\n5\n\n\nB6\n\n\nN563JB\n\n\n701\n\n\nJFK\n\n\nSJU\n\n\n196\n\n\n1597\n\n\n0\n\n\n0\n\n\n23\n\n\n55\n\n\n2010-10-01 23:55:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n5\n\n\n2200\n\n\n125\n\n\n41\n\n\n2249\n\n\n112\n\n\nXE\n\n\nN16559\n\n\n5982\n\n\nIAD\n\n\nBNA\n\n\n82\n\n\n542\n\n\n0\n\n\n0\n\n\n22\n\n\n0\n\n\n2010-10-01 22:00:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n7\n\n\n2245\n\n\n82\n\n\n104\n\n\n2347\n\n\n77\n\n\nOO\n\n\nN908SW\n\n\n6433\n\n\nLAX\n\n\nFAT\n\n\n37\n\n\n209\n\n\n0\n\n\n0\n\n\n22\n\n\n45\n\n\n2010-10-01 22:45:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n7\n\n\n10\n\n\n-3\n\n\n451\n\n\n500\n\n\n-9\n\n\nAA\n\n\nN3FRAA\n\n\n700\n\n\nLAX\n\n\nDFW\n\n\n150\n\n\n1235\n\n\n0\n\n\n0\n\n\n0\n\n\n10\n\n\n2010-10-01 00:10:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n7\n\n\n2150\n\n\n137\n\n\n139\n\n\n2337\n\n\n122\n\n\nDL\n\n\nN347NW\n\n\n1752\n\n\nATL\n\n\nIAD\n\n\n70\n\n\n533\n\n\n0\n\n\n0\n\n\n21\n\n\n50\n\n\n2010-10-01 21:50:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n8\n\n\n15\n\n\n-7\n\n\n538\n\n\n537\n\n\n1\n\n\nCO\n\n\nN73283\n\n\n1740\n\n\nSMF\n\n\nIAH\n\n\n193\n\n\n1609\n\n\n0\n\n\n0\n\n\n0\n\n\n15\n\n\n2010-10-01 00:15:00"
  },
  {
    "objectID": "slides/2024-01-08-db.html#direct-sql-queries-via-sql-chunks-1",
    "href": "slides/2024-01-08-db.html#direct-sql-queries-via-sql-chunks-1",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "3. Direct SQL queries via sql chunks",
    "text": "3. Direct SQL queries via sql chunks\nSQL queries can be written directly inside a sql chunk in RStudio.\n\n```{sql}\n#| connection: con_air\n\nSELECT year, count(*) AS num_flights \n       FROM flights \n       GROUP BY year \n       ORDER BY num_flights;\n```\n\n\n\n\n8 records\n\n\n\n\nyear\n\n\nnum_flights\n\n\n\n\n\n\n2016\n\n\n5617658\n\n\n\n\n2017\n\n\n5674621\n\n\n\n\n2015\n\n\n5819079\n\n\n\n\n2014\n\n\n5819811\n\n\n\n\n2011\n\n\n6085281\n\n\n\n\n2012\n\n\n6096762\n\n\n\n\n2013\n\n\n6369482\n\n\n\n\n2010\n\n\n6450117"
  },
  {
    "objectID": "handout/lab1_db_sds261_j24.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab1_db_sds261_j24.html#advice-for-turning-in-the-assignment",
    "title": "Lab 1 - working with Databases",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nrender early and often. In fact, go ahead and render your .qmd file right now. Maybe set a timer so that you render every 5 minutes. Do not wait until you are done with the assignment to render\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox."
  },
  {
    "objectID": "github.html#render-your-work",
    "href": "github.html#render-your-work",
    "title": "Working on assignments with GitHub",
    "section": "Render your work",
    "text": "Render your work\nDon’t forget to put your name on the assignment. Also, make sure that you Render to pdf. Render early and often. The more often you Render, the fewer headaches you will have.\n\n\n\n\n\nAlways pull before you start. pull-work-render-commit-push"
  },
  {
    "objectID": "slides/2024-01-08-db.html#steps-for-weekly-homework",
    "href": "slides/2024-01-08-db.html#steps-for-weekly-homework",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "Steps for weekly homework",
    "text": "Steps for weekly homework\n\nReceive a link to the new assignment (clicking on the link will create a new private repo)\n\nUse RStudio\n\nNew Project, version control, Git\n\nClone the repo using SSH\n\n\nCreate a new file sds261-lab#-lname-fname.qmd. (If the .qmd file already exists, rename the file to sds261-lab#-lname-fname.qmd.)\nDo the assignment\n\ncommit and push after every problem\n\n\nFor work done in DBeaver (.sql files), use the same naming convention: sds261-lab#-lname-fname.sql.\nAll necessary files must be in the same folder (e.g., data, .sql files, etc.)"
  },
  {
    "objectID": "handout/lab1_db_sds261_j24.html#assignment",
    "href": "handout/lab1_db_sds261_j24.html#assignment",
    "title": "Lab 1 - working with Databases",
    "section": "Assignment",
    "text": "Assignment\nPreliminary: You’ll need to create a quarto document. To do so click on: New file -&gt; quarto document.\n\nThe document should be saved in the R Project as lab1-sds261-yourlastname-yourfirstname.qmd.\nThe yaml at the top of the file should look like this (change the author and date fields):\n\n---\ntitle: 'Lab 1 - working with Databases'\nauthor: 'your name goes here'\ndate: 'due 10am Tuesday, January 9, 2024'\nexecute:\n  echo: true\n  warning: false\n  message: false\n---\nFor much of the assignment, Consider the task of figuring out how many flights came into or flew out of Bradley International Airport (BDL) last year.\n\nSet up a connection within an R chunk. See the README file.\n\n\nPull in the flights table as a tbl (do not use collect()!). Use dplyr commands to calculate the number of flights that flew into or out of BDL in 2012. Then use dplyr::show_query() to output the SQL query. (All done inside an R chunk.)\n\n\nAgain, inside an R chunk, use DBI::dbGetQuery() to run the SQL code calculated in the previous question.\n\n\nNow, inside a SQL chunk, use the SQL commands directly (same task: how many flights in and out of BDL in 2012).\n\n\nRerun all three scenarios, using the tictoc R package to see which method calculates the desired number most quickly. Below is an example of how to use tictoc. For the SQL chunk, you’ll need to place tic() in an R chunk before the SQL chunk and toc() in an R chunk after the SQL chunk. Write 1-2 sentences describing the results.\n\n\nlibrary(tictoc)\n\ntic()\nrand_numbers &lt;- rnorm(1000000)\nquantile(rand_numbers)\n\n           0%           25%           50%           75%          100% \n-4.7441954424 -0.6750814407  0.0006767307  0.6734974364  5.6445201338 \n\ntoc()\n\n0.097 sec elapsed\n\n\n\nUsing R on the tbl.\n\n\nUsing dbGetQuery().\n\n\nUsing SQL chunk.\n\n\nNow create a tibble (not a tbl) that includes only flights in 2012 either to or from BDL (use collect()). After you have created the tibble, summarize the observations to get the count. Use tictoc to evaluate how long the process takes. Write 1-2 sentences describing the results.\n\n\nDBeaver: open DBeaver from your applications. Following the instructions in the DBeaver online notes, set up a connection to the mdsr SQL server. Create a file called lab1-sds261-yourlastname-yourfirstname.sql and SAVE THE FILE in the lab1 R Project folder. Run the same SQL code as above. Did you get the same result? Were there any adjustments to the SQL code from above? Explain in a few sentences.\n\n\nReflect on at least 3 things that you learned during this lab. It could be about technical aspects. It could be about understanding databases. It could be about the difference between R and SQL. Anything you learned while doing the lab.\n\n\nAlways a good idea to terminate the SQL connection when you are done with it.\n\n\ndbDisconnect(con_air, shutdown = TRUE)\n\n\nrender - commit - push to GitHub. You should push three files, those with extensions .qmd, .html, and .sql. In a browser, look at your GitHub website to make sure that all three files were successfully pushed to the correct repo (yours for lab1)."
  },
  {
    "objectID": "slides/2024-01-08-db.html#good-practice",
    "href": "slides/2024-01-08-db.html#good-practice",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "Good practice",
    "text": "Good practice\nAlways a good idea to terminate the SQL connection when you are done with it.\n\ndbDisconnect(con_air, shutdown = TRUE)"
  },
  {
    "objectID": "handout/lab1_db_sds261_j24_sol.html",
    "href": "handout/lab1_db_sds261_j24_sol.html",
    "title": "Lab 1 - working with Databases",
    "section": "",
    "text": "Solution\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RMariaDB)\nlibrary(dbplyr)\nlibrary(mdsr)\nToday’s lab will provide practice working with the different tools we can use to implement SQL code. We haven’t covered much SQL syntax, so the focus will be more on the tools than on writing code. You should, however, be trying to understand the SQL code as you go along.\nThe goals for lab 1 include:"
  },
  {
    "objectID": "handout/lab1_db_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab1_db_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "title": "Lab 1 - working with Databases",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nrender early and often. In fact, go ahead and render your .qmd file right now. Maybe set a timer so that you render every 5 minutes. Do not wait until you are done with the assignment to render\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox."
  },
  {
    "objectID": "handout/lab1_db_sds261_j24_sol.html#assignment",
    "href": "handout/lab1_db_sds261_j24_sol.html#assignment",
    "title": "Lab 1 - working with Databases",
    "section": "Assignment",
    "text": "Assignment\nPreliminary: You’ll need to create a quarto document. To do so click on: New file -&gt; quarto document.\n\nThe document should be saved in the R Project as lab1-sds261-yourlastname-yourfirstname.qmd.\nThe yaml at the top of the file should look like this (change the author and date fields):\n\n---\ntitle: 'Lab 1 - working with Databases'\nauthor: 'your name goes here'\ndate: 'due 10am Tuesday, January 9, 2024'\nexecute:\n  echo: true\n  warning: false\n  message: false\n---\nFor much of the assignment, Consider the task of figuring out how many flights came into or flew out of Bradley International Airport (BDL) last year.\n\nSet up a connection within an R chunk. See the README file.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ncon_air &lt;- DBI::dbConnect(\n  RMariaDB::MariaDB(),\n  dbname = \"airlines\",\n  host = Sys.getenv(\"MDSR_HOST\"),\n  user = Sys.getenv(\"MDSR_USER\"),\n  password = Sys.getenv(\"MDSR_PWD\")\n)\n\n\n\n\n\nPull in the flights table as a tbl (do not use collect()!). Use dplyr commands to calculate the number of flights that flew into or out of BDL in 2012. Then use dplyr::show_query() to output the SQL query. (All done inside an R chunk.)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nflights &lt;- tbl(con_air, \"flights\")\nnames(flights)\n\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"tailnum\"        \"flight\"        \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"cancelled\"      \"diverted\"       \"hour\"           \"minute\"        \n[21] \"time_hour\"     \n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nbdl_query &lt;- flights |&gt;\n  filter(year == 2012 & (dest == \"BDL\" | origin == \"BDL\")) |&gt;\n  summarize(count = n())\n\nshow_query(bdl_query)\n\n&lt;SQL&gt;\nSELECT COUNT(*) AS `count`\nFROM `flights`\nWHERE (`year` = 2012.0 AND (`dest` = 'BDL' OR `origin` = 'BDL'))\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThere were 41,949 flights to or from BDL in 2012.\n\n\n\n\n\nAgain, inside an R chunk, use DBI::dbGetQuery() to run the SQL code calculated in the previous question.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nDBI::dbGetQuery(con_air, \"SELECT COUNT(*) AS `count`\nFROM `flights`\nWHERE (`year` = 2012 AND (`dest` = 'BDL' OR `origin` = 'BDL'))\")\n\n  count\n1 41949\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThere were 41,949 flights to or from BDL in 2012.\n\n\n\n\n\nNow, inside a SQL chunk, use the SQL commands directly (same task: how many flights in and out of BDL in 2012).\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n```{sql}\n#| connection: con_air\n#| unilur-solution: true\n\nSELECT COUNT(*) AS `count`\nFROM `flights`\nWHERE (`year` = 2012 AND (`dest` = 'BDL' OR `origin` = 'BDL'))\n```\n\n\n1 records\n\n\ncount\n\n\n\n\n41949\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThere were 41,949 flights to or from BDL in 2012.\n\n\n\n\n\nRerun all three scenarios, using the tictoc R package to see which method calculates the desired number most quickly. Below is an example of how to use tictoc. For the SQL chunk, you’ll need to place tic() in an R chunk before the SQL chunk and toc() in an R chunk after the SQL chunk. Write 1-2 sentences describing the results.\n\n\nlibrary(tictoc)\n\ntic()\nrand_numbers &lt;- rnorm(1000000)\nquantile(rand_numbers)\n\n           0%           25%           50%           75%          100% \n-4.7441954424 -0.6750814407  0.0006767307  0.6734974364  5.6445201338 \n\ntoc()\n\n0.097 sec elapsed\n\n\n\nUsing R on the tbl.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntic()\n\nflights &lt;- tbl(con_air, \"flights\")\n\nflights |&gt;\n  filter(year == 2012 & (dest == \"BDL\" | origin == \"BDL\")) |&gt;\n  summarize(count = n())\n\n# Source:   SQL [1 x 1]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n    count\n  &lt;int64&gt;\n1   41949\n\ntoc()\n\n5.526 sec elapsed\n\n\n\n\n\n\nUsing dbGetQuery().\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntic()\n\nDBI::dbGetQuery(con_air, \"SELECT COUNT(*) AS `count`\nFROM `flights`\nWHERE (`year` = 2012 AND (`dest` = 'BDL' OR `origin` = 'BDL'))\")\n\n  count\n1 41949\n\ntoc()\n\n5.258 sec elapsed\n\n\n\n\n\n\nUsing SQL chunk.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntic()\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n```{sql}\n#| connection: con_air\n#| unilur-solution: true\n\nSELECT COUNT(*) AS `count`\nFROM `flights`\nWHERE (`year` = 2012 AND (`dest` = 'BDL' OR `origin` = 'BDL'))\n```\n\n\n1 records\n\n\ncount\n\n\n\n\n41949\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntoc()\n\n5.515 sec elapsed\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nRunning the SQL code (either directly through a SQL chunk or by using DBI::dbGetQuery()) is faster than when dbplyr is used to translate R code into SQL queries.\n\n\n\n\n\nNow create a tibble (not a tbl) that includes only flights in 2012 either to or from BDL (use collect()). After you have created the tibble, summarize the observations to get the count. Use tictoc to evaluate how long the process takes. Write 1-2 sentences describing the results.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntic()\n\nflights_BDL &lt;- flights |&gt;\n  filter(year == 2012 & (dest == \"BDL\" | origin == \"BDL\")) |&gt;\n  collect()\n\nflights_BDL |&gt;\n  summarize(count = n())\n\n# A tibble: 1 × 1\n  count\n  &lt;int&gt;\n1 41949\n\ntoc()\n\n5.538 sec elapsed\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nPulling the table into R as a dataframe slows down the calculations quite a bit.\n\n\n\n\n\nDBeaver: open DBeaver from your applications. Following the instructions in the DBeaver online notes, set up a connection to the mdsr SQL server. Create a file called lab1-sds261-yourlastname-yourfirstname.sql and SAVE THE FILE in the lab1 R Project folder. Run the same SQL code as above. Did you get the same result? Were there any adjustments to the SQL code from above? Explain in a few sentences.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nYes, there were still 41,949 flights to and from BDL in 2012. Whew! It would have been very odd if there had been a different number because the database itself hasn’t changed at all, we are just sending the query using a different client.\nI needed to remove the back ticks from the table and variable names. R uses backticks but DBeaver does not. Good to remember.\nI had set up my connection to the entire mdsr database, so I needed to add the line USE airlines; to the top of my SQL query so that it would be able to find the flights table. I could have also specified where flights lives using: ... FROM airlines.flights....\n\n\n\n\n\nReflect on at least 3 things that you learned during this lab. It could be about technical aspects. It could be about understanding databases. It could be about the difference between R and SQL. Anything you learned while doing the lab.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nthere are different ways to run the same SQL commands\nsome approaches are more efficient than other approaches\nthe RStudio IDE is flexible in that it allows both R and SQL code\nDBeaver is a more typical SQL client in that many lines of SQL code can be written simultaneously, and the SQL connection says in tact for the entire set of queries.\nthe airlines database has a ginormous about of information which exists in four tables: airports, carriers, flights, and planes\n\n\n\n\n\n\nAlways a good idea to terminate the SQL connection when you are done with it.\n\n\ndbDisconnect(con_air, shutdown = TRUE)\n\n\nrender - commit - push to GitHub. You should push three files, those with extensions .qmd, .html, and .sql. In a browser, look at your GitHub website to make sure that all three files were successfully pushed to the correct repo (yours for lab1)."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#nyc-taxis",
    "href": "slides/2024-01-09-clauses.html#nyc-taxis",
    "title": "SQL clauses",
    "section": "NYC Taxis",
    "text": "NYC Taxis\nConsider a database of taxi rides from the Yellow Cab company in NYC in March of 2014.\n\nFigure 1: image credit: Mariordo (Mario Roberto Durán Ortiz), CC BY-SA 3.0"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#establishing-a-sql-connection",
    "href": "slides/2024-01-09-clauses.html#establishing-a-sql-connection",
    "title": "SQL clauses",
    "section": "Establishing a SQL connection",
    "text": "Establishing a SQL connection\n\ncon_taxi &lt;- DBI::dbConnect(\n  RMariaDB::MariaDB(),\n  dbname = \"nyctaxi\",\n  host = Sys.getenv(\"MDSR_HOST\"),\n  user = Sys.getenv(\"MDSR_USER\"),\n  password = Sys.getenv(\"MDSR_PWD\")\n)"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#what-is-a-database",
    "href": "slides/2024-01-09-clauses.html#what-is-a-database",
    "title": "SQL clauses",
    "section": "What is a database?",
    "text": "What is a database?\n\nstructured collection of data organized with\n\nefficient storage\neasy retrieval\nconsistent management\n\ndata stored in tables which are linked to one another via keys"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#tidy-data",
    "href": "slides/2024-01-09-clauses.html#tidy-data",
    "title": "SQL clauses",
    "section": "Tidy data",
    "text": "Tidy data\n\ndata frame (R) or table (SQL)\ncolumns of variables\nrows of observational units"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#differences-between-r-and-sql",
    "href": "slides/2024-01-09-clauses.html#differences-between-r-and-sql",
    "title": "SQL clauses",
    "section": "Differences between R and SQL",
    "text": "Differences between R and SQL\n\ntables in SQL databases can be arbitrarily large\n\nlive in storage, computer’s hard drive (usually remote)\n\ndata frames in R\n\nlive in memory (RAM) on your personal computer\n\ntables in a database are linked via a key."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#sql-connection",
    "href": "slides/2024-01-09-clauses.html#sql-connection",
    "title": "SQL clauses",
    "section": "SQL connection",
    "text": "SQL connection\nTo set up a SQL connection, you need the location of the server (host) as well as a username and password.\n\ncon_air &lt;- DBI::dbConnect(\n  RMariaDB::MariaDB(),\n  dbname = \"airlines\",\n  host = Sys.getenv(\"MDSR_HOST\"),\n  user = Sys.getenv(\"MDSR_USER\"),\n  password = Sys.getenv(\"MDSR_PWD\")\n)\n\nHadley Wickham discusses how to use Sys.getenv: https://cran.r-project.org/web/packages/httr/vignettes/secrets.html"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#sql-tables-as-tbl",
    "href": "slides/2024-01-09-clauses.html#sql-tables-as-tbl",
    "title": "SQL clauses",
    "section": "SQL tables as tbl",
    "text": "SQL tables as tbl\n\ncarriers &lt;- dplyr::tbl(con_air, \"carriers\")\ndim(carriers)\n\n[1] NA  2\n\nhead(carriers)\n\n# Source:   SQL [6 x 2]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  carrier name                         \n  &lt;chr&gt;   &lt;chr&gt;                        \n1 02Q     Titan Airways                \n2 04Q     Tradewind Aviation           \n3 05Q     Comlux Aviation, AG          \n4 06Q     Master Top Linhas Aereas Ltd.\n5 07Q     Flair Airlines Ltd.          \n6 09Q     Swift Air, LLC"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#sql-tables-as-tibble",
    "href": "slides/2024-01-09-clauses.html#sql-tables-as-tibble",
    "title": "SQL clauses",
    "section": "SQL tables as tibble",
    "text": "SQL tables as tibble\nThe function collect() copies a SQL table from it’s server location on disk to your local memory location in R.\n\ncarriers_tibble &lt;- carriers |&gt;\n  dplyr::collect()\n\ndim(carriers_tibble)\n\n[1] 1610    2\n\nhead(carriers_tibble)\n\n# A tibble: 6 × 2\n  carrier name                         \n  &lt;chr&gt;   &lt;chr&gt;                        \n1 02Q     Titan Airways                \n2 04Q     Tradewind Aviation           \n3 05Q     Comlux Aviation, AG          \n4 06Q     Master Top Linhas Aereas Ltd.\n5 07Q     Flair Airlines Ltd.          \n6 09Q     Swift Air, LLC"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#how-much-space-does-carriers-take-up",
    "href": "slides/2024-01-09-clauses.html#how-much-space-does-carriers-take-up",
    "title": "SQL clauses",
    "section": "How much space does carriers take up?",
    "text": "How much space does carriers take up?\nThe data frame in R takes up 2 orders of magnitude of memory than the table which just points to the object in SQL.\n\ncarriers |&gt;\n  object.size() |&gt;\n  print(units = \"Kb\")\n\n5.2 Kb\n\ncarriers_tibble |&gt;\n  object.size() |&gt;\n  print(units = \"Kb\")\n\n234.8 Kb"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#what-is-sql-structured-query-language",
    "href": "slides/2024-01-09-clauses.html#what-is-sql-structured-query-language",
    "title": "SQL clauses",
    "section": "What is SQL (Structured Query Language) ?",
    "text": "What is SQL (Structured Query Language) ?\n\nSQL is a programming language for working with relational databases.\nSQL has been around since the 1970s, but has, unfortunately, many different dialects.\nTo connect to the Smith and mdsr databases (via R and DBeaver), we will use MySQL.\nTo connect to DuckDB, we will use the dialect native to DuckDB."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql",
    "href": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql",
    "title": "SQL clauses",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\nThe function dbListTables() in the DBI package will tell us what tables exist in the airlines database.\n\nDBI::dbListTables(con_air)\n\n[1] \"airports\" \"carriers\" \"flights\"  \"planes\"  \n\nflights &lt;- dplyr::tbl(con_air, \"flights\")\ncarriers &lt;- dplyr::tbl(con_air, \"carriers\")"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql-1",
    "href": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql-1",
    "title": "SQL clauses",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\n\nOver what years is the flights data taken?\n\n\nyrs &lt;- flights |&gt;\n  summarize(min_year = min(year), max_year = max(year))\n\nyrs\n\n# Source:   SQL [1 x 2]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  min_year max_year\n     &lt;int&gt;    &lt;int&gt;\n1     2010     2017"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql-2",
    "href": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql-2",
    "title": "SQL clauses",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\nBecause flights is not actually a data.frame in R (but instead a tbl in SQL), the work that was done above was actually performed in SQL. To see the SQL code, we can use the function show_query.\n\ndplyr::show_query(yrs)\n\n&lt;SQL&gt;\nSELECT MIN(`year`) AS `min_year`, MAX(`year`) AS `max_year`\nFROM `flights`"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql-3",
    "href": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql-3",
    "title": "SQL clauses",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\n\nCreate a data set containing only flights between LAX and BOS in 2012.\n\n\nla_bos &lt;- flights |&gt;\n  filter(year == 2012 & ((origin == \"LAX\" & dest == \"BOS\") | \n           (origin == \"BOS\" & dest == \"LAX\"))) \n\ndplyr::show_query(la_bos)\n\n&lt;SQL&gt;\nSELECT *\nFROM `flights`\nWHERE (`year` = 2012.0 AND ((`origin` = 'LAX' AND `dest` = 'BOS') OR (`origin` = 'BOS' AND `dest` = 'LAX')))"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql-4",
    "href": "slides/2024-01-09-clauses.html#translating-dplyr-code-into-sql-4",
    "title": "SQL clauses",
    "section": "1. Translating dplyr code into SQL",
    "text": "1. Translating dplyr code into SQL\n\ndbplyr doesn’t translate every R command into SQL.\nSQL is not a statistical software and doesn’t, for example, have a mechanism for creating data visualizations.\ntrack which R commands are connected to SQL at the dbplyr reference sheet."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#sql-queries-via-the-dbi-package",
    "href": "slides/2024-01-09-clauses.html#sql-queries-via-the-dbi-package",
    "title": "SQL clauses",
    "section": "2. SQL queries via the DBI package",
    "text": "2. SQL queries via the DBI package\n\nLook at the first few rows of the flights data.\n\n\nDBI::dbGetQuery(con_air,\n                \"SELECT * FROM flights LIMIT 8;\")\n\n  year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n1 2010    10   1        1           2100       181      159           2320\n2 2010    10   1        1           1920       281      230           2214\n3 2010    10   1        3           2355         8      339            334\n4 2010    10   1        5           2200       125       41           2249\n5 2010    10   1        7           2245        82      104           2347\n6 2010    10   1        7             10        -3      451            500\n7 2010    10   1        7           2150       137      139           2337\n8 2010    10   1        8             15        -7      538            537\n  arr_delay carrier tailnum flight origin dest air_time distance cancelled\n1       159      XE  N11137   2558    EWR  OMA      162     1133         0\n2       256      B6  N659JB    562    FLL  SWF      131     1119         0\n3         5      B6  N563JB    701    JFK  SJU      196     1597         0\n4       112      XE  N16559   5982    IAD  BNA       82      542         0\n5        77      OO  N908SW   6433    LAX  FAT       37      209         0\n6        -9      AA  N3FRAA    700    LAX  DFW      150     1235         0\n7       122      DL  N347NW   1752    ATL  IAD       70      533         0\n8         1      CO  N73283   1740    SMF  IAH      193     1609         0\n  diverted hour minute           time_hour\n1        0   21      0 2010-10-01 21:00:00\n2        0   19     20 2010-10-01 19:20:00\n3        0   23     55 2010-10-01 23:55:00\n4        0   22      0 2010-10-01 22:00:00\n5        0   22     45 2010-10-01 22:45:00\n6        0    0     10 2010-10-01 00:10:00\n7        0   21     50 2010-10-01 21:50:00\n8        0    0     15 2010-10-01 00:15:00"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#sql-queries-via-the-dbi-package-1",
    "href": "slides/2024-01-09-clauses.html#sql-queries-via-the-dbi-package-1",
    "title": "SQL clauses",
    "section": "2. SQL queries via the DBI package",
    "text": "2. SQL queries via the DBI package\n\nHow many flights per year are in the flights table?\n\n\nDBI::dbGetQuery(con_air, \n  \"SELECT year, count(*) AS num_flights FROM flights GROUP BY year ORDER BY num_flights;\")\n\n  year num_flights\n1 2016     5617658\n2 2017     5674621\n3 2015     5819079\n4 2014     5819811\n5 2011     6085281\n6 2012     6096762\n7 2013     6369482\n8 2010     6450117"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#direct-sql-queries-via-sql-chunks",
    "href": "slides/2024-01-09-clauses.html#direct-sql-queries-via-sql-chunks",
    "title": "SQL clauses",
    "section": "3. Direct SQL queries via sql chunks",
    "text": "3. Direct SQL queries via sql chunks\nSQL queries can be written directly inside a sql chunk in RStudio.\n\n```{sql}\n#| connection: con_air\n\nSELECT * FROM flights LIMIT 8;\n```\n\n\n\n\n8 records\n\n\n\n\nyear\n\n\nmonth\n\n\nday\n\n\ndep_time\n\n\nsched_dep_time\n\n\ndep_delay\n\n\narr_time\n\n\nsched_arr_time\n\n\narr_delay\n\n\ncarrier\n\n\ntailnum\n\n\nflight\n\n\norigin\n\n\ndest\n\n\nair_time\n\n\ndistance\n\n\ncancelled\n\n\ndiverted\n\n\nhour\n\n\nminute\n\n\ntime_hour\n\n\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n1\n\n\n2100\n\n\n181\n\n\n159\n\n\n2320\n\n\n159\n\n\nXE\n\n\nN11137\n\n\n2558\n\n\nEWR\n\n\nOMA\n\n\n162\n\n\n1133\n\n\n0\n\n\n0\n\n\n21\n\n\n0\n\n\n2010-10-01 21:00:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n1\n\n\n1920\n\n\n281\n\n\n230\n\n\n2214\n\n\n256\n\n\nB6\n\n\nN659JB\n\n\n562\n\n\nFLL\n\n\nSWF\n\n\n131\n\n\n1119\n\n\n0\n\n\n0\n\n\n19\n\n\n20\n\n\n2010-10-01 19:20:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n3\n\n\n2355\n\n\n8\n\n\n339\n\n\n334\n\n\n5\n\n\nB6\n\n\nN563JB\n\n\n701\n\n\nJFK\n\n\nSJU\n\n\n196\n\n\n1597\n\n\n0\n\n\n0\n\n\n23\n\n\n55\n\n\n2010-10-01 23:55:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n5\n\n\n2200\n\n\n125\n\n\n41\n\n\n2249\n\n\n112\n\n\nXE\n\n\nN16559\n\n\n5982\n\n\nIAD\n\n\nBNA\n\n\n82\n\n\n542\n\n\n0\n\n\n0\n\n\n22\n\n\n0\n\n\n2010-10-01 22:00:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n7\n\n\n2245\n\n\n82\n\n\n104\n\n\n2347\n\n\n77\n\n\nOO\n\n\nN908SW\n\n\n6433\n\n\nLAX\n\n\nFAT\n\n\n37\n\n\n209\n\n\n0\n\n\n0\n\n\n22\n\n\n45\n\n\n2010-10-01 22:45:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n7\n\n\n10\n\n\n-3\n\n\n451\n\n\n500\n\n\n-9\n\n\nAA\n\n\nN3FRAA\n\n\n700\n\n\nLAX\n\n\nDFW\n\n\n150\n\n\n1235\n\n\n0\n\n\n0\n\n\n0\n\n\n10\n\n\n2010-10-01 00:10:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n7\n\n\n2150\n\n\n137\n\n\n139\n\n\n2337\n\n\n122\n\n\nDL\n\n\nN347NW\n\n\n1752\n\n\nATL\n\n\nIAD\n\n\n70\n\n\n533\n\n\n0\n\n\n0\n\n\n21\n\n\n50\n\n\n2010-10-01 21:50:00\n\n\n\n\n2010\n\n\n10\n\n\n1\n\n\n8\n\n\n15\n\n\n-7\n\n\n538\n\n\n537\n\n\n1\n\n\nCO\n\n\nN73283\n\n\n1740\n\n\nSMF\n\n\nIAH\n\n\n193\n\n\n1609\n\n\n0\n\n\n0\n\n\n0\n\n\n15\n\n\n2010-10-01 00:15:00"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#direct-sql-queries-via-sql-chunks-1",
    "href": "slides/2024-01-09-clauses.html#direct-sql-queries-via-sql-chunks-1",
    "title": "SQL clauses",
    "section": "3. Direct SQL queries via sql chunks",
    "text": "3. Direct SQL queries via sql chunks\nSQL queries can be written directly inside a sql chunk in RStudio.\n\n```{sql}\n#| connection: con_air\n\nSELECT year, count(*) AS num_flights \n       FROM flights \n       GROUP BY year \n       ORDER BY num_flights;\n```\n\n\n\n\n8 records\n\n\n\n\nyear\n\n\nnum_flights\n\n\n\n\n\n\n2016\n\n\n5617658\n\n\n\n\n2017\n\n\n5674621\n\n\n\n\n2015\n\n\n5819079\n\n\n\n\n2014\n\n\n5819811\n\n\n\n\n2011\n\n\n6085281\n\n\n\n\n2012\n\n\n6096762\n\n\n\n\n2013\n\n\n6369482\n\n\n\n\n2010\n\n\n6450117"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#good-practice",
    "href": "slides/2024-01-09-clauses.html#good-practice",
    "title": "SQL clauses",
    "section": "Good practice",
    "text": "Good practice\nAlways a good idea to terminate the SQL connection when you are done with it.\n\ndbDisconnect(con_taxi, shutdown = TRUE)"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#steps-for-weekly-homework",
    "href": "slides/2024-01-09-clauses.html#steps-for-weekly-homework",
    "title": "SQL clauses",
    "section": "Steps for weekly homework",
    "text": "Steps for weekly homework\n\nReceive a link to the new assignment (clicking on the link will create a new private repo)\n\nUse R Studio\n\nNew Project, version control, Git\n\nClone the repo using SSH\n\n\nCreate a new file sds261-lab#-lname-fname.qmd. (If the .qmd file already exists, rename the file to sds261-lab#-lname-fname.qmd.)\nDo the assignment\n\ncommit and push after every problem\n\n\nFor work done in DBeaver (.sql files), use the same naming convention: sds261-lab#-lname-fname.sql.\nAll necessary files must be in the same folder (e.g., data, .sql files, etc.)"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#show-tables",
    "href": "slides/2024-01-09-clauses.html#show-tables",
    "title": "SQL clauses",
    "section": "SHOW TABLES",
    "text": "SHOW TABLES\nThere is only one table in the nyctaxi database. It is called yellow_old.\n\n```{sql}\n#| connection: con_taxi\n\nSHOW TABLES;\n```\n\n\n\n\n1 records\n\n\n\n\nTables_in_nyctaxi\n\n\n\n\n\n\nyellow_old"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#describe-tables",
    "href": "slides/2024-01-09-clauses.html#describe-tables",
    "title": "SQL clauses",
    "section": "DESCRIBE tables",
    "text": "DESCRIBE tables\nStill using a {sql} chunk. The DESCRIBE command shows the 18 field names (variables) in the yellow_old table. Some of the variables are characters (text) and some are numeric (either double or bigint)\n\nDESCRIBE yellow_old;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nField\n\n\nType\n\n\nNull\n\n\nKey\n\n\nDefault\n\n\nExtra\n\n\n\n\n\n\nvendor_id\n\n\ntext\n\n\nYES\n\n\n\n\n\n\n\n\n\n\npickup_datetime\n\n\ntext\n\n\nYES\n\n\n\n\n\n\n\n\n\n\ndropoff_datetime\n\n\ntext\n\n\nYES\n\n\n\n\n\n\n\n\n\n\npassenger_count\n\n\nbigint(20)\n\n\nYES\n\n\n\n\n\n\n\n\n\n\ntrip_distance\n\n\ndouble\n\n\nYES\n\n\n\n\n\n\n\n\n\n\npickup_longitude\n\n\ndouble\n\n\nYES\n\n\n\n\n\n\n\n\n\n\npickup_latitude\n\n\ndouble\n\n\nYES\n\n\n\n\n\n\n\n\n\n\nrate_code\n\n\nbigint(20)\n\n\nYES\n\n\n\n\n\n\n\n\n\n\nstore_and_fwd_flag\n\n\ntext\n\n\nYES\n\n\n\n\n\n\n\n\n\n\ndropoff_longitude\n\n\ndouble\n\n\nYES"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#order-of-clauses",
    "href": "slides/2024-01-09-clauses.html#order-of-clauses",
    "title": "SQL clauses",
    "section": "Order of clauses",
    "text": "Order of clauses\nQueries in SQL start with the SELECT keyword and consist of several clauses, which must be written in the following order:\n\n\n\nSELECT\nFROM\nJOIN\nWHERE\n\n\n\nGROUP BY\nHAVING\nORDER BY\nLIMIT\n\n\n\nThe clauses are similar to data wrangling verbs in R."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#select-from",
    "href": "slides/2024-01-09-clauses.html#select-from",
    "title": "SQL clauses",
    "section": "SELECT … FROM",
    "text": "SELECT … FROM\n\nstart with a SELECT, include a corresponding FROM\ncolumns may be specified or * returns every column\n\nThe shortest SQL query is the following SELECT command. Do not run this command!!! The yellow_old table has 15 million rows, and we do not want to look at them simultaneously.\n\nDO NOT RUN:  SELECT * FROM yellow_old;"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#select-from-1",
    "href": "slides/2024-01-09-clauses.html#select-from-1",
    "title": "SQL clauses",
    "section": "SELECT … FROM",
    "text": "SELECT … FROM\nMuch better for big tables:\n\nSELECT * FROM yellow_old LIMIT 0, 14;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nvendor_id\n\n\npickup_datetime\n\n\ndropoff_datetime\n\n\npassenger_count\n\n\ntrip_distance\n\n\npickup_longitude\n\n\npickup_latitude\n\n\nrate_code\n\n\nstore_and_fwd_flag\n\n\ndropoff_longitude\n\n\ndropoff_latitude\n\n\npayment_type\n\n\nfare_amount\n\n\nsurcharge\n\n\nmta_tax\n\n\ntip_amount\n\n\ntolls_amount\n\n\ntotal_amount\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCMT\n\n\n2014-03-01 01:07:38\n\n\n2014-03-01 01:16:26\n\n\n1\n\n\n2.0\n\n\n-74.0\n\n\n40.7\n\n\n1\n\n\nN\n\n\n-73.9\n\n\n40.7\n\n\nCRD\n\n\n9.0\n\n\n0.5\n\n\n0.5\n\n\n2.0\n\n\n0\n\n\n12.0\n\n\n\n\nCMT\n\n\n2014-03-01 01:08:03\n\n\n2014-03-01 01:12:51\n\n\n2\n\n\n1.2\n\n\n-74.0\n\n\n40.7\n\n\n1\n\n\nN\n\n\n-74.0\n\n\n40.7\n\n\nCRD\n\n\n6.0\n\n\n0.5\n\n\n0.5\n\n\n1.0\n\n\n0\n\n\n8.0\n\n\n\n\nCMT\n\n\n2014-03-01 01:08:51\n\n\n2014-03-01 01:13:18\n\n\n3\n\n\n0.5\n\n\n-73.9\n\n\n40.7\n\n\n1\n\n\nN\n\n\n-74.0\n\n\n40.7\n\n\nCRD\n\n\n5.0\n\n\n0.5\n\n\n0.5\n\n\n1.2\n\n\n0\n\n\n7.2\n\n\n\n\nCMT\n\n\n2014-03-01 01:09:20\n\n\n2014-03-01 01:24:18\n\n\n3\n\n\n3.5\n\n\n-74.0\n\n\n40.7\n\n\n1\n\n\nN\n\n\n-74.0\n\n\n40.8\n\n\nCRD\n\n\n14.0\n\n\n0.5\n\n\n0.5\n\n\n3.0\n\n\n0\n\n\n18.0\n\n\n\n\nCMT\n\n\n2014-03-01 01:09:46\n\n\n2014-03-01 01:22:34\n\n\n1\n\n\n1.8\n\n\n-74.0\n\n\n40.7\n\n\n1\n\n\nN\n\n\n-74.0\n\n\n40.7\n\n\nCRD\n\n\n10.5\n\n\n0.5\n\n\n0.5\n\n\n1.0\n\n\n0\n\n\n12.5\n\n\n\n\nCMT\n\n\n2014-03-01 01:12:41\n\n\n2014-03-01 01:15:38\n\n\n1\n\n\n0.5\n\n\n-74.0\n\n\n40.7\n\n\n1\n\n\nN\n\n\n-74.0\n\n\n40.7\n\n\nCRD\n\n\n4.0\n\n\n0.5\n\n\n0.5\n\n\n0.5\n\n\n0\n\n\n5.5\n\n\n\n\nCMT\n\n\n2014-03-01 01:12:11\n\n\n2014-03-01 01:27:38\n\n\n2\n\n\n3.7\n\n\n-74.0\n\n\n40.8\n\n\n1\n\n\nN\n\n\n-74.0\n\n\n40.7\n\n\nCRD\n\n\n14.5\n\n\n0.5\n\n\n0.5\n\n\n3.1\n\n\n0\n\n\n18.6\n\n\n\n\nCMT\n\n\n2014-03-01 01:13:55\n\n\n2014-03-01 01:34:54\n\n\n1\n\n\n5.4\n\n\n-74.0\n\n\n40.8\n\n\n1\n\n\nN\n\n\n-74.0\n\n\n40.7\n\n\nCRD\n\n\n20.0\n\n\n0.5\n\n\n0.5\n\n\n3.0\n\n\n0\n\n\n24.0\n\n\n\n\nCMT\n\n\n2014-03-01 01:14:06\n\n\n2014-03-01 01:28:25\n\n\n1\n\n\n3.5\n\n\n-74.0\n\n\n40.7\n\n\n1\n\n\nN\n\n\n-74.0\n\n\n40.8\n\n\nCRD\n\n\n13.5\n\n\n0.5\n\n\n0.5\n\n\n2.9\n\n\n0\n\n\n17.4"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#select-from-2",
    "href": "slides/2024-01-09-clauses.html#select-from-2",
    "title": "SQL clauses",
    "section": "SELECT … FROM",
    "text": "SELECT … FROM\nHow do we know how many taxi rides are recorded? Two different ways of counting the rows:\n\nSELECT COUNT(*), SUM(1) FROM yellow_old LIMIT 0, 14;\n\n\n\n\n1 records\n\n\n\n\nCOUNT(*)\n\n\nSUM(1)\n\n\n\n\n\n\n15428128\n\n\n15428128\n\n\n\n\n\n\n\nYikes, more than 15 million taxi rides!"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#select-from-3",
    "href": "slides/2024-01-09-clauses.html#select-from-3",
    "title": "SQL clauses",
    "section": "SELECT … FROM",
    "text": "SELECT … FROM\nWhat is the length of a taxi ride (in time)? … unfortunately, pickup_datetime and dropoff_datetime are saved as character strings instead of in DateTime format.\n\nSELECT\n      pickup_datetime, dropoff_datetime,\n      STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\") AS pickup,\n      STR_TO_DATE(dropoff_datetime, \"%Y-%m-%d %T\") AS dropoff\n   FROM yellow_old\n   LIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\npickup_datetime\n\n\ndropoff_datetime\n\n\npickup\n\n\ndropoff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2014-03-01 01:07:38\n\n\n2014-03-01 01:16:26\n\n\n2014-03-01 01:07:38\n\n\n2014-03-01 01:16:26\n\n\n\n\n2014-03-01 01:08:03\n\n\n2014-03-01 01:12:51\n\n\n2014-03-01 01:08:03\n\n\n2014-03-01 01:12:51\n\n\n\n\n2014-03-01 01:08:51\n\n\n2014-03-01 01:13:18\n\n\n2014-03-01 01:08:51\n\n\n2014-03-01 01:13:18\n\n\n\n\n2014-03-01 01:09:20\n\n\n2014-03-01 01:24:18\n\n\n2014-03-01 01:09:20\n\n\n2014-03-01 01:24:18\n\n\n\n\n2014-03-01 01:09:46\n\n\n2014-03-01 01:22:34\n\n\n2014-03-01 01:09:46\n\n\n2014-03-01 01:22:34\n\n\n\n\n2014-03-01 01:12:41\n\n\n2014-03-01 01:15:38\n\n\n2014-03-01 01:12:41\n\n\n2014-03-01 01:15:38\n\n\n\n\n2014-03-01 01:12:11\n\n\n2014-03-01 01:27:38\n\n\n2014-03-01 01:12:11\n\n\n2014-03-01 01:27:38\n\n\n\n\n2014-03-01 01:13:55\n\n\n2014-03-01 01:34:54\n\n\n2014-03-01 01:13:55\n\n\n2014-03-01 01:34:54\n\n\n\n\n2014-03-01 01:14:06\n\n\n2014-03-01 01:28:25\n\n\n2014-03-01 01:14:06\n\n\n2014-03-01 01:28:25"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#select-from-4",
    "href": "slides/2024-01-09-clauses.html#select-from-4",
    "title": "SQL clauses",
    "section": "SELECT … FROM",
    "text": "SELECT … FROM\nWhy can’t we find the difference between the new two time variables?\n\nSELECT\n      pickup_datetime, dropoff_datetime,\n      STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\") AS pickup,\n      STR_TO_DATE(dropoff_datetime, \"%Y-%m-%d %T\") AS dropoff,\n      TIMEDIFF(pickup, dropoff) AS length_time\n   FROM yellow_old\n   LIMIT 0, 10;\n\nError: Unknown column 'pickup' in 'field list' [1054]"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#select-from-5",
    "href": "slides/2024-01-09-clauses.html#select-from-5",
    "title": "SQL clauses",
    "section": "SELECT … FROM",
    "text": "SELECT … FROM\nSolution 1: two layers of SELECT\n\nfirst SELECT (i.e., inside) layer creates the new variables\nsecond SELECT (i.e., outside) layer subtracts the two times\n\n\nSELECT \n   pickup,\n   dropoff, \n   TIMEDIFF(pickup, dropoff) AS length_time \nFROM (\n   SELECT\n      STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\") AS pickup,\n      STR_TO_DATE(dropoff_datetime, \"%Y-%m-%d %T\") AS dropoff\n   FROM yellow_old)\n   AS subquery_table\nLIMIT 0, 20;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\npickup\n\n\ndropoff\n\n\nlength_time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2014-03-01 01:07:38\n\n\n2014-03-01 01:16:26\n\n\n00:08:48\n\n\n\n\n2014-03-01 01:08:03\n\n\n2014-03-01 01:12:51\n\n\n00:04:48\n\n\n\n\n2014-03-01 01:08:51\n\n\n2014-03-01 01:13:18\n\n\n00:04:27\n\n\n\n\n2014-03-01 01:09:20\n\n\n2014-03-01 01:24:18\n\n\n00:14:58\n\n\n\n\n2014-03-01 01:09:46\n\n\n2014-03-01 01:22:34\n\n\n00:12:48\n\n\n\n\n2014-03-01 01:12:41\n\n\n2014-03-01 01:15:38\n\n\n00:02:57\n\n\n\n\n2014-03-01 01:12:11\n\n\n2014-03-01 01:27:38\n\n\n00:15:27\n\n\n\n\n2014-03-01 01:13:55\n\n\n2014-03-01 01:34:54\n\n\n00:20:59\n\n\n\n\n2014-03-01 01:14:06\n\n\n2014-03-01 01:28:25\n\n\n00:14:19"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#select-from-6",
    "href": "slides/2024-01-09-clauses.html#select-from-6",
    "title": "SQL clauses",
    "section": "SELECT … FROM",
    "text": "SELECT … FROM\nSolution 2: apply the STR_TO_DATE() function inside the TIMEDIFF() function\n\nSELECT \n   pickup_datetime,\n   dropoff_datetime, \n   TIMEDIFF(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\"), \n            STR_TO_DATE(dropoff_datetime, \"%Y-%m-%d %T\")) AS length_time \nFROM yellow_old\nLIMIT 0, 20;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\npickup_datetime\n\n\ndropoff_datetime\n\n\nlength_time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2014-03-01 01:07:38\n\n\n2014-03-01 01:16:26\n\n\n00:08:48\n\n\n\n\n2014-03-01 01:08:03\n\n\n2014-03-01 01:12:51\n\n\n00:04:48\n\n\n\n\n2014-03-01 01:08:51\n\n\n2014-03-01 01:13:18\n\n\n00:04:27\n\n\n\n\n2014-03-01 01:09:20\n\n\n2014-03-01 01:24:18\n\n\n00:14:58\n\n\n\n\n2014-03-01 01:09:46\n\n\n2014-03-01 01:22:34\n\n\n00:12:48\n\n\n\n\n2014-03-01 01:12:41\n\n\n2014-03-01 01:15:38\n\n\n00:02:57\n\n\n\n\n2014-03-01 01:12:11\n\n\n2014-03-01 01:27:38\n\n\n00:15:27\n\n\n\n\n2014-03-01 01:13:55\n\n\n2014-03-01 01:34:54\n\n\n00:20:59\n\n\n\n\n2014-03-01 01:14:06\n\n\n2014-03-01 01:28:25\n\n\n00:14:19"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#important-note",
    "href": "slides/2024-01-09-clauses.html#important-note",
    "title": "SQL clauses",
    "section": "Important note:",
    "text": "Important note:\nThere is a distinction between clauses that operate on the variables of the original table versus those that operate on the variables of the results set.\npickup_datetime and dropoff_datetime are columns in the original table - they are written to disk on the SQL server.\npickup, dropoff, and length_time exist only in the results set, which is passed from the server (SQL server) to the client (e.g., RStudio or DBeaver) and is not written to disk."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#where",
    "href": "slides/2024-01-09-clauses.html#where",
    "title": "SQL clauses",
    "section": "WHERE",
    "text": "WHERE\nThe WHERE clause is analogous to the filter() function in dplyr. However, keep in mind that there are two SQL commands that resemble the dplyr filter() function. WHERE operates on the original data in the table and HAVING operates on the result set."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#where-1",
    "href": "slides/2024-01-09-clauses.html#where-1",
    "title": "SQL clauses",
    "section": "WHERE",
    "text": "WHERE\nWhat was the fare for those taxi rides where the tip_amount was more than $10 and the person used cash?\nNote that in SQL the equality logical is = and in R the equality logical is ==.\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE tip_amount &gt; 10\n   AND payment_type = \"CSH\"\nLIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\npayment_type\n\n\nfare_amount\n\n\ntip_amount\n\n\ntotal_amount\n\n\n\n\n\n\nCSH\n\n\n65.5\n\n\n15.3\n\n\n91.8\n\n\n\n\nCSH\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCSH\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCSH\n\n\n55.0\n\n\n16.2\n\n\n81.2\n\n\n\n\nCSH\n\n\n71.5\n\n\n20.0\n\n\n103.5\n\n\n\n\nCSH\n\n\n70.0\n\n\n16.2\n\n\n97.1\n\n\n\n\nCSH\n\n\n95.0\n\n\n21.9\n\n\n131.2\n\n\n\n\nCSH\n\n\n62.5\n\n\n15.5\n\n\n93.0\n\n\n\n\nCSH\n\n\n66.0\n\n\n15.0\n\n\n90.0\n\n\n\n\nCSH\n\n\n65.0\n\n\n13.2\n\n\n79.2"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#where-2",
    "href": "slides/2024-01-09-clauses.html#where-2",
    "title": "SQL clauses",
    "section": "WHERE",
    "text": "WHERE\nBETWEEN can be used to specify a range of values for a numeric value. BETWEEN is inclusive.\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE tip_amount BETWEEN 10 and 12\n   AND payment_type = \"CSH\"\nLIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\npayment_type\n\n\nfare_amount\n\n\ntip_amount\n\n\ntotal_amount\n\n\n\n\n\n\nCSH\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCSH\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCSH\n\n\n88.0\n\n\n10.0\n\n\n107.0\n\n\n\n\nCSH\n\n\n72.0\n\n\n10.0\n\n\n94.0\n\n\n\n\nCSH\n\n\n64.5\n\n\n10.0\n\n\n85.5\n\n\n\n\nCSH\n\n\n66.0\n\n\n12.0\n\n\n93.0\n\n\n\n\nCSH\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCSH\n\n\n69.0\n\n\n10.0\n\n\n88.0\n\n\n\n\nCSH\n\n\n90.0\n\n\n10.0\n\n\n100.0\n\n\n\n\nCSH\n\n\n52.0\n\n\n11.6\n\n\n69.4"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#where-3",
    "href": "slides/2024-01-09-clauses.html#where-3",
    "title": "SQL clauses",
    "section": "WHERE",
    "text": "WHERE\nIN is similar to the dplyr %in% function which specifies distinct values for the variable.\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE tip_amount IN (10, 12)\n   AND payment_type = \"CSH\"\nLIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\npayment_type\n\n\nfare_amount\n\n\ntip_amount\n\n\ntotal_amount\n\n\n\n\n\n\nCSH\n\n\n88.0\n\n\n10\n\n\n107.0\n\n\n\n\nCSH\n\n\n72.0\n\n\n10\n\n\n94.0\n\n\n\n\nCSH\n\n\n64.5\n\n\n10\n\n\n85.5\n\n\n\n\nCSH\n\n\n66.0\n\n\n12\n\n\n93.0\n\n\n\n\nCSH\n\n\n69.0\n\n\n10\n\n\n88.0\n\n\n\n\nCSH\n\n\n90.0\n\n\n10\n\n\n100.0\n\n\n\n\nCSH\n\n\n74.5\n\n\n10\n\n\n90.3\n\n\n\n\nCSH\n\n\n89.0\n\n\n10\n\n\n118.1\n\n\n\n\nCSH\n\n\n52.0\n\n\n10\n\n\n67.8\n\n\n\n\nCSH\n\n\n66.0\n\n\n12\n\n\n90.0"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#where-4",
    "href": "slides/2024-01-09-clauses.html#where-4",
    "title": "SQL clauses",
    "section": "WHERE",
    "text": "WHERE\nAND takes precedent over OR in the order of operations, when there are no parentheses.\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE tip_amount BETWEEN 10 and 12 OR \n      total_amount BETWEEN 100 and 112 AND \n      payment_type = \"CSH\"\nLIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\npayment_type\n\n\nfare_amount\n\n\ntip_amount\n\n\ntotal_amount\n\n\n\n\n\n\nCRD\n\n\n52.0\n\n\n10.5\n\n\n63.0\n\n\n\n\nCRD\n\n\n35.0\n\n\n10.2\n\n\n51.0\n\n\n\n\nCRD\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCRD\n\n\n30.5\n\n\n10.8\n\n\n47.2\n\n\n\n\nCRD\n\n\n52.0\n\n\n10.5\n\n\n63.0\n\n\n\n\nCRD\n\n\n52.0\n\n\n10.5\n\n\n63.0\n\n\n\n\nCRD\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCRD\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCRD\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCRD\n\n\n52.0\n\n\n11.6\n\n\n69.4"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#where-5",
    "href": "slides/2024-01-09-clauses.html#where-5",
    "title": "SQL clauses",
    "section": "WHERE",
    "text": "WHERE\nParentheses take precedent over AND and OR.\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE (tip_amount BETWEEN 10 and 12 OR \n      total_amount BETWEEN 100 and 112 ) AND \n      payment_type = \"CSH\"\nLIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\npayment_type\n\n\nfare_amount\n\n\ntip_amount\n\n\ntotal_amount\n\n\n\n\n\n\nCSH\n\n\n107.0\n\n\n0.0\n\n\n108.0\n\n\n\n\nCSH\n\n\n92.5\n\n\n0.0\n\n\n103.5\n\n\n\n\nCSH\n\n\n99.5\n\n\n0.0\n\n\n105.3\n\n\n\n\nCSH\n\n\n92.0\n\n\n0.0\n\n\n106.3\n\n\n\n\nCSH\n\n\n103.0\n\n\n0.0\n\n\n109.3\n\n\n\n\nCSH\n\n\n107.0\n\n\n0.0\n\n\n107.0\n\n\n\n\nCSH\n\n\n104.5\n\n\n0.0\n\n\n105.5\n\n\n\n\nCSH\n\n\n112.0\n\n\n0.0\n\n\n112.0\n\n\n\n\nCSH\n\n\n52.0\n\n\n11.6\n\n\n69.4\n\n\n\n\nCSH\n\n\n52.0\n\n\n11.6\n\n\n69.4"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#group-by",
    "href": "slides/2024-01-09-clauses.html#group-by",
    "title": "SQL clauses",
    "section": "GROUP BY",
    "text": "GROUP BY\nThe GROUP BY clause will direct SQL to carry out the query separately for each category in the grouped variable.\n\naggregate functions include COUNT(), SUM(), MAX(), MIN(), and AVG().\n\n\nSELECT COUNT(*) AS num_transactions, \n       SUM(1) AS num_transactions_also,\n       SUM(2) AS double_transactions,\n       payment_type \nFROM yellow_old\nWHERE tip_amount BETWEEN 10 and 20\nGROUP BY payment_type;\n\n\n\n\n5 records\n\n\n\n\nnum_transactions\n\n\nnum_transactions_also\n\n\ndouble_transactions\n\n\npayment_type\n\n\n\n\n\n\n213872\n\n\n213872\n\n\n427744\n\n\nCRD\n\n\n\n\n78\n\n\n78\n\n\n156\n\n\nCSH\n\n\n\n\n3\n\n\n3\n\n\n6\n\n\nDIS\n\n\n\n\n7\n\n\n7\n\n\n14\n\n\nNOC\n\n\n\n\n609\n\n\n609\n\n\n1218\n\n\nUNK"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#group-by-1",
    "href": "slides/2024-01-09-clauses.html#group-by-1",
    "title": "SQL clauses",
    "section": "GROUP BY",
    "text": "GROUP BY\nFor those people who tipped between $10 and $20, what was the lowest and highest fare for each of the types of payments?\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type \nFROM yellow_old\nWHERE tip_amount BETWEEN 10 and 20\nGROUP BY payment_type;\n\n\n\n\n5 records\n\n\n\n\nnum_transactions\n\n\nlowest_fare\n\n\nhighest_fare\n\n\npayment_type\n\n\n\n\n\n\n213872\n\n\n0.0\n\n\n370.0\n\n\nCRD\n\n\n\n\n78\n\n\n52.0\n\n\n102.0\n\n\nCSH\n\n\n\n\n3\n\n\n52.0\n\n\n79.5\n\n\nDIS\n\n\n\n\n7\n\n\n58.0\n\n\n94.0\n\n\nNOC\n\n\n\n\n609\n\n\n4.5\n\n\n147.0\n\n\nUNK"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#group-by-2",
    "href": "slides/2024-01-09-clauses.html#group-by-2",
    "title": "SQL clauses",
    "section": "GROUP BY",
    "text": "GROUP BY\nGROUP BY will work applied to multiple columns.\nWhat is wday?\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nnum_transactions\n\n\nlowest_fare\n\n\nhighest_fare\n\n\npayment_type\n\n\nwday\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n1247397\n\n\n2.5\n\n\n477\n\n\nCRD\n\n\nFriday\n\n\n\n\n1278362\n\n\n-612.4\n\n\n500\n\n\nCRD\n\n\nMonday\n\n\n\n\n1533796\n\n\n2.5\n\n\n420\n\n\nCRD\n\n\nSaturday\n\n\n\n\n1324394\n\n\n2.5\n\n\n480\n\n\nCRD\n\n\nSunday\n\n\n\n\n1258098\n\n\n2.5\n\n\n500\n\n\nCRD\n\n\nThursday\n\n\n\n\n1121081\n\n\n2.5\n\n\n500\n\n\nCRD\n\n\nTuesday\n\n\n\n\n1192892\n\n\n2.5\n\n\n400\n\n\nCRD\n\n\nWednesday\n\n\n\n\n860920\n\n\n2.5\n\n\n444\n\n\nCSH\n\n\nFriday\n\n\n\n\n918653\n\n\n0.0\n\n\n873\n\n\nCSH\n\n\nMonday"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#order-by",
    "href": "slides/2024-01-09-clauses.html#order-by",
    "title": "SQL clauses",
    "section": "ORDER BY",
    "text": "ORDER BY\nORDER BY allows us to look at interesting aspects of the data by sorting the data.\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday\nORDER BY lowest_fare ASC;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nnum_transactions\n\n\nlowest_fare\n\n\nhighest_fare\n\n\npayment_type\n\n\nwday\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n1278362\n\n\n-612.4\n\n\n500\n\n\nCRD\n\n\nMonday\n\n\n\n\n918653\n\n\n0.0\n\n\n873\n\n\nCSH\n\n\nMonday\n\n\n\n\n5440\n\n\n0.0\n\n\n950\n\n\nNOC\n\n\nMonday\n\n\n\n\n1537\n\n\n0.0\n\n\n102\n\n\nDIS\n\n\nMonday\n\n\n\n\n1533796\n\n\n2.5\n\n\n420\n\n\nCRD\n\n\nSaturday\n\n\n\n\n1121081\n\n\n2.5\n\n\n500\n\n\nCRD\n\n\nTuesday\n\n\n\n\n1192892\n\n\n2.5\n\n\n400\n\n\nCRD\n\n\nWednesday\n\n\n\n\n1258098\n\n\n2.5\n\n\n500\n\n\nCRD\n\n\nThursday\n\n\n\n\n1247397\n\n\n2.5\n\n\n477\n\n\nCRD\n\n\nFriday\n\n\n\n\n\n\n\nWHAT?!?!! How in the world was one of the fares -$612.40?"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#order-by-1",
    "href": "slides/2024-01-09-clauses.html#order-by-1",
    "title": "SQL clauses",
    "section": "ORDER BY",
    "text": "ORDER BY\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday\nORDER BY highest_fare DESC;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nnum_transactions\n\n\nlowest_fare\n\n\nhighest_fare\n\n\npayment_type\n\n\nwday\n\n\n\n\n\n\n5440\n\n\n0.0\n\n\n950\n\n\nNOC\n\n\nMonday\n\n\n\n\n918653\n\n\n0.0\n\n\n873\n\n\nCSH\n\n\nMonday\n\n\n\n\n1278362\n\n\n-612.4\n\n\n500\n\n\nCRD\n\n\nMonday\n\n\n\n\n1121081\n\n\n2.5\n\n\n500\n\n\nCRD\n\n\nTuesday\n\n\n\n\n1258098\n\n\n2.5\n\n\n500\n\n\nCRD\n\n\nThursday\n\n\n\n\n1324394\n\n\n2.5\n\n\n480\n\n\nCRD\n\n\nSunday\n\n\n\n\n1247397\n\n\n2.5\n\n\n477\n\n\nCRD\n\n\nFriday\n\n\n\n\n1222\n\n\n2.5\n\n\n475\n\n\nDIS\n\n\nTuesday\n\n\n\n\n813813\n\n\n2.5\n\n\n475\n\n\nCSH\n\n\nThursday\n\n\n\n\n860920\n\n\n2.5\n\n\n444\n\n\nCSH\n\n\nFriday\n\n\n\n\n\n\n\n$950 is a lot to pay for a cab ride! But in NYC, I’d believe it."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#order-by-2",
    "href": "slides/2024-01-09-clauses.html#order-by-2",
    "title": "SQL clauses",
    "section": "ORDER BY",
    "text": "ORDER BY\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday\nORDER BY wday, payment_type;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nnum_transactions\n\n\nlowest_fare\n\n\nhighest_fare\n\n\npayment_type\n\n\nwday\n\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n1247397\n\n\n2.5\n\n\n477\n\n\nCRD\n\n\nFriday\n\n\n\n\n860920\n\n\n2.5\n\n\n444\n\n\nCSH\n\n\nFriday\n\n\n\n\n1592\n\n\n2.5\n\n\n255\n\n\nDIS\n\n\nFriday\n\n\n\n\n5252\n\n\n2.5\n\n\n229\n\n\nNOC\n\n\nFriday\n\n\n\n\n10131\n\n\n2.5\n\n\n130\n\n\nUNK\n\n\nFriday\n\n\n\n\n1278362\n\n\n-612.4\n\n\n500\n\n\nCRD\n\n\nMonday\n\n\n\n\n918653\n\n\n0.0\n\n\n873\n\n\nCSH\n\n\nMonday\n\n\n\n\n1537\n\n\n0.0\n\n\n102\n\n\nDIS\n\n\nMonday\n\n\n\n\n5440\n\n\n0.0\n\n\n950\n\n\nNOC\n\n\nMonday"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#order-by-3",
    "href": "slides/2024-01-09-clauses.html#order-by-3",
    "title": "SQL clauses",
    "section": "ORDER BY",
    "text": "ORDER BY\n\n\n\nNote that both GROUP BY and ORDER BY evaluate the data after it has been retrieved. Therefore, the functions operate on the results set, not the original rows of the data.\n\n\n\nWe are able to GROUP BY and ORDER BY on the new variables we had created, wday."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#having",
    "href": "slides/2024-01-09-clauses.html#having",
    "title": "SQL clauses",
    "section": "HAVING",
    "text": "HAVING\nRecall that WHERE acts only on the original data. If we are interested in rides that took place on Friday, we need to use the derived variable wday instead of the raw variable pickup_datetime. Fortunately, HAVING works on the results set."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#having-1",
    "href": "slides/2024-01-09-clauses.html#having-1",
    "title": "SQL clauses",
    "section": "HAVING",
    "text": "HAVING\n\nSELECT COUNT(*) AS num_transactions, \n       MIN(fare_amount) AS lowest_fare,\n       MAX(fare_amount) AS highest_fare,\n       payment_type,\n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY payment_type, wday\nHAVING wday = 'Friday';\n\n\n\n\n5 records\n\n\n\n\nnum_transactions\n\n\nlowest_fare\n\n\nhighest_fare\n\n\npayment_type\n\n\nwday\n\n\n\n\n\n\n1247397\n\n\n2.5\n\n\n477\n\n\nCRD\n\n\nFriday\n\n\n\n\n860920\n\n\n2.5\n\n\n444\n\n\nCSH\n\n\nFriday\n\n\n\n\n1592\n\n\n2.5\n\n\n255\n\n\nDIS\n\n\nFriday\n\n\n\n\n5252\n\n\n2.5\n\n\n229\n\n\nNOC\n\n\nFriday\n\n\n\n\n10131\n\n\n2.5\n\n\n130\n\n\nUNK\n\n\nFriday"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#having-2",
    "href": "slides/2024-01-09-clauses.html#having-2",
    "title": "SQL clauses",
    "section": "HAVING",
    "text": "HAVING\nWhile it worked out quite well for us that HAVING was able to filter the data based on the results set, the use of HAVING was quite onerous because the entire data set was considered before the filter was applied. That is, if the filter can be done on the original data using WHERE, the query will be much faster and more efficient.\nNote: HAVING requires a GROUP BY clause. And the variable(s) used in HAVING must also be part of the GROUP BY clause."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#limit",
    "href": "slides/2024-01-09-clauses.html#limit",
    "title": "SQL clauses",
    "section": "LIMIT",
    "text": "LIMIT\nLIMIT truncates the query to specified rows. The first number is the offset (i.e., the number of rows to skip), the second number is the (maximum) number of rows to return. Here, we return rows 15428119 through 15428128.\nThe first number is optional.\n\nSELECT * FROM yellow_old LIMIT 15428118, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nvendor_id\n\n\npickup_datetime\n\n\ndropoff_datetime\n\n\npassenger_count\n\n\ntrip_distance\n\n\npickup_longitude\n\n\npickup_latitude\n\n\nrate_code\n\n\nstore_and_fwd_flag\n\n\ndropoff_longitude\n\n\ndropoff_latitude\n\n\npayment_type\n\n\nfare_amount\n\n\nsurcharge\n\n\nmta_tax\n\n\ntip_amount\n\n\ntolls_amount\n\n\ntotal_amount\n\n\n\n\n\n\nCMT\n\n\n2014-03-18 14:35:21\n\n\n2014-03-18 14:52:01\n\n\n1\n\n\n2.7\n\n\n0\n\n\n0.0\n\n\n1\n\n\nN\n\n\n0\n\n\n0.0\n\n\nCRD\n\n\n13.0\n\n\n0\n\n\n0.5\n\n\n2.50\n\n\n0.00\n\n\n16.0\n\n\n\n\nCMT\n\n\n2014-03-18 14:08:23\n\n\n2014-03-18 14:19:29\n\n\n2\n\n\n1.3\n\n\n0\n\n\n0.0\n\n\n1\n\n\nN\n\n\n0\n\n\n0.0\n\n\nCRD\n\n\n9.0\n\n\n0\n\n\n0.5\n\n\n1.90\n\n\n0.00\n\n\n11.4\n\n\n\n\nCMT\n\n\n2014-03-18 09:18:38\n\n\n2014-03-18 09:19:41\n\n\n1\n\n\n0.2\n\n\n-74\n\n\n40.8\n\n\n1\n\n\nN\n\n\n-74\n\n\n40.8\n\n\nCRD\n\n\n3.0\n\n\n0\n\n\n0.5\n\n\n1.00\n\n\n0.00\n\n\n4.5\n\n\n\n\nCMT\n\n\n2014-03-18 06:28:12\n\n\n2014-03-18 06:49:49\n\n\n1\n\n\n9.9\n\n\n0\n\n\n0.0\n\n\n1\n\n\nN\n\n\n0\n\n\n0.0\n\n\nCRD\n\n\n30.0\n\n\n0\n\n\n0.5\n\n\n7.16\n\n\n5.33\n\n\n43.0\n\n\n\n\nCMT\n\n\n2014-03-18 17:39:28\n\n\n2014-03-18 17:53:01\n\n\n1\n\n\n4.9\n\n\n-74\n\n\n40.8\n\n\n1\n\n\nN\n\n\n-74\n\n\n40.7\n\n\nCRD\n\n\n16.5\n\n\n1\n\n\n0.5\n\n\n3.00\n\n\n0.00\n\n\n21.0\n\n\n\n\nCMT\n\n\n2014-03-18 18:14:19\n\n\n2014-03-18 18:27:22\n\n\n1\n\n\n0.3\n\n\n-74\n\n\n40.7\n\n\n1\n\n\nN\n\n\n-74\n\n\n40.7\n\n\nCRD\n\n\n3.5\n\n\n1\n\n\n0.5\n\n\n6.00\n\n\n0.00\n\n\n11.0\n\n\n\n\nCMT\n\n\n2014-03-18 10:12:33\n\n\n2014-03-18 10:28:09\n\n\n1\n\n\n3.3\n\n\n-74\n\n\n40.8\n\n\n1\n\n\nN\n\n\n-74\n\n\n40.8\n\n\nCRD\n\n\n13.5\n\n\n0\n\n\n0.5\n\n\n4.20\n\n\n0.00\n\n\n18.2\n\n\n\n\nCMT\n\n\n2014-03-18 09:02:37\n\n\n2014-03-18 09:16:29\n\n\n1\n\n\n6.2\n\n\n-74\n\n\n40.8\n\n\n1\n\n\nN\n\n\n-74\n\n\n40.7\n\n\nCRD\n\n\n19.5\n\n\n0\n\n\n0.5\n\n\n1.00\n\n\n0.00\n\n\n21.0\n\n\n\n\nCMT\n\n\n2014-03-18 10:10:19\n\n\n2014-03-18 10:19:25\n\n\n1\n\n\n1.7\n\n\n-74\n\n\n40.8\n\n\n1\n\n\nN\n\n\n-74\n\n\n40.8\n\n\nCRD\n\n\n8.5\n\n\n0\n\n\n0.5\n\n\n1.80\n\n\n0.00\n\n\n10.8\n\n\n\n\nCMT\n\n\n2014-03-18 15:24:53\n\n\n2014-03-18 15:42:42\n\n\n1\n\n\n1.7\n\n\n-74\n\n\n40.8\n\n\n1\n\n\nN\n\n\n-74\n\n\n40.7\n\n\nCRD\n\n\n12.5\n\n\n0\n\n\n0.5\n\n\n2.60\n\n\n0.00\n\n\n15.6"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#saving-sql-queries-as-r-objects",
    "href": "slides/2024-01-09-clauses.html#saving-sql-queries-as-r-objects",
    "title": "SQL clauses",
    "section": "Saving SQL queries as R objects",
    "text": "Saving SQL queries as R objects\nIf you are working in R to run SQL commands, you may want to use the query output for further analysis or visualizations.\n\nuse #|output.var: \"name_of_variable\" inside the {sql} chunk.\nname_of_variable will then be available to be used in the R environment.\n\n\n```{sql}\n#| connection: con_taxi\n#| label: new-table\n#| output.var: \"new_table\"\n\nSELECT *, DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old \nLIMIT 0, 1000;\n```"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#saving-sql-queries-as-r-objects-1",
    "href": "slides/2024-01-09-clauses.html#saving-sql-queries-as-r-objects-1",
    "title": "SQL clauses",
    "section": "Saving SQL queries as R objects",
    "text": "Saving SQL queries as R objects\n\n```{r}\nnew_table |&gt;\n  drop_na(wday) |&gt;\n  ggplot(aes(x = fare_amount, y = tip_amount, color = wday)) + \n  geom_point() \n```"
  },
  {
    "objectID": "slides/2024-01-08-db.html#the-airlines-database",
    "href": "slides/2024-01-08-db.html#the-airlines-database",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "The airlines database",
    "text": "The airlines database\nConsider a database of US flights between 2010 and 2017. The flights are downloaded from the Bureau of Transportation Statistics, US Department of Transportation. The database is a superset of the nycflights13 R package that tracks only flights in and out of airports serving New York City in 2013."
  },
  {
    "objectID": "handout/ws4_sds261_j24.html",
    "href": "handout/ws4_sds261_j24.html",
    "title": "WS4 - regular expressions I",
    "section": "",
    "text": "Your Name: __________________________________\nNames of people you worked with: __________________________________\n\nIntroduce yourself. What is the most challenging thing you have to do in the next 10 days?\nWhat classes are you taking in the spring? How many of them are SDS?\n\nTask:\nThe Jewish Festival of Lights is written as ה כ נ ח in Hebrew and translated to many different spellings in English. The correct English spelling of the holiday can be given in any of the following thirteen variants, according to https://www.holidays.net/chanukah/spelling.htm.\n\nlights &lt;- c(\"Chanuka\", \"Chanukah\", \"Chanukkah\", \"Channukah\", \"Hanukah\", \"Hannukah\",\n            \"Hanukkah\", \"Hanuka\", \"Hanukka\", \"Hanaka\", \"Haneka\", \"Hanika\", \"Khanukkah\")\n\nlights\n\n [1] \"Chanuka\"   \"Chanukah\"  \"Chanukkah\" \"Channukah\" \"Hanukah\"   \"Hannukah\" \n [7] \"Hanukkah\"  \"Hanuka\"    \"Hanukka\"   \"Hanaka\"    \"Haneka\"    \"Hanika\"   \n[13] \"Khanukkah\"\n\n\nProvide a regular expression which will capture all thirteen variants.\n\nSolution:\n[CHK]h?ann?[aeiu]kk?ah?\n\ngrepl(\"[CHK]h?ann?[aeiu]kk?ah?\", lights)\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "handout/lab2_clauses_sds261_j24.html",
    "href": "handout/lab2_clauses_sds261_j24.html",
    "title": "Lab 2 - SQL clauses",
    "section": "",
    "text": "Today’s lab will provide practice working with SQL clauses in DBeaver. Don’t forget the importance of the order of the SQL clauses.\nThe goals for lab 2 include:"
  },
  {
    "objectID": "handout/lab2_clauses_sds261_j24.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab2_clauses_sds261_j24.html#advice-for-turning-in-the-assignment",
    "title": "Lab 2 - SQL clauses",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .sql file) which problem is being answered with which SQL code. Use the following syntax to comment within a .sql file: /* here is where comments go */. Indeed, feel free to copy the question into the .sql file so that you have it for your own records.\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe SQL document should be saved in the R Project as lab2-sds261-yourlastname-yourfirstname.sql. You will have to navigate to the R Project to save the DBeaver file in the correct place.\nConnect to the nyctaxi database, which contains the yellow_old table. See README file (or lab 1) for connection details."
  },
  {
    "objectID": "handout/lab2_clauses_sds261_j24.html#assignment",
    "href": "handout/lab2_clauses_sds261_j24.html#assignment",
    "title": "Lab 2 - SQL clauses",
    "section": "Assignment",
    "text": "Assignment\n\nSelect the trip_distance and total_amount columns from the yellow_old table. For safety (i.e., not crashing your computer), only return the first 5 rows.\n\n\nUsing the AVG() function, find the average total_amount paid in the yellow_old table.\n\n\nWhich type of payment_type had the highest total_amount? How much was it?\n\n\nHow many taxi trips happened on each day of the week? Sort your results so that the day of the week with the fewest rides is at the top of the output.\n\n\nWhich day of the week had the longest trip_distance? Sort the results to have the day of the week with the longest rides at the top of the output.\n\n\nHow many different rate_codes are given in the dataset?\n\n\nStart with the following lines of query:\n\n\nSELECT AVG(trip_distance) AS avg_trip, \n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\n\n\nCan you use WHERE to subset only Saturday and Sunday to find the average trip distance across the weekend? Why or why not?\nCan you use HAVING to subset only Saturday and Sunday to find the average trip distance across the weekend? Why or why not?"
  },
  {
    "objectID": "handout/lab3_joins_sds261_j24.html",
    "href": "handout/lab3_joins_sds261_j24.html",
    "title": "Lab 3 - SQL joins",
    "section": "",
    "text": "Today’s lab will provide practice working with SQL clauses in DBeaver. Don’t forget the importance of the order of the SQL clauses.\nThe goals for lab 3 include:"
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#regular-expressions",
    "href": "slides/2024-01-11-regex1.html#regular-expressions",
    "title": "Regular Expressions I",
    "section": "Regular Expressions",
    "text": "Regular Expressions\n\nA regular expression … is a sequence of characters that define a search pattern. Usually such patterns are used by string searching algorithms for “find” or “find and replace” operations on strings, or for input validation. It is a technique developed in theoretical computer science and formal language theory."
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#escape-sequences",
    "href": "slides/2024-01-11-regex1.html#escape-sequences",
    "title": "Regular Expressions I",
    "section": "Escape sequences",
    "text": "Escape sequences\nJust to scratch the surface, here are a few special characters that cannot be directly coded. Therefore, they are escaped with a backslash, \\.\n\n\\': single quote.\n\n\\\": double quote.\n\n\\n: newline.\n\n\\r: carriage return.\n\n\\t: tab character."
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#quantifiers",
    "href": "slides/2024-01-11-regex1.html#quantifiers",
    "title": "Regular Expressions I",
    "section": "Quantifiers",
    "text": "Quantifiers\nQuantifiers specify how many repetitions of the pattern.\n\n*: matches at least 0 times.\n\n+: matches at least 1 times.\n\n?: matches at most 1 times.\n\n{n}: matches exactly n times.\n\n{n,}: matches at least n times.\n\n{n,m}: matches between n and m times."
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#examples-of-quantifiers",
    "href": "slides/2024-01-11-regex1.html#examples-of-quantifiers",
    "title": "Regular Expressions I",
    "section": "Examples of quantifiers",
    "text": "Examples of quantifiers\n\nstrings &lt;- c(\"a\", \"ab\", \"acb\", \"accb\", \"acccb\", \"accccb\")\ngrep(\"ac*b\", strings, value = TRUE)\ngrep(\"ac*b\", strings, value = FALSE)\ngrep(\"ac+b\", strings, value = TRUE)\ngrep(\"ac?b\", strings, value = TRUE)\ngrep(\"ac{2}b\", strings, value = TRUE)\ngrep(\"ac{2,}b\", strings, value = TRUE)\ngrep(\"ac{2,3}b\", strings, value = TRUE)\n\ngrep() stands for “global regular expression print”. grep() returns a character vector containing the selected elements, grepl() returns a logical vector of TRUE/FALSE for whether or not there was a match."
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#position-of-pattern-within-the-string",
    "href": "slides/2024-01-11-regex1.html#position-of-pattern-within-the-string",
    "title": "Regular Expressions I",
    "section": "Position of pattern within the string",
    "text": "Position of pattern within the string\n\n^: matches the start of the string.\n\n$: matches the end of the string.\n\n\\b: matches the boundary of a word. Don’t confuse it with ^ $ which marks the edge of a string.\n\n\\B: matches the empty string provided it is not at an edge of a word."
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#examples-of-positions",
    "href": "slides/2024-01-11-regex1.html#examples-of-positions",
    "title": "Regular Expressions I",
    "section": "Examples of positions",
    "text": "Examples of positions\n\nstrings &lt;- c(\"abcd\", \"cdab\", \"cabd\", \"c abd\")\ngrep(\"ab\", strings, value = TRUE)\ngrep(\"^ab\", strings, value = TRUE)\ngrep(\"ab$\", strings, value = TRUE)\ngrep(\"\\\\bab\", strings, value = TRUE)"
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#examples-of-quantifiers---solution",
    "href": "slides/2024-01-11-regex1.html#examples-of-quantifiers---solution",
    "title": "Regular Expressions I",
    "section": "Examples of quantifiers - solution",
    "text": "Examples of quantifiers - solution\n\nstrings &lt;- c(\"a\", \"ab\", \"acb\", \"accb\", \"acccb\", \"accccb\")\ngrep(\"ac*b\", strings, value = TRUE)\n\n[1] \"ab\"     \"acb\"    \"accb\"   \"acccb\"  \"accccb\"\n\ngrep(\"ac*b\", strings, value = FALSE)\n\n[1] 2 3 4 5 6\n\ngrep(\"ac+b\", strings, value = TRUE)\n\n[1] \"acb\"    \"accb\"   \"acccb\"  \"accccb\"\n\ngrep(\"ac?b\", strings, value = TRUE)\n\n[1] \"ab\"  \"acb\"\n\ngrep(\"ac{2}b\", strings, value = TRUE)\n\n[1] \"accb\"\n\ngrep(\"ac{2,}b\", strings, value = TRUE)\n\n[1] \"accb\"   \"acccb\"  \"accccb\"\n\ngrep(\"ac{2,3}b\", strings, value = TRUE)\n\n[1] \"accb\"  \"acccb\"\n\n\ngrep() stands for “global regular expression print”. grep() returns a character vector containing the selected elements, grepl() returns a logical vector of TRUE/FALSE for whether or not there was a match."
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#examples-of-positions---solution",
    "href": "slides/2024-01-11-regex1.html#examples-of-positions---solution",
    "title": "Regular Expressions I",
    "section": "Examples of positions - solution",
    "text": "Examples of positions - solution\n\nstrings &lt;- c(\"abcd\", \"cdab\", \"cabd\", \"c abd\")\ngrep(\"ab\", strings, value = TRUE)\n\n[1] \"abcd\"  \"cdab\"  \"cabd\"  \"c abd\"\n\ngrep(\"^ab\", strings, value = TRUE)\n\n[1] \"abcd\"\n\ngrep(\"ab$\", strings, value = TRUE)\n\n[1] \"cdab\"\n\ngrep(\"\\\\bab\", strings, value = TRUE)\n\n[1] \"abcd\"  \"c abd\""
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#operators",
    "href": "slides/2024-01-11-regex1.html#operators",
    "title": "Regular Expressions I",
    "section": "Operators",
    "text": "Operators\n\n.: matches any single character,\n[...]: a character list, matches any one of the characters inside the square brackets. A - inside the brackets specifies a range of characters.\n\n[^...]: an inverted character list, similar to [...], but matches any characters except those inside the square brackets.\n\n\\: suppress the special meaning of metacharacters in regular expression, i.e. $ * + . ? [ ] ^ { } | ( ) \\. Since \\ itself needs to be escaped in R, we need to escape metacharacters with double backslash like \\\\$.\n\n|: an “or” operator, matches patterns on either side of the |.\n\n(...): grouping in regular expressions. This allows you to retrieve the bits that matched various parts of your regular expression so you can alter them or use them for building up a new string."
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#examples-of-operators",
    "href": "slides/2024-01-11-regex1.html#examples-of-operators",
    "title": "Regular Expressions I",
    "section": "Examples of operators",
    "text": "Examples of operators\n\nstrings &lt;- c(\"^ab\", \"ab\", \"abc\", \"abd\", \"abe\", \"ab 12\", \"a|b\")\ngrep(\"ab.\", strings, value = TRUE)\ngrep(\"ab[c-e]\", strings, value = TRUE)\ngrep(\"ab[^c]\", strings, value = TRUE)\ngrep(\"^ab\", strings, value = TRUE)\ngrep(\"\\\\^ab\", strings, value = TRUE)\ngrep(\"abc|abd\", strings, value = TRUE)\ngrep(\"a[b|c]\", strings, value = TRUE)\nstr_extract(strings, \"a[b|c]\")"
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#examples-of-operators---solution",
    "href": "slides/2024-01-11-regex1.html#examples-of-operators---solution",
    "title": "Regular Expressions I",
    "section": "Examples of operators - solution",
    "text": "Examples of operators - solution\n\nstrings &lt;- c(\"^ab\", \"ab\", \"abc\", \"abd\", \"abe\", \"ab 12\", \"a|b\")\ngrep(\"ab.\", strings, value = TRUE)\n\n[1] \"abc\"   \"abd\"   \"abe\"   \"ab 12\"\n\ngrep(\"ab[c-e]\", strings, value = TRUE)\n\n[1] \"abc\" \"abd\" \"abe\"\n\ngrep(\"ab[^c]\", strings, value = TRUE)\n\n[1] \"abd\"   \"abe\"   \"ab 12\"\n\ngrep(\"^ab\", strings, value = TRUE)\n\n[1] \"ab\"    \"abc\"   \"abd\"   \"abe\"   \"ab 12\"\n\ngrep(\"\\\\^ab\", strings, value = TRUE)\n\n[1] \"^ab\"\n\ngrep(\"abc|abd\", strings, value = TRUE)\n\n[1] \"abc\" \"abd\"\n\ngrep(\"a[b|c]\", strings, value = TRUE)\n\n[1] \"^ab\"   \"ab\"    \"abc\"   \"abd\"   \"abe\"   \"ab 12\" \"a|b\"  \n\nstr_extract(strings, \"a[b|c]\")\n\n[1] \"ab\" \"ab\" \"ab\" \"ab\" \"ab\" \"ab\" \"a|\""
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#character-classes",
    "href": "slides/2024-01-11-regex1.html#character-classes",
    "title": "Regular Expressions I",
    "section": "Character classes",
    "text": "Character classes\nCharacter classes allow specifying entire classes of characters, such as numbers, letters, etc. There are two flavors of character classes, one uses [: and :] around a predefined name inside square brackets and the other uses \\ and a special character. They are sometimes interchangeable.\n\n(?i) before the string indicates that the match should be case insensitive.\n[:digit:] or \\d: digits, 0 1 2 3 4 5 6 7 8 9, equivalent to [0-9].\n\n\\D: non-digits, equivalent to [^0-9].\n\n[:lower:]: lower-case letters, equivalent to [a-z].\n\n[:upper:]: upper-case letters, equivalent to [A-Z].\n\n[:alpha:]: alphabetic characters, equivalent to [[:lower:][:upper:]] or [A-z].\n\n[:alnum:]: alphanumeric characters, equivalent to [[:alpha:][:digit:]] or [A-z0-9].\n\n\\w: word characters, equivalent to [[:alnum:]_] or [A-z0-9_] (letter, number, or underscore).\n\n\\W: not word, equivalent to [^A-z0-9_].\n\n[:blank:]: blank characters, i.e. space and tab.\n\n[:space:]: space characters: tab, newline, vertical tab, form feed, carriage return, space.\n\\s: space, .\n\n\\S: not space.\n\n[:punct:]: punctuation characters, ! ” # $ % & ’ ( ) * + , - . / : ; &lt; = &gt; ? @ [  ] ^ _ ` { | } ~.\n[:graph:]: graphical (human readable) characters: equivalent to [[:alnum:][:punct:]].\n[:print:]: printable characters, equivalent to [[:alnum:][:punct:]\\\\s]."
  },
  {
    "objectID": "handout/lab4_regexp_sds261_j24.html#footnotes",
    "href": "handout/lab4_regexp_sds261_j24.html#footnotes",
    "title": "Lab 4 - regular expressions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n0-1↩︎\n0-9↩︎"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#lookaround",
    "href": "slides/2024-01-12-regex2.html#lookaround",
    "title": "Regular Expressions II",
    "section": "Lookaround",
    "text": "Lookaround\nA lookaround specifies a place in the regular expression that will anchor the string you’d like to match.\n\n“x(?=y)” – positive lookahead (matches ‘x’ when it is followed by ‘y’)\n“x(?!y)” – negative lookahead (matches ‘x’ when it is not followed by ‘y’)\n“(?&lt;=y)x” – positive lookbehind (matches ‘x’ when it is preceded by ‘y’)\n“(?&lt;!y)x” – negative lookbehind (matches ‘x’ when it is not preceded by ‘y’)"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#example---taskmaster",
    "href": "slides/2024-01-12-regex2.html#example---taskmaster",
    "title": "Regular Expressions II",
    "section": "Example - Taskmaster",
    "text": "Example - Taskmaster\nData scraped from the wiki site for the TV series, Taskmaster.\n\nFigure 2: Taskmaster Wiki https://taskmaster.fandom.com/wiki/Series_11"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#goal-taskmaster-information",
    "href": "slides/2024-01-12-regex2.html#goal-taskmaster-information",
    "title": "Regular Expressions II",
    "section": "Goal: Taskmaster information",
    "text": "Goal: Taskmaster information\nOur goal is to scrape the Taskmaster wiki to create a dataframe which includes the task, description, episode, episode name, air date, contestant, score, and series.1\n\n   Task  Description     episode episode_name air_date contestant score series\n 1 1     Prize: Best th… 1       \"It's not y… 18 Marc… Charlotte… 1         11\n 2 1     Prize: Best th… 1       \"It's not y… 18 Marc… Jamali Ma… 2         11\n 3 1     Prize: Best th… 1       \"It's not y… 18 Marc… Lee Mack   4         11\n 4 1     Prize: Best th… 1       \"It's not y… 18 Marc… Mike Wozn… 5         11\n 5 1     Prize: Best th… 1       \"It's not y… 18 Marc… Sarah Ken… 3         11\n 6 2     Do the most im… 1       \"It's not y… 18 Marc… Charlotte… 2         11\n 7 2     Do the most im… 1       \"It's not y… 18 Marc… Jamali Ma… 3         11\n 8 2     Do the most im… 1       \"It's not y… 18 Marc… Lee Mack   3         11\n 9 2     Do the most im… 1       \"It's not y… 18 Marc… Mike Wozn… 5         11\n10 2     Do the most im… 1       \"It's not y… 18 Marc… Sarah Ken… 4         11\n\nThanks to Ciaran Evans at Wake Forest University for example and code, https://sta279-f23.github.io/"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#scraping-and-wrangling-taskmaster-data",
    "href": "slides/2024-01-12-regex2.html#scraping-and-wrangling-taskmaster-data",
    "title": "Regular Expressions II",
    "section": "Scraping and wrangling Taskmaster data",
    "text": "Scraping and wrangling Taskmaster data\nOur goal is to scrape the Taskmaster wiki to create a dataframe which includes the task, description, episode, episode name, air date, contestant, score, and series.1\n\nresults &lt;- read_html(\"https://taskmaster.fandom.com/wiki/Series_11\") |&gt;\n  html_element(\".tmtable\") |&gt; \n  html_table() |&gt;\n  mutate(episode = ifelse(startsWith(Task, \"Episode\"), Task, NA)) |&gt;\n  fill(episode, .direction = \"down\") |&gt;\n  filter(!startsWith(Task, \"Episode\"), \n         !(Task %in% c(\"Total\", \"Grand Total\"))) |&gt;\n  pivot_longer(cols = -c(Task, Description, episode),\n               names_to = \"contestant\",\n               values_to = \"score\") |&gt;\n  mutate(series = 11)\n\nThanks to Ciaran Evans at Wake Forest University for example and code, https://sta279-f23.github.io/"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#scraping-and-wrangling-taskmaster-data---results",
    "href": "slides/2024-01-12-regex2.html#scraping-and-wrangling-taskmaster-data---results",
    "title": "Regular Expressions II",
    "section": "Scraping and wrangling Taskmaster data - results",
    "text": "Scraping and wrangling Taskmaster data - results\n\nresults |&gt; \n  select(Task, Description, episode, contestant, score, series) |&gt;\n  head(10)\n\n# A tibble: 10 × 6\n  Task  Description                              episode contestant score series\n  &lt;chr&gt; &lt;chr&gt;                                    &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;\n1 1     Prize: Best thing you can carry, but on… Episod… Charlotte… 1         11\n2 1     Prize: Best thing you can carry, but on… Episod… Jamali Ma… 2         11\n3 1     Prize: Best thing you can carry, but on… Episod… Lee Mack   4         11\n4 1     Prize: Best thing you can carry, but on… Episod… Mike Wozn… 5         11\n5 1     Prize: Best thing you can carry, but on… Episod… Sarah Ken… 3         11\n6 2     Do the most impressive thing under the … Episod… Charlotte… 2         11\n# ℹ 4 more rows"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#more-succinct-results",
    "href": "slides/2024-01-12-regex2.html#more-succinct-results",
    "title": "Regular Expressions II",
    "section": "more succinct results",
    "text": "more succinct results\n\n   Task  Description         episode   contestant score series\n  1     Prize: Best thing…  Episode 1… Charlotte… 1         11\n  1     Prize: Best thing…  Episode 1… Jamali Ma… 2         11\n  1     Prize: Best thing…  Episode 1… Lee Mack   4         11\n  1     Prize: Best thing…  Episode 1… Mike Wozn… 5         11\n  1     Prize: Best thing…  Episode 1… Sarah Ken… 3         11\n  2     Do the most…        Episode 1… Charlotte… 2         11\n  2     Do the most…        Episode 1… Jamali Ma… 3[1]      11\n  2     Do the most…        Episode 1… Lee Mack   3         11\n  2     Do the most…        Episode 1… Mike Wozn… 5         11\n  2     Do the most…        Episode 1… Sarah Ken… 4         11\n\nCurrently, the episode column contains entries like\n\n\"Episode 1: It's not your fault. (18 March 2021)\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#cleaning-the-score-column",
    "href": "slides/2024-01-12-regex2.html#cleaning-the-score-column",
    "title": "Regular Expressions II",
    "section": "Cleaning the score column",
    "text": "Cleaning the score column\n\ntable(results$score)\n\n\n   –    ✔    ✘    0    1    2    3 3[1] 3[2]    4 4[2]    5   DQ \n   7    1    1   11   37   42   48    1    3   50    1   55   13 \n\n\nHow should the scores be stored? What is the cleaning task?\n\nFigure 3: Taskmaster Wiki https://taskmaster.fandom.com/wiki/Series_11"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-numeric-information",
    "href": "slides/2024-01-12-regex2.html#extracting-numeric-information",
    "title": "Regular Expressions II",
    "section": "Extracting numeric information",
    "text": "Extracting numeric information\nSuppose we have the following string:\n\n\"3[1]\"\n\nAnd we want to extract just the number “3”:\n\nstr_extract(\"3[1]\", \"3\")\n\n[1] \"3\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-numeric-information-1",
    "href": "slides/2024-01-12-regex2.html#extracting-numeric-information-1",
    "title": "Regular Expressions II",
    "section": "Extracting numeric information",
    "text": "Extracting numeric information\nWhat if we don’t know which number to extract?\n\nstr_extract(\"3[1]\", \"\\\\d\")\n\n[1] \"3\"\n\n\n\nstr_extract(\"4[1]\", \"\\\\d\")\n\n[1] \"4\"\n\n\n\nstr_extract(\"10[1]\", \"\\\\d\")\n\n[1] \"1\"\n\n\n\nstr_extract(\"10[1]\", \"\\\\d+\")\n\n[1] \"10\"\n\n\n\nstr_extract(\"DQ\", \"\\\\d\")\n\n[1] NA"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#str_extract",
    "href": "slides/2024-01-12-regex2.html#str_extract",
    "title": "Regular Expressions II",
    "section": "str_extract()",
    "text": "str_extract()\nstr_extract() is an R function in the stringr package which finds regular expressions in strings of text.\n\nstr_extract(\"My cat is 3 years old\", \"cat\")\n\n[1] \"cat\"\n\n\n\nstr_extract(\"My cat is 3 years old\", \"3\")\n\n[1] \"3\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#matching-multiple-options",
    "href": "slides/2024-01-12-regex2.html#matching-multiple-options",
    "title": "Regular Expressions II",
    "section": "Matching multiple options",
    "text": "Matching multiple options\nstr_extract() returns the first match; str_extract_all() allows more than one match.\n\nstr_extract(\"My cat is 3 years old\", \"cat|dog\")\n\n[1] \"cat\"\n\nstr_extract(\"My dog is 10 years old\", \"cat|dog\")\n\n[1] \"dog\"\n\nstr_extract(\"My dog is 10 years old, my cat is 3 years old\", \n            \"cat|dog\")\n\n[1] \"dog\"\n\nstr_extract_all(\"My dog is 10 years old, my cat is 3 years old\", \n                \"cat|dog\")\n\n[[1]]\n[1] \"dog\" \"cat\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#matching-groups-of-characters",
    "href": "slides/2024-01-12-regex2.html#matching-groups-of-characters",
    "title": "Regular Expressions II",
    "section": "Matching groups of characters",
    "text": "Matching groups of characters\nWhat if I want to extract a number?\n\nstr_extract(\"My cat is 3 years old\", \"\\\\d\")\n\n[1] \"3\"\n\n\nWhat will the result be for the following code?\n\nstr_extract(\"My dog is 10 years old\", \"\\\\d\")"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#matching-groups-of-characters-1",
    "href": "slides/2024-01-12-regex2.html#matching-groups-of-characters-1",
    "title": "Regular Expressions II",
    "section": "Matching groups of characters",
    "text": "Matching groups of characters\nWhat if I want to extract a number?\n\nstr_extract(\"My cat is 3 years old\", \"\\\\d\")\n\n[1] \"3\"\n\n\nWhat will the result be for the following code?\n\nstr_extract(\"My dog is 10 years old\", \"\\\\d\")\n\n[1] \"1\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#matching-groups-of-characters-2",
    "href": "slides/2024-01-12-regex2.html#matching-groups-of-characters-2",
    "title": "Regular Expressions II",
    "section": "Matching groups of characters",
    "text": "Matching groups of characters\nWhat if I want to extract a number?\n\nstr_extract(\"My cat is 3 years old\", \"\\\\d\")\n\n[1] \"3\"\n\n\nWhat will the result be for the following code?\n\nstr_extract(\"My dog is 10 years old\", \"\\\\d\")\n\n[1] \"1\"\n\n\nThe + symbol in a regular expression means “repeated one or more times”\n\nstr_extract(\"My dog is 10 years old\", \"\\\\d+\")\n\n[1] \"10\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-from-multiple-strings",
    "href": "slides/2024-01-12-regex2.html#extracting-from-multiple-strings",
    "title": "Regular Expressions II",
    "section": "Extracting from multiple strings",
    "text": "Extracting from multiple strings\n\nstrings &lt;- c(\"My cat is 3 years old\", \"My dog is 10 years old\")\nstr_extract(strings, \"\\\\d+\")\n\n[1] \"3\"  \"10\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-episode-information",
    "href": "slides/2024-01-12-regex2.html#extracting-episode-information",
    "title": "Regular Expressions II",
    "section": "Extracting episode information",
    "text": "Extracting episode information\nCurrently, the episode column contains entries like:\n\n\"Episode 2: The pie whisperer. (4 August 2015)\"\n\nHow would I extract just the episode number?"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-episode-information-1",
    "href": "slides/2024-01-12-regex2.html#extracting-episode-information-1",
    "title": "Regular Expressions II",
    "section": "Extracting episode information",
    "text": "Extracting episode information\nCurrently, the episode column contains entries like:\n\n\"Episode 2: The pie whisperer. (4 August 2015)\"\n\nHow would I extract just the episode number?\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \"\\\\d+\")\n\n[1] \"2\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-episode-information-2",
    "href": "slides/2024-01-12-regex2.html#extracting-episode-information-2",
    "title": "Regular Expressions II",
    "section": "Extracting episode information",
    "text": "Extracting episode information\nCurrently, the episode column contains entries like:\n\n\"Episode 2: The pie whisperer. (4 August 2015)\"\n\nHow would I extract the episode name?\nGoal: find a pattern to match: anything that starts with a :, ends with a .\nLet’s break down that task into pieces."
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-episode-information-3",
    "href": "slides/2024-01-12-regex2.html#extracting-episode-information-3",
    "title": "Regular Expressions II",
    "section": "Extracting episode information",
    "text": "Extracting episode information\nHow can we find the period at the end of the sentence? What does each of these lines of code return?\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".\")\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".+\")\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \"\\\\.\")"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-episode-information---solution",
    "href": "slides/2024-01-12-regex2.html#extracting-episode-information---solution",
    "title": "Regular Expressions II",
    "section": "Extracting episode information - solution",
    "text": "Extracting episode information - solution\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".\")\n\n[1] \"E\"\n\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \".+\")\n\n[1] \"Episode 2: The pie whisperer. (4 August 2015)\"\n\n\nWe use an escape character when we actually want to choose a period:\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \"\\\\.\")\n\n[1] \".\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-episode-information-4",
    "href": "slides/2024-01-12-regex2.html#extracting-episode-information-4",
    "title": "Regular Expressions II",
    "section": "Extracting episode information",
    "text": "Extracting episode information\nGoal: find a pattern to match: anything that starts with a :, ends with a .\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\",\n            \":.+\\\\.\")\n\n[1] \": The pie whisperer.\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-episode-information-5",
    "href": "slides/2024-01-12-regex2.html#extracting-episode-information-5",
    "title": "Regular Expressions II",
    "section": "Extracting episode information",
    "text": "Extracting episode information\nGetting everything between the : and the .\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \"(?&lt;=: ).+(?=\\\\.)\")\n\n[1] \"The pie whisperer\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#lookbehinds",
    "href": "slides/2024-01-12-regex2.html#lookbehinds",
    "title": "Regular Expressions II",
    "section": "Lookbehinds",
    "text": "Lookbehinds\n(?&lt;=) is a positive lookbehind. It is used to identify expressions which are preceded by a particular expression.\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \"(?&lt;=: ).+\")\n\n[1] \"The pie whisperer. (4 August 2015)\"\n\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \"(?&lt;=\\\\. ).+\")\n\n[1] \"(4 August 2015)\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#lookaheads",
    "href": "slides/2024-01-12-regex2.html#lookaheads",
    "title": "Regular Expressions II",
    "section": "Lookaheads",
    "text": "Lookaheads\n(?=) is a positive lookahead. It is used to identify expressions which are followed by a particular expression.\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \".+(?=\\\\.)\")\n\n[1] \"Episode 2: The pie whisperer\"\n\n\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \".+(?=:)\")\n\n[1] \"Episode 2\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-air-date",
    "href": "slides/2024-01-12-regex2.html#extracting-air-date",
    "title": "Regular Expressions II",
    "section": "Extracting air date",
    "text": "Extracting air date\nI want to extract just the air date. What pattern do I want to match?\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", ...)"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-air-date-1",
    "href": "slides/2024-01-12-regex2.html#extracting-air-date-1",
    "title": "Regular Expressions II",
    "section": "Extracting air date",
    "text": "Extracting air date\n\nstr_extract(\"Episode 2: The pie whisperer. (4 August 2015)\", \n            \"(?&lt;=\\\\().+(?=\\\\))\")\n\n[1] \"4 August 2015\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#wrangling-the-episode-info",
    "href": "slides/2024-01-12-regex2.html#wrangling-the-episode-info",
    "title": "Regular Expressions II",
    "section": "Wrangling the episode info",
    "text": "Wrangling the episode info\nCurrently:\n\n\n# A tibble: 270 × 1\n  episode                                        \n  &lt;chr&gt;                                          \n1 Episode 1: It's not your fault. (18 March 2021)\n2 Episode 1: It's not your fault. (18 March 2021)\n3 Episode 1: It's not your fault. (18 March 2021)\n4 Episode 1: It's not your fault. (18 March 2021)\n5 Episode 1: It's not your fault. (18 March 2021)\n6 Episode 1: It's not your fault. (18 March 2021)\n# ℹ 264 more rows"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#wrangling-the-episode-info-1",
    "href": "slides/2024-01-12-regex2.html#wrangling-the-episode-info-1",
    "title": "Regular Expressions II",
    "section": "Wrangling the episode info",
    "text": "Wrangling the episode info\nOne option:\n\nresults |&gt;\n  select(episode) |&gt;\n  mutate(episode_name = str_extract(episode, \"(?&lt;=: ).+(?=\\\\.)\"),\n         air_date = str_extract(episode, \"(?&lt;=\\\\().+(?=\\\\))\"),\n         episode = str_extract(episode, \"\\\\d+\"))\n\n# A tibble: 270 × 3\n  episode episode_name        air_date     \n  &lt;chr&gt;   &lt;chr&gt;               &lt;chr&gt;        \n1 1       It's not your fault 18 March 2021\n2 1       It's not your fault 18 March 2021\n3 1       It's not your fault 18 March 2021\n4 1       It's not your fault 18 March 2021\n5 1       It's not your fault 18 March 2021\n6 1       It's not your fault 18 March 2021\n# ℹ 264 more rows"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#wrangling-the-episode-info-2",
    "href": "slides/2024-01-12-regex2.html#wrangling-the-episode-info-2",
    "title": "Regular Expressions II",
    "section": "Wrangling the episode info",
    "text": "Wrangling the episode info\nAnother option:\n\nresults |&gt;\n  separate_wider_regex(episode, \n                       patterns = c(\".+ \", \n                                    episode = \"\\\\d+\", \n                                    \": \", \n                                    episode_name = \".+\", \n                                    \"\\\\. \\\\(\", \n                                    air_date = \".+\", \n                                    \"\\\\)\"))\n\n\n\n# A tibble: 270 × 3\n  episode episode_name        air_date     \n  &lt;chr&gt;   &lt;chr&gt;               &lt;chr&gt;        \n1 1       It's not your fault 18 March 2021\n2 1       It's not your fault 18 March 2021\n3 1       It's not your fault 18 March 2021\n4 1       It's not your fault 18 March 2021\n5 1       It's not your fault 18 March 2021\n6 1       It's not your fault 18 March 2021\n# ℹ 264 more rows"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#lookaround-1",
    "href": "slides/2024-01-12-regex2.html#lookaround-1",
    "title": "Regular Expressions II",
    "section": "Lookaround",
    "text": "Lookaround\n\nFigure 1: Image credit: Stefan Judis https://www.stefanjudis.com/blog/a-regular-expression-lookahead-lookbehind-cheat-sheet/"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#scraping-and-wrangling-taskmaster",
    "href": "slides/2024-01-12-regex2.html#scraping-and-wrangling-taskmaster",
    "title": "Regular Expressions II",
    "section": "Scraping and wrangling Taskmaster",
    "text": "Scraping and wrangling Taskmaster\nGoal: to scrape the Taskmaster wiki into a dataframe including task, description, episode, episode name, air date, contestant, score, and series.1\n\nresults &lt;- read_html(\"https://taskmaster.fandom.com/wiki/Series_11\") |&gt;\n  html_element(\".tmtable\") |&gt; \n  html_table() |&gt;\n  mutate(episode = ifelse(startsWith(Task, \"Episode\"), Task, NA)) |&gt;\n  fill(episode, .direction = \"down\") |&gt;\n  filter(!startsWith(Task, \"Episode\"), \n         !(Task %in% c(\"Total\", \"Grand Total\"))) |&gt;\n  pivot_longer(cols = -c(Task, Description, episode),\n               names_to = \"contestant\",\n               values_to = \"score\") |&gt;\n  mutate(series = 11)\n\nThanks to Ciaran Evans at Wake Forest University for example and code, https://sta279-f23.github.io/"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#extracting-from-multiple-strings-1",
    "href": "slides/2024-01-12-regex2.html#extracting-from-multiple-strings-1",
    "title": "Regular Expressions II",
    "section": "Extracting from multiple strings",
    "text": "Extracting from multiple strings\nWhat if we have multiple instances across multiple strings? We need to be careful working with lists (instead of vectors).\n\nstrings &lt;- c(\"My cat is 3 years old\", \"My dog is 10 years old\")\nstr_extract(strings, \"\\\\w+\")\n\n[1] \"My\" \"My\"\n\nstr_extract_all(strings, \"\\\\w+\")\n\n[[1]]\n[1] \"My\"    \"cat\"   \"is\"    \"3\"     \"years\" \"old\"  \n\n[[2]]\n[1] \"My\"    \"dog\"   \"is\"    \"10\"    \"years\" \"old\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#lookaround-again",
    "href": "slides/2024-01-12-regex2.html#lookaround-again",
    "title": "Regular Expressions II",
    "section": "Lookaround (again)",
    "text": "Lookaround (again)\n\nFigure 4: Image credit: Stefan Judis https://www.stefanjudis.com/blog/a-regular-expression-lookahead-lookbehind-cheat-sheet/"
  },
  {
    "objectID": "handout/lab4_regex_sds261_j24.html",
    "href": "handout/lab4_regex_sds261_j24.html",
    "title": "Lab 4 - regular expressions",
    "section": "",
    "text": "library(tidyverse)\nlibrary(stringr)\nToday’s lab will provide practice working with regular expressions in R.\nThe goals for lab 4 include:"
  },
  {
    "objectID": "handout/lab4_regex_sds261_j24.html#footnotes",
    "href": "handout/lab4_regex_sds261_j24.html#footnotes",
    "title": "Lab 4 - regular expressions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n0-1↩︎\n0-9↩︎\nLorem Ipsum from https://www.webfx.com/web-design/html-ipsum/.↩︎"
  },
  {
    "objectID": "handout/ws1_sds261_j24.html",
    "href": "handout/ws1_sds261_j24.html",
    "title": "Worksheet 1 - DB, R, SQL, Oh My!",
    "section": "",
    "text": "Your Name: __________________________________\nNames of people you worked with: __________________________________\n\nIntroduce yourself. Which dorm do you live in? What is one great thing and one lousy thing about that dorm?\nName one thing in the Syllabus / website / etc. for this class that either sounds strange/unusual or that you would like to know more about.\n\nTask: Consider a large hospital system that coordinates all aspects of health care: doctors, visits, prescriptions, surgeries, billing, etc. Let’s say that the hospital has a database which includes a series of tables linking all the needed information that they routinely collect.\n\nCome up with at least five tables which might exist in the hospital database. For each table indicate a few columns / variables.\nDraw arrows between the tables and indicate the variable(s) that link the tables. No table should be completely isolated.\n\n\nSolution:\nThe solution is taken directly from w3resource. Consider the hypothetical SQL schema diagram in Figure 1. Some of the tables and respective variables are described below.\n\nphysician\n\nemployeeid - unique ID of a physician\nname - name of physician\nposition - designation of a physician\nssn - social security number of physician\n\ndepartment\n\ndepartmentid - unique ID of the department\nname - name of the department\nhead - ID of the physician who is the head of the department, connects to the employeeid of the table physician\n\naffiliated_with\n\nphysician - ID of the physician, connects to the employeeid of the table physician\ndepartment - ID of the department, connects to the departmentid of the table department\nprimaryaffiliation - logical column which indicates whether the physicians are affiliated or not\n\nprocedure\n\ncode - unique ID of the medical procedure\nname - name of the medical procedure\ncost - cost of the medical procedure\n\ntrained_in\n\nphysician - ID of the physician, connects to the employeeid of the table physician\ntreatment - ID of the medical procedure, connects to the code of the procedure table\ncertificationdate - starting date of certification\ncertificationexpires - expiry date of certification\n\npatient\n\nssn - unique ID for each patient\nname - name of patient\naddress - address of patient\nphone - phone number of patient\n\n\n\n\n\n\n\n\n\n\nFigure 1: SQL schema describing links of tables from a hypothetical hospital database, image credit: https://www.w3resource.com/sql-exercises/hospital-database-exercise/index.php\n\n\n\n\n\n\n:::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "handout/lab2_clauses_sds261_j24_sol.html",
    "href": "handout/lab2_clauses_sds261_j24_sol.html",
    "title": "Lab 2 - SQL clauses",
    "section": "",
    "text": "Solution\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RMariaDB)\nlibrary(dbplyr)\nlibrary(mdsr)\nToday’s lab will provide practice working with SQL clauses in DBeaver. Don’t forget the importance of the order of the SQL clauses.\nThe goals for lab 2 include:"
  },
  {
    "objectID": "handout/lab2_clauses_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab2_clauses_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "title": "Lab 2 - SQL clauses",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .sql file) which problem is being answered with which SQL code. Use the following syntax to comment within a .sql file: /* here is where comments go */. Indeed, feel free to copy the question into the .sql file so that you have it for your own records.\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe SQL document should be saved in the R Project as lab2-sds261-yourlastname-yourfirstname.sql. You will have to navigate to the R Project to save the DBeaver file in the correct place.\nConnect to the nyctaxi database, which contains the yellow_old table. See README file (or lab 1) for connection details."
  },
  {
    "objectID": "handout/lab2_clauses_sds261_j24_sol.html#assignment",
    "href": "handout/lab2_clauses_sds261_j24_sol.html#assignment",
    "title": "Lab 2 - SQL clauses",
    "section": "Assignment",
    "text": "Assignment\n\nSelect the trip_distance and total_amount columns from the yellow_old table. For safety (i.e., not crashing your computer), only return the first 5 rows.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT trip_distance, total_amount\nFROM yellow_old\nLIMIT 0, 5;\n\n\n5 records\n\n\ntrip_distance\ntotal_amount\n\n\n\n\nNA\nNA\n\n\n2.0\n12.0\n\n\n1.2\n8.0\n\n\n0.5\n7.2\n\n\n3.5\n18.0\n\n\n\n\n\n\n\n\n\nUsing the AVG() function, find the average total_amount paid in the yellow_old table.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT AVG(total_amount)\nFROM yellow_old\nLIMIT 0, 5;\n\n\n1 records\n\n\nAVG(total_amount)\n\n\n\n\n14.76179\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThe average total fare was $14.76\n\n\n\n\n\nWhich type of payment_type had the highest total_amount? How much was it?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT MAX(total_amount), payment_type\nFROM yellow_old\nGROUP BY payment_type\nLIMIT 0, 5;\n\n\n5 records\n\n\nMAX(total_amount)\npayment_type\n\n\n\n\nNA\nNA\n\n\n540.00\nCRD\n\n\n1007.51\nCSH\n\n\n484.04\nDIS\n\n\n950.30\nNOC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThe highest total amount was a cash payment for $1007.51. Yikes, that’s a big bill for a taxi ride. Note that the second highest payment was $950.30 for a no charge ride. How does that happen?\n\n\n\n\n\nHow many taxi trips happened on each day of the week? Sort your results so that the day of the week with the fewest rides is at the top of the output.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*) AS num_transactions, \n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY wday\nORDER BY num_transactions;\n\n\n8 records\n\n\nnum_transactions\nwday\n\n\n\n\n1\nNA\n\n\n1887838\nTuesday\n\n\n1984031\nWednesday\n\n\n2088305\nThursday\n\n\n2125292\nFriday\n\n\n2215255\nMonday\n\n\n2364039\nSunday\n\n\n2763367\nSaturday\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nUnsurprisingly, the most rides were on the weekends. Monday is a close third, possibly a reflection of how hard it is to get out of bed on Monday mornings.\n\n\n\n\n\nWhich day of the week had the longest trip_distance? Sort the results to have the day of the week with the longest rides at the top of the output.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT MAX(trip_distance) AS long_trip, \n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY wday\nORDER BY long_trip DESC;\n\n\n8 records\n\n\nlong_trip\nwday\n\n\n\n\n5005013.0\nMonday\n\n\n100.0\nWednesday\n\n\n100.0\nFriday\n\n\n100.0\nSunday\n\n\n97.4\nTuesday\n\n\n96.1\nThursday\n\n\n92.9\nSaturday\n\n\nNA\nNA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nHoly cow, one of the trips is 5,005,013 miles! That can’t be right!??!\n\n\n\n\n\nHow many different rate_codes are given in the dataset?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT DISTINCT rate_code\nFROM yellow_old\nLIMIT 0, 20;\n\n\nDisplaying records 1 - 10\n\n\nrate_code\n\n\n\n\nNA\n\n\n1\n\n\n2\n\n\n5\n\n\n3\n\n\n4\n\n\n0\n\n\n6\n\n\n210\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*) AS num_code, rate_code\nFROM yellow_old\nGROUP BY rate_code\nORDER BY num_code DESC\nLIMIT 0, 20;\n\n\nDisplaying records 1 - 10\n\n\nnum_code\nrate_code\n\n\n\n\n15088481\n1\n\n\n268161\n2\n\n\n42092\n5\n\n\n22935\n3\n\n\n4676\n4\n\n\n1579\n0\n\n\n179\n6\n\n\n14\n210\n\n\n4\n8\n\n\n4\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThere are 11 different rate codes. Rate codes are different because the taxi charges you a different rate if, for example, you go to JFK or go very far away.\nThe second solution not only gave rate codes, but also the number of transactions for each rate code.\n\n\n\n\n\nStart with the following lines of query:\n\n\nSELECT AVG(trip_distance) AS avg_trip, \n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\n\n\nCan you use WHERE to subset only Saturday and Sunday to find the average trip distance across the weekend? Why or why not?\nCan you use HAVING to subset only Saturday and Sunday to find the average trip distance across the weekend? Why or why not?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT AVG(trip_distance) AS avg_trip, \n       DAYNAME(STR_TO_DATE(pickup_datetime, \"%Y-%m-%d %T\")) AS wday\nFROM yellow_old\nGROUP BY wday\nHAVING wday = \"Saturday\" | wday = \"Sunday\"\nLIMIT 0,8;\n\n\n0 records\n\n\navg_trip\nwday\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nNeither WHERE nor HAVING can be used with this query to find the average trip distance across the weekend days.\nWHERE cannot be used because wday is not in the original dataset. WHERE works on the original data.\nHAVING cannot be used because the average has already been taken across the groups, so there isn’t any way to go back and re-calculate the average across Saturday and Sunday. HAVING works on the results set."
  },
  {
    "objectID": "handout/lab3_joins_sds261_j24_sol.html",
    "href": "handout/lab3_joins_sds261_j24_sol.html",
    "title": "Lab 3 - SQL joins",
    "section": "",
    "text": "Solution\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RMariaDB)\nlibrary(dbplyr)\nlibrary(mdsr)\nToday’s lab will provide practice working with SQL clauses in DBeaver. Don’t forget the importance of the order of the SQL clauses.\nThe goals for lab 3 include:"
  },
  {
    "objectID": "slides/2024-01-08-db.html",
    "href": "slides/2024-01-08-db.html",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "",
    "text": "structured collection of data organized with\n\nefficient storage\neasy retrieval\nconsistent management\n\ndata stored in tables which are linked to one another via keys\n\n\n\n\n\ndata frame (R) or table (SQL)\ncolumns of variables\nrows of observational units\n\n\n\n\n\ntables in SQL databases can be arbitrarily large\n\nlive in storage, computer’s hard drive (usually remote)\n\ndata frames in R\n\nlive in memory (RAM) on your personal computer\n\ntables in a database are linked via a key."
  },
  {
    "objectID": "slides/2024-01-11-regex1.html",
    "href": "slides/2024-01-11-regex1.html",
    "title": "Regular Expressions I",
    "section": "",
    "text": "A regular expression … is a sequence of characters that define a search pattern. Usually such patterns are used by string searching algorithms for “find” or “find and replace” operations on strings, or for input validation. It is a technique developed in theoretical computer science and formal language theory."
  },
  {
    "objectID": "slides/2024-01-12-regex2.html",
    "href": "slides/2024-01-12-regex2.html",
    "title": "Regular Expressions II",
    "section": "",
    "text": "A lookaround specifies a place in the regular expression that will anchor the string you’d like to match.\n\n“x(?=y)” – positive lookahead (matches ‘x’ when it is followed by ‘y’)\n“x(?!y)” – negative lookahead (matches ‘x’ when it is not followed by ‘y’)\n“x(?&lt;=y)” – positive lookbehind (matches ‘x’ when it is preceded by ‘y’)\n“x(?&lt;!y)” – negative lookbehind (matches ‘x’ when it is not preceded by ‘y’)"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#footnotes",
    "href": "slides/2024-01-12-regex2.html#footnotes",
    "title": "Regular Expressions II",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThanks to Ciaran Evans at Wake Forest University for example and code, https://sta279-f23.github.io/↩︎"
  },
  {
    "objectID": "slides/2024-01-08-db.html#tables-in-airlines-database",
    "href": "slides/2024-01-08-db.html#tables-in-airlines-database",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "Tables in airlines database",
    "text": "Tables in airlines database\n\nDBI::dbListTables(con_air)\n\n[1] \"airports\" \"carriers\" \"flights\"  \"planes\""
  },
  {
    "objectID": "slides/2024-01-08-db.html#what-is-sql",
    "href": "slides/2024-01-08-db.html#what-is-sql",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "What is SQL?",
    "text": "What is SQL?\n\nSQL is a programming language for working with relational databases.\nSQL has been around since the 1970s, but has, unfortunately, many different dialects.\nTo connect to the Smith and mdsr databases (via R and DBeaver), we will use MySQL.\nTo connect to DuckDB, we will use the dialect native to DuckDB."
  },
  {
    "objectID": "slides/2024-01-08-db.html#a-github-merge-conflict",
    "href": "slides/2024-01-08-db.html#a-github-merge-conflict",
    "title": "Databases and dbplyr and SQL, oh my!",
    "section": "A GitHub merge conflict",
    "text": "A GitHub merge conflict\n\nOn GitHub (on the web) edit the README document and Commit it with a message describing what you did.\nThen, in RStudio also edit the README document with a different change.\n\nCommit your changes\nTry to push – you’ll get an error!\nTry pulling\nResolve the merge conflict and then commit and push\n\nAs you work in teams you are likely to run into merge conflicts, learning how to resolve them properly will be very important."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#select-distinct",
    "href": "slides/2024-01-09-clauses.html#select-distinct",
    "title": "SQL clauses",
    "section": "SELECT DISTINCT",
    "text": "SELECT DISTINCT\nReturns only unique rows.\n\nSELECT DISTINCT payment_type\nFROM yellow_old\nLIMIT 0, 20;\n\n\n\n\n6 records\n\n\n\n\npayment_type\n\n\n\n\n\n\n\n\n\n\nCRD\n\n\n\n\nCSH\n\n\n\n\nNOC\n\n\n\n\nDIS\n\n\n\n\nUNK\n\n\n\n\n\n\n\n\nSELECT DISTINCT vendor_id, payment_type\nFROM yellow_old\nLIMIT 0, 20;\n\n\n\n\n8 records\n\n\n\n\nvendor_id\n\n\npayment_type\n\n\n\n\n\n\n\n\n\n\n\n\nCMT\n\n\nCRD\n\n\n\n\nCMT\n\n\nCSH\n\n\n\n\nCMT\n\n\nNOC\n\n\n\n\nCMT\n\n\nDIS\n\n\n\n\nVTS\n\n\nCRD\n\n\n\n\nVTS\n\n\nCSH\n\n\n\n\nVTS\n\n\nUNK\n\n\n\n\n\n\n\nIn case you are curious:\n\nVTS is Verifone Transportation Systems and CMT is Mobile Knowledge Systems Inc.\nCRD is credit card; CSH is cash; NOC is no charge; DIS is dispute"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#where-6",
    "href": "slides/2024-01-09-clauses.html#where-6",
    "title": "SQL clauses",
    "section": "WHERE",
    "text": "WHERE\nIS NULL not = NULL (because NULL indicates unknown)\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE payment_type IS NULL\nLIMIT 0, 10;\n\n\n\n\n1 records\n\n\n\n\npayment_type\n\n\nfare_amount\n\n\ntip_amount\n\n\ntotal_amount\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSELECT payment_type, fare_amount, tip_amount, total_amount\nFROM yellow_old\nWHERE payment_type = NULL\nLIMIT 0, 10;\n\n\n\n\n0 records\n\n\n\n\npayment_type\n\n\nfare_amount\n\n\ntip_amount\n\n\ntotal_amount"
  },
  {
    "objectID": "handout/lab3_joins_sds261_j24.html#best-practice",
    "href": "handout/lab3_joins_sds261_j24.html#best-practice",
    "title": "Lab 3 - SQL joins",
    "section": "Best practice",
    "text": "Best practice\nIt is always a good idea to terminate the SQL connection when you are done with it.\n\nDBI::dbDisconnect(con_yelp)"
  },
  {
    "objectID": "handout/lab3_joins_sds261_j24_sol.html#best-practice",
    "href": "handout/lab3_joins_sds261_j24_sol.html#best-practice",
    "title": "Lab 3 - SQL joins",
    "section": "Best practice",
    "text": "Best practice\nIt is always a good idea to terminate the SQL connection when you are done with it.\n\nDBI::dbDisconnect(con_yelp)"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#imdb",
    "href": "slides/2024-01-10-joins.html#imdb",
    "title": "SQL joins",
    "section": "IMDb",
    "text": "IMDb\nConsider a database of information from IMDb."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#join-imdb-title-votes",
    "href": "slides/2024-01-10-joins.html#join-imdb-title-votes",
    "title": "SQL joins",
    "section": "JOIN IMDb title + votes",
    "text": "JOIN IMDb title + votes\nIn the imdb database, the title table includes information about the 4,626,322 titles in the database, including the id, title, kind_id (indicator for the kind of ID it is), and production_year. It does not, however, include the review of the title.\n\nSELECT * FROM title LIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nid\n\n\ntitle\n\n\nimdb_index\n\n\nkind_id\n\n\nproduction_year\n\n\nimdb_id\n\n\nphonetic_code\n\n\nepisode_of_id\n\n\nseason_nr\n\n\nepisode_nr\n\n\nseries_years\n\n\nmd5sum\n\n\n\n\n\n\n78460\n\n\nAdults Recat to the Simpsons (30th Anniversary)\n\n\n\n\n7\n\n\n2017\n\n\n\n\nA3432\n\n\n78406\n\n\n\n\n\n\n\n\n2ae09eed7d576cc2c24774fed5b18168\n\n\n\n\n70273\n\n\n(2016-05-18)\n\n\n\n\n7\n\n\n2016\n\n\n\n\n\n\n68058\n\n\n\n\n\n\n\n\n511dfc14cfff7589d29a95abb30cd66a\n\n\n\n\n60105\n\n\n(2014-04-11)\n\n\n\n\n7\n\n\n2014\n\n\n\n\n\n\n59138\n\n\n\n\n\n\n\n\nc6cdce7e667e07713e431805c407feed\n\n\n\n\n32120\n\n\n(2008-05-01)\n\n\n\n\n7\n\n\n2008\n\n\n\n\n\n\n32060\n\n\n\n\n\n\n\n\n100df65742caf5afd092b2e0ead67d8e\n\n\n\n\n97554\n\n\nSchmÃ¶lders Traum\n\n\n\n\n7\n\n\n2001\n\n\n\n\nS2543\n\n\n97302\n\n\n10\n\n\n1\n\n\n\n\n46862a2f96f9fb2d59e8c9a11ecfdd28\n\n\n\n\n57966\n\n\n(#1.1)\n\n\n\n\n7\n\n\n2013\n\n\n\n\n\n\n57965\n\n\n1\n\n\n1\n\n\n\n\n409c37703766c4b24f8a86162fd9cf85\n\n\n\n\n76391\n\n\nAnniversary\n\n\n\n\n7\n\n\n1971\n\n\n\n\nA5162\n\n\n76385\n\n\n4\n\n\n9\n\n\n\n\n5e12ce73fac1d1dcf94136b6e9acd8f8\n\n\n\n\n11952\n\n\nAngus Black/Lester Barrie/DC Curry\n\n\n\n\n7\n\n\n2009\n\n\n\n\nA5214\n\n\n11937\n\n\n4\n\n\n7\n\n\n\n\n9c38b9e5601dc154444b73b518034aa1\n\n\n\n\n1554\n\n\nNew Orleans\n\n\n\n\n7\n\n\n2003\n\n\n\n\nN6452\n\n\n1508\n\n\n2\n\n\n11\n\n\n\n\n621bea735740a547e862e4a3226f35d2\n\n\n\n\n58442\n\n\nKiss Me Kate\n\n\n\n\n7\n\n\n2011\n\n\n\n\nK2523\n\n\n58436\n\n\n1\n\n\n10\n\n\n\n\n293e8c75c7f35a4035abf617962be5a9"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#join-imdb-title-votes-1",
    "href": "slides/2024-01-10-joins.html#join-imdb-title-votes-1",
    "title": "SQL joins",
    "section": "JOIN IMDb title + votes",
    "text": "JOIN IMDb title + votes\nThe movie_info_idx table does not contain much information about each particular film. It does, however, have an indicator for the movie ID (given by movie_id) as well as the number of votes (given by info where type_id = 100).\n\nSELECT * FROM movie_info_idx LIMIT 0, 6;\n\n\n\n\n6 records\n\n\n\n\nid\n\n\nmovie_id\n\n\ninfo_type_id\n\n\ninfo\n\n\nnote\n\n\n\n\n\n\n1\n\n\n1\n\n\n99\n\n\n31.2.1..2.\n\n\n\n\n\n\n2\n\n\n1\n\n\n100\n\n\n9\n\n\n\n\n\n\n3\n\n\n1\n\n\n101\n\n\n4.1\n\n\n\n\n\n\n4\n\n\n2\n\n\n99\n\n\n1000000102\n\n\n\n\n\n\n5\n\n\n2\n\n\n100\n\n\n61\n\n\n\n\n\n\n6\n\n\n2\n\n\n101\n\n\n6.4"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#join-imdb-title-votes-2",
    "href": "slides/2024-01-10-joins.html#join-imdb-title-votes-2",
    "title": "SQL joins",
    "section": "JOIN IMDb title + votes",
    "text": "JOIN IMDb title + votes\n\ncombine the titles with the number of votes so that each title with user votes is included (INNER JOIN)\n\n\nSELECT title.id,\n       title.title,\n       movie_info_idx.info\nFROM title\nJOIN movie_info_idx ON title.id = movie_info_idx.movie_id \nWHERE title.production_year = 2015 \n    AND title.kind_id = 1                  # movies only\n    AND movie_info_idx.info_type_id = 100  # info_type is votes\n    AND movie_info_idx.info &gt; 150000       # at least 150,000 votes\nORDER BY movie_info_idx.info DESC\nLIMIT 0, 20;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nid\n\n\ntitle\n\n\ninfo\n\n\n\n\n\n\n4260166\n\n\nStar Wars: Episode VII - The Force Awakens\n\n\n691691\n\n\n\n\n3915213\n\n\nMad Max: Fury Road\n\n\n666484\n\n\n\n\n4389619\n\n\nThe Martian\n\n\n583987\n\n\n\n\n3313672\n\n\nAvengers: Age of Ultron\n\n\n540606\n\n\n\n\n4414139\n\n\nThe Revenant\n\n\n526189\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n471237\n\n\n\n\n3752999\n\n\nInside Out\n\n\n443051\n\n\n\n\n3292159\n\n\nAnt-Man\n\n\n390965\n\n\n\n\n4364483\n\n\nThe Hateful Eight\n\n\n363199\n\n\n\n\n4251736\n\n\nSpectre\n\n\n319875\n\n\n\n\n\n\n\nSome aspects of the query are worth pointing out:\n* The variables in the output are given in the SELECT clause. The id and title (both from the title table) and the info from the movie_info_idx which represents the number of IMDb votes. * The variables are preceded by the table from which they came. While not always necessary, it is good practice so as to avoid confusion. * The JOIN happens by linking the id variable in the title table with the movie_id variable in the movie_info_idx table. * The LIMIT wasn’t necessary (there are only 12 observations), but it’s good practice so that we don’t end up with unwieldy query results. * The WHERE clause happens before the JOIN action, despite being written after. * In the WHERE clause, we keep only movies, only 2015 production year, and only at least 150,000 votes."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#join-imdb-title-actress",
    "href": "slides/2024-01-10-joins.html#join-imdb-title-actress",
    "title": "SQL joins",
    "section": "JOIN IMDb title + actress",
    "text": "JOIN IMDb title + actress\ncast_info contains the person_id and the movie_id\n\nSELECT * FROM cast_info LIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nid\n\n\nperson_id\n\n\nmovie_id\n\n\nperson_role_id\n\n\nnote\n\n\nnr_order\n\n\nrole_id\n\n\n\n\n\n\n1\n\n\n1\n\n\n3432997\n\n\n1\n\n\n\n\n31\n\n\n1\n\n\n\n\n2\n\n\n2\n\n\n1901690\n\n\n2\n\n\n\n\n\n\n1\n\n\n\n\n3\n\n\n3\n\n\n4027567\n\n\n2\n\n\n\n\n25\n\n\n1\n\n\n\n\n4\n\n\n3\n\n\n4282876\n\n\n3\n\n\n\n\n22\n\n\n1\n\n\n\n\n5\n\n\n4\n\n\n3542672\n\n\n\n\n\n\n12\n\n\n1\n\n\n\n\n6\n\n\n5\n\n\n3331520\n\n\n4\n\n\n(as $hutter Boy)\n\n\n10\n\n\n1\n\n\n\n\n7\n\n\n5\n\n\n4027191\n\n\n2\n\n\n(as $hutter Boy)\n\n\n1\n\n\n1\n\n\n\n\n8\n\n\n5\n\n\n4195731\n\n\n5\n\n\n(uncredited)\n\n\n\n\n1\n\n\n\n\n9\n\n\n5\n\n\n4263956\n\n\n6\n\n\n(uncredited)\n\n\n\n\n1\n\n\n\n\n10\n\n\n5\n\n\n4267787\n\n\n7\n\n\n(uncredited)\n\n\n\n\n1\n\n\n\n\n\n\n\nperson_role_id is 1 if actor and 2 if actress"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#join-imdb-title-actress-1",
    "href": "slides/2024-01-10-joins.html#join-imdb-title-actress-1",
    "title": "SQL joins",
    "section": "JOIN IMDb title + actress",
    "text": "JOIN IMDb title + actress\naka_name contains person_id and name (of actor)\n\nSELECT * FROM aka_name LIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nid\n\n\nperson_id\n\n\nname\n\n\nimdb_index\n\n\nname_pcode_cf\n\n\nname_pcode_nf\n\n\nsurname_pcode\n\n\nmd5sum\n\n\n\n\n\n\n1\n\n\n6188450\n\n\nSmith, Jessica Noel\n\n\n\n\nS5325\n\n\nJ2542\n\n\nS53\n\n\n25c9d464e3ff2957533546aa92b397ed\n\n\n\n\n2\n\n\n5125059\n\n\nPain, L. $ham\n\n\n\n\nP545\n\n\nL515\n\n\nP5\n\n\n569b1e885ccb51211c01753f0dad9b2c\n\n\n\n\n3\n\n\n5\n\n\nBoy, $hutter\n\n\n\n\nB36\n\n\nH361\n\n\nB\n\n\n35092b5604ce378fc48c8a6fc0038a49\n\n\n\n\n4\n\n\n4152053\n\n\nDollasign, Ty\n\n\n\n\nD4253\n\n\nT3425\n\n\nD425\n\n\n0f565a2d8027cfb8ed6c5f4bba719fcd\n\n\n\n\n5\n\n\n4152053\n\n\nSign, Ty Dolla\n\n\n\n\nS2534\n\n\nT3425\n\n\nS25\n\n\n2eded1b021b96333b4b74e0fec959650\n\n\n\n\n6\n\n\n6\n\n\nMoore, Brandon\n\n\n\n\nM6165\n\n\nB6535\n\n\nM6\n\n\n193a6f5adf4756320f622162d2475608\n\n\n\n\n7\n\n\n8\n\n\n$torm, Country\n\n\n\n\nT6525\n\n\nC5363\n\n\nT65\n\n\n1654400b707d34323ea392b87060e6cc\n\n\n\n\n8\n\n\n19\n\n\n‘Hooper’, Simon P.J. Kelly\n\n\n\n\nH1625\n\n\nS5124\n\n\nH16\n\n\n3fd8885372c23f8c74e583da91d1fd05\n\n\n\n\n9\n\n\n19\n\n\nHooper\n\n\n\n\nH16\n\n\n\n\n\n\n24ddc68ab605ee95857ad45b65ffa2d8\n\n\n\n\n10\n\n\n19\n\n\nKelly, Simon P.J.\n\n\n\n\nK4251\n\n\nS5124\n\n\nK4\n\n\n33d976f22e276b73c61513bc5f6e72a6"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#join-imdb-title-actress-2",
    "href": "slides/2024-01-10-joins.html#join-imdb-title-actress-2",
    "title": "SQL joins",
    "section": "JOIN IMDb title + actress",
    "text": "JOIN IMDb title + actress\ntitle contains id and title (of the movie)\n\nSELECT * FROM title LIMIT 0, 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nid\n\n\ntitle\n\n\nimdb_index\n\n\nkind_id\n\n\nproduction_year\n\n\nimdb_id\n\n\nphonetic_code\n\n\nepisode_of_id\n\n\nseason_nr\n\n\nepisode_nr\n\n\nseries_years\n\n\nmd5sum\n\n\n\n\n\n\n78460\n\n\nAdults Recat to the Simpsons (30th Anniversary)\n\n\n\n\n7\n\n\n2017\n\n\n\n\nA3432\n\n\n78406\n\n\n\n\n\n\n\n\n2ae09eed7d576cc2c24774fed5b18168\n\n\n\n\n70273\n\n\n(2016-05-18)\n\n\n\n\n7\n\n\n2016\n\n\n\n\n\n\n68058\n\n\n\n\n\n\n\n\n511dfc14cfff7589d29a95abb30cd66a\n\n\n\n\n60105\n\n\n(2014-04-11)\n\n\n\n\n7\n\n\n2014\n\n\n\n\n\n\n59138\n\n\n\n\n\n\n\n\nc6cdce7e667e07713e431805c407feed\n\n\n\n\n32120\n\n\n(2008-05-01)\n\n\n\n\n7\n\n\n2008\n\n\n\n\n\n\n32060\n\n\n\n\n\n\n\n\n100df65742caf5afd092b2e0ead67d8e\n\n\n\n\n97554\n\n\nSchmÃ¶lders Traum\n\n\n\n\n7\n\n\n2001\n\n\n\n\nS2543\n\n\n97302\n\n\n10\n\n\n1\n\n\n\n\n46862a2f96f9fb2d59e8c9a11ecfdd28\n\n\n\n\n57966\n\n\n(#1.1)\n\n\n\n\n7\n\n\n2013\n\n\n\n\n\n\n57965\n\n\n1\n\n\n1\n\n\n\n\n409c37703766c4b24f8a86162fd9cf85\n\n\n\n\n76391\n\n\nAnniversary\n\n\n\n\n7\n\n\n1971\n\n\n\n\nA5162\n\n\n76385\n\n\n4\n\n\n9\n\n\n\n\n5e12ce73fac1d1dcf94136b6e9acd8f8\n\n\n\n\n11952\n\n\nAngus Black/Lester Barrie/DC Curry\n\n\n\n\n7\n\n\n2009\n\n\n\n\nA5214\n\n\n11937\n\n\n4\n\n\n7\n\n\n\n\n9c38b9e5601dc154444b73b518034aa1\n\n\n\n\n1554\n\n\nNew Orleans\n\n\n\n\n7\n\n\n2003\n\n\n\n\nN6452\n\n\n1508\n\n\n2\n\n\n11\n\n\n\n\n621bea735740a547e862e4a3226f35d2\n\n\n\n\n58442\n\n\nKiss Me Kate\n\n\n\n\n7\n\n\n2011\n\n\n\n\nK2523\n\n\n58436\n\n\n1\n\n\n10\n\n\n\n\n293e8c75c7f35a4035abf617962be5a9"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#join-imdb-title-actress-3",
    "href": "slides/2024-01-10-joins.html#join-imdb-title-actress-3",
    "title": "SQL joins",
    "section": "JOIN IMDb title + actress",
    "text": "JOIN IMDb title + actress\nGoal: identify the actresses in those movies with the highest number of votes.\n\nSELECT t.title,\n       idx.info,\n       a.person_id,\n       n.name\nFROM title AS t\nJOIN movie_info_idx AS idx ON t.id = idx.movie_id \nJOIN cast_info AS a ON idx.movie_id = a.movie_id\nJOIN aka_name AS n ON a.person_id = n.person_id\nWHERE t.production_year = 2015 \n    AND t.kind_id = 1           # movies only\n    AND idx.info_type_id = 100  # info_type is votes\n    AND idx.info &gt; 150000       # at least 150,000 votes\n    AND a.role_id = 2           # actresses only\nORDER BY a.person_id\nLIMIT 0, 50;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\ntitle\n\n\ninfo\n\n\nperson_id\n\n\nname\n\n\n\n\n\n\nMission: Impossible - Rogue Nation\n\n\n266759\n\n\n2674172\n\n\nSofz\n\n\n\n\nMission: Impossible - Rogue Nation\n\n\n266759\n\n\n2674172\n\n\nSof\n\n\n\n\nMission: Impossible - Rogue Nation\n\n\n266759\n\n\n2674172\n\n\nSofz\n\n\n\n\nMission: Impossible - Rogue Nation\n\n\n266759\n\n\n2674172\n\n\nSof\n\n\n\n\nFocus\n\n\n172680\n\n\n2678594\n\n\nLabouisse, Kate\n\n\n\n\nMad Max: Fury Road\n\n\n666484\n\n\n2681098\n\n\nMichelle, Debra\n\n\n\n\nThe Hunger Games: Mockingjay - Part 2\n\n\n214569\n\n\n2685496\n\n\nHarris, Ahnie\n\n\n\n\nThe Hunger Games: Mockingjay - Part 2\n\n\n214569\n\n\n2685496\n\n\nHarris, Jasmine\n\n\n\n\nCreed\n\n\n183904\n\n\n2686218\n\n\nKareema, Kiana A.\n\n\n\n\nAnt-Man\n\n\n390965\n\n\n2687271\n\n\nAkana, Anna Kay\n\n\n\n\n\n\n\nConnecting the most popular movies of 2015 with the actresses in those movies requires a series of JOINs. Note that to make the code less onerous, the title table has been aliased by t, the movie_info_idx table has been aliased by idx, the cast_info table has been aliased by a, and the aka_name table has been aliased by n.\nThere is a lot of data cleaning to do as some of the person_id values are one to many!! That is, the person_id matches multiple names in the aka_name database."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#other-joins",
    "href": "slides/2024-01-10-joins.html#other-joins",
    "title": "SQL joins",
    "section": "Other JOINs",
    "text": "Other JOINs\nLet’s look at RIGHT JOIN and LEFT JOIN using two new smaller tables.\n\nThe first has seven movies in it (from 2015 with at least 400,000 IMDb votes).\nThe second consists of almost 3 million actresses (person_role_id = 2). In order to find a subset of actresses, the person_id &gt; 3900000 was set arbitrarily (in order to have a smaller group with which to work).\n\nUsing subqueries, we can JOIN the two datasets using different JOIN techniques."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#unioning",
    "href": "slides/2024-01-10-joins.html#unioning",
    "title": "SQL joins",
    "section": "UNIONing",
    "text": "UNIONing\nIn SQL a UNION clause combines two different tables by their rows (whereas JOIN combines two tables by columns). Think about UNION similarly to the bind_rows() command in R.\n\nFigure 3: UNION binds rows while JOIN appends columns, image credit: Jane Williams https://blog.devart.com/mysql-union-tutorial-html.html"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#best-practice",
    "href": "slides/2024-01-10-joins.html#best-practice",
    "title": "SQL joins",
    "section": "Best practice",
    "text": "Best practice\nIt is always a good idea to terminate the SQL connection when you are done with it.\n\nDBI::dbDisconnect(con_imdb, shutdown = TRUE)"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#imdb-1",
    "href": "slides/2024-01-10-joins.html#imdb-1",
    "title": "SQL joins",
    "section": "IMDb",
    "text": "IMDb\n21 tables in the imdb database! Lots of details on movies, TV series, video games, and more. Today interest is in movies (and details within, like actors and ratings).\n\nSHOW TABLES;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nTables_in_imdb\n\n\n\n\n\n\naka_name\n\n\n\n\naka_title\n\n\n\n\ncast_info\n\n\n\n\nchar_name\n\n\n\n\ncomp_cast_type\n\n\n\n\ncompany_name\n\n\n\n\ncompany_type\n\n\n\n\ncomplete_cast\n\n\n\n\ninfo_type\n\n\n\n\nkeyword"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#imdb---glance-through-tables",
    "href": "slides/2024-01-10-joins.html#imdb---glance-through-tables",
    "title": "SQL joins",
    "section": "IMDb - glance through tables",
    "text": "IMDb - glance through tables\n\nSELECT * FROM kind_type\nLIMIT 0, 10;\n\n\n\n\n7 records\n\n\n\n\nid\n\n\nkind\n\n\n\n\n\n\n1\n\n\nmovie\n\n\n\n\n2\n\n\ntv series\n\n\n\n\n3\n\n\ntv movie\n\n\n\n\n4\n\n\nvideo movie\n\n\n\n\n5\n\n\ntv mini series\n\n\n\n\n6\n\n\nvideo game\n\n\n\n\n7\n\n\nepisode"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#all-the-joins",
    "href": "slides/2024-01-10-joins.html#all-the-joins",
    "title": "SQL joins",
    "section": "All the JOINs",
    "text": "All the JOINs\n\nJOIN (aka INNER JOIN): include all of the rows that exist in both tables\nLEFT JOIN: include all of the rows in the first table.\n\nRIGHT JOIN: include all of the rows in the second table.\nFULL OUTER JOIN: include all rows in either table. (The functionality doesn’t exist in MySQL but can be created using joins and UNION.)\nCROSS JOIN: match each row of the first table with each row in the second table."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#all-the-joins-1",
    "href": "slides/2024-01-10-joins.html#all-the-joins-1",
    "title": "SQL joins",
    "section": "All the JOINs",
    "text": "All the JOINs\nVenn diagrams of the different types of joins.\n\nFigure 1: Venn diagrams describing different JOINs, image credit: phoenixNAP https://phoenixnap.com/kb/mysql-join"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#all-the-joins-2",
    "href": "slides/2024-01-10-joins.html#all-the-joins-2",
    "title": "SQL joins",
    "section": "All the JOINs",
    "text": "All the JOINs\nMini data tables of the different types of JOIN. (In SQL the missing values will be labeled as NULL (not NA).)\n\nFigure 2: Mini data tables describing different JOINs, image credit: Statistics Globe blog, https://statisticsglobe.com/r-dplyr-join-inner-left-right-full-semi-anti"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#all-the-joins-3",
    "href": "slides/2024-01-10-joins.html#all-the-joins-3",
    "title": "SQL joins",
    "section": "All the JOINs",
    "text": "All the JOINs\nEach JOIN clause needs four specific pieces of information:\n\nThe name of the first table you want to JOIN.\nThe type of JOIN being used.\nThe name of the second table you want to JOIN.\nThe condition(s) under which you want the records in the first table to match records in the second table."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#a-toy-example",
    "href": "slides/2024-01-10-joins.html#a-toy-example",
    "title": "SQL joins",
    "section": "A toy example",
    "text": "A toy example\nRock bands from the 60s.\n\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\nThe function sqldf() in the sqldf R package allows for SQL commands on R objects."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#rock-bands---inner-join",
    "href": "slides/2024-01-10-joins.html#rock-bands---inner-join",
    "title": "SQL joins",
    "section": "Rock bands - INNER JOIN",
    "text": "Rock bands - INNER JOIN\nAn inner join combines two datasets returning only the observations that exist in both of the original datasets.\n\nsqldf::sqldf(\"SELECT star.name,\n                     star.band,\n                     inst.plays\n              FROM band_members AS star\n              JOIN band_instruments AS inst ON star.name = inst.name\")\n\n  name    band  plays\n1 John Beatles guitar\n2 Paul Beatles   bass"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#rock-bands---full-join",
    "href": "slides/2024-01-10-joins.html#rock-bands---full-join",
    "title": "SQL joins",
    "section": "Rock bands - FULL JOIN",
    "text": "Rock bands - FULL JOIN\nA full join combines two datasets returning every observation that exists in either one of the original datasets.\n\nband_members |&gt;\n  full_join(band_instruments)\n\n# A tibble: 4 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith &lt;NA&gt;    guitar\n\n\nThe full_join() function does not have an equivalent in MySQL. See notes for using JOINs and UNIONs to produce a full join."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#rock-bands---left-join",
    "href": "slides/2024-01-10-joins.html#rock-bands---left-join",
    "title": "SQL joins",
    "section": "Rock bands - LEFT JOIN",
    "text": "Rock bands - LEFT JOIN\nA left join combines two datasets returning every observation that exists in the left (or first) original dataset.\n\nsqldf::sqldf(\"SELECT star.name,\n                     star.band,\n                      inst.plays\n              FROM band_members AS star\n              LEFT JOIN band_instruments AS inst \n              ON star.name = inst.name\")\n\n  name    band  plays\n1 Mick  Stones   &lt;NA&gt;\n2 John Beatles guitar\n3 Paul Beatles   bass"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#rock-bands---right-join",
    "href": "slides/2024-01-10-joins.html#rock-bands---right-join",
    "title": "SQL joins",
    "section": "Rock bands - RIGHT JOIN",
    "text": "Rock bands - RIGHT JOIN\nA right join combines two datasets returning every observation that exists in the right (or second) original dataset.\n\nsqldf::sqldf(\"SELECT inst.name,\n                     star.band,\n                      inst.plays\n              FROM band_members AS star\n              RIGHT JOIN band_instruments AS inst \n              ON star.name = inst.name\")\n\n   name    band  plays\n1  John Beatles guitar\n2  Paul Beatles   bass\n3 Keith    &lt;NA&gt; guitar"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#rock-bands---cross-join",
    "href": "slides/2024-01-10-joins.html#rock-bands---cross-join",
    "title": "SQL joins",
    "section": "Rock bands - CROSS JOIN",
    "text": "Rock bands - CROSS JOIN\nA right join combines two datasets returning every observation that exists in the right (or second) original dataset.\n\nsqldf::sqldf(\"SELECT *\n              FROM band_members AS star\n              CROSS JOIN band_instruments AS inst\")\n\n  name    band  name  plays\n1 Mick  Stones  John guitar\n2 Mick  Stones  Paul   bass\n3 Mick  Stones Keith guitar\n4 John Beatles  John guitar\n5 John Beatles  Paul   bass\n6 John Beatles Keith guitar\n7 Paul Beatles  John guitar\n8 Paul Beatles  Paul   bass\n9 Paul Beatles Keith guitar"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#movies",
    "href": "slides/2024-01-10-joins.html#movies",
    "title": "SQL joins",
    "section": "movies:",
    "text": "movies:\n\nSELECT t.id,\n       t.title,\n       idx.info,\n       (SELECT COUNT(*)\n       FROM title AS t\n       JOIN movie_info_idx AS idx ON idx.movie_id = t.id\n       WHERE t.production_year = 2015  \n             AND t.kind_id = 1\n             AND idx.info_type_id = 100\n             AND idx.info &gt; 400000) AS row_count\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1             # movies only\n    AND idx.info_type_id = 100    # info_type is votes\n    AND idx.info &gt; 400000         # at least 400,000 votes\nORDER BY idx.info DESC;\n\n\n\n\n7 records\n\n\n\n\nid\n\n\ntitle\n\n\ninfo\n\n\nrow_count\n\n\n\n\n\n\n4260166\n\n\nStar Wars: Episode VII - The Force Awakens\n\n\n691691\n\n\n7\n\n\n\n\n3915213\n\n\nMad Max: Fury Road\n\n\n666484\n\n\n7\n\n\n\n\n4389619\n\n\nThe Martian\n\n\n583987\n\n\n7\n\n\n\n\n3313672\n\n\nAvengers: Age of Ultron\n\n\n540606\n\n\n7\n\n\n\n\n4414139\n\n\nThe Revenant\n\n\n526189\n\n\n7\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n471237\n\n\n7\n\n\n\n\n3752999\n\n\nInside Out\n\n\n443051\n\n\n7"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#actresses",
    "href": "slides/2024-01-10-joins.html#actresses",
    "title": "SQL joins",
    "section": "actresses:",
    "text": "actresses:\n\n\nSELECT a.person_id,\n       a.movie_id,\n       n.name,\n       (SELECT COUNT(*)\n       FROM cast_info AS a\n       JOIN aka_name AS n ON a.person_id = n.person_id\n       WHERE a.person_role_id = 2  \n             AND a.person_id &gt; 390000) AS row_count\nFROM cast_info AS a\nJOIN aka_name AS n ON a.person_id = n.person_id\n       WHERE a.person_role_id = 2  \n             AND a.person_id &gt; 3900000\nLIMIT 0, 20;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nperson_id\n\n\nmovie_id\n\n\nname\n\n\nrow_count\n\n\n\n\n\n\n3900141\n\n\n759802\n\n\nSimons, Rita Joanne\n\n\n2904759\n\n\n\n\n3902258\n\n\n4365829\n\n\nSinger, Rabbi Tovia\n\n\n2904759\n\n\n\n\n3902699\n\n\n3109788\n\n\nSingh, Sabine Erika\n\n\n2904759\n\n\n\n\n3903035\n\n\n3215866\n\n\nVal\n\n\n2904759\n\n\n\n\n3904831\n\n\n2468067\n\n\nMasha\n\n\n2904759\n\n\n\n\n3904928\n\n\n3654347\n\n\nFei, Siu Yin\n\n\n2904759\n\n\n\n\n3904928\n\n\n3654347\n\n\nHsiao, Yen-fei\n\n\n2904759\n\n\n\n\n3904928\n\n\n3654347\n\n\nSiu, Yinfei\n\n\n2904759\n\n\n\n\n3904928\n\n\n3654347\n\n\nXiao, Yanfei\n\n\n2904759\n\n\n\n\n3904928\n\n\n3654347\n\n\nYin-Fai, Siu\n\n\n2904759"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#inner-join",
    "href": "slides/2024-01-10-joins.html#inner-join",
    "title": "SQL joins",
    "section": "Inner JOIN",
    "text": "Inner JOIN\nWith an inner JOIN, there are 32 rows corresponding to all the actresses in the seven 2015 films with the most votes. Because the JOIN is an intersection of the two tables, only the actresses with person_id above 3900000 are included.\n\nSELECT * FROM\n(SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info &gt; 400000) AS movs  # at least 400,000 votes     \nINNER JOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id &gt; 3900000) AS acts ON acts.movie_id = movs.id\nLIMIT 0, 300;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nid\n\n\ntitle\n\n\nperson_id\n\n\nmovie_id\n\n\nname\n\n\n\n\n\n\n3313672\n\n\nAvengers: Age of Ultron\n\n\n3916648\n\n\n3313672\n\n\nSmulders, Jacoba Francisca Maria\n\n\n\n\n3752999\n\n\nInside Out\n\n\n4122876\n\n\n3752999\n\n\nKuzniar, Lennon Wynn\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n3938423\n\n\n3787790\n\n\nNorvell, Ingrid\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n3938423\n\n\n3787790\n\n\nNorvell, Ingrid\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n3950111\n\n\n3787790\n\n\nSallaway, Seannon Jane\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4079047\n\n\n3787790\n\n\nWashington, Kelly Lynn\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4079047\n\n\n3787790\n\n\nWashington, Kelly Lynn\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4084626\n\n\n3787790\n\n\nWeeks, Jency\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4084626\n\n\n3787790\n\n\nJenc\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4084626\n\n\n3787790\n\n\nLittle J"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#right-join",
    "href": "slides/2024-01-10-joins.html#right-join",
    "title": "SQL joins",
    "section": "RIGHT JOIN",
    "text": "RIGHT JOIN\nWith a RIGHT JOIN, there are more than 300 rows (the LIMIT clause keeps us from knowing how many rows, but there are a LOT!) corresponding to all the actresses whose person_id above 3900000 are included. Those actresses who acted in one of the seven top 2015 films are also included in the full results table, but they don’t happen to be in the truncated output here.\n\nSELECT * FROM\n(SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info &gt; 400000) AS movs  # at least 400,000 votes     \nRIGHT JOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id &gt; 3900000) AS acts ON acts.movie_id = movs.id\nLIMIT 0, 300;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nid\n\n\ntitle\n\n\nperson_id\n\n\nmovie_id\n\n\nname\n\n\n\n\n\n\n\n\n\n\n3900001\n\n\n3355298\n\n\nSimonis, Heidi\n\n\n\n\n\n\n\n\n3900001\n\n\n3509490\n\n\nSimonis, Heidi\n\n\n\n\n\n\n\n\n3900001\n\n\n3739780\n\n\nSimonis, Heidi\n\n\n\n\n\n\n\n\n3900001\n\n\n3943329\n\n\nSimonis, Heidi\n\n\n\n\n\n\n\n\n3900001\n\n\n165963\n\n\nSimonis, Heidi\n\n\n\n\n\n\n\n\n3900001\n\n\n268249\n\n\nSimonis, Heidi\n\n\n\n\n\n\n\n\n3900001\n\n\n268370\n\n\nSimonis, Heidi\n\n\n\n\n\n\n\n\n3900001\n\n\n268406\n\n\nSimonis, Heidi\n\n\n\n\n\n\n\n\n3900001\n\n\n268475\n\n\nSimonis, Heidi\n\n\n\n\n\n\n\n\n3900001\n\n\n279082\n\n\nSimonis, Heidi"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#left-join",
    "href": "slides/2024-01-10-joins.html#left-join",
    "title": "SQL joins",
    "section": "LEFT JOIN",
    "text": "LEFT JOIN\nWith a LEFT JOIN, there are 33 rows corresponding to the actresses in the seven top 2015 movies. Only The Revenant did not have any actresses whose person_id is greater than 3900000.\n\nSELECT * FROM\n(SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info &gt; 400000) AS movs  # at least 400,000 votes     \nLEFT JOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id &gt; 3900000) AS acts ON acts.movie_id = movs.id\nLIMIT 0, 300;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nid\n\n\ntitle\n\n\nperson_id\n\n\nmovie_id\n\n\nname\n\n\n\n\n\n\n3313672\n\n\nAvengers: Age of Ultron\n\n\n3916648\n\n\n3313672\n\n\nSmulders, Jacoba Francisca Maria\n\n\n\n\n3752999\n\n\nInside Out\n\n\n4122876\n\n\n3752999\n\n\nKuzniar, Lennon Wynn\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n3938423\n\n\n3787790\n\n\nNorvell, Ingrid\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n3938423\n\n\n3787790\n\n\nNorvell, Ingrid\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n3950111\n\n\n3787790\n\n\nSallaway, Seannon Jane\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4079047\n\n\n3787790\n\n\nWashington, Kelly Lynn\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4079047\n\n\n3787790\n\n\nWashington, Kelly Lynn\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4084626\n\n\n3787790\n\n\nWeeks, Jency\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4084626\n\n\n3787790\n\n\nJenc\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n4084626\n\n\n3787790\n\n\nLittle J"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#counting-repeat-actresses",
    "href": "slides/2024-01-10-joins.html#counting-repeat-actresses",
    "title": "SQL joins",
    "section": "Counting repeat actresses",
    "text": "Counting repeat actresses\nWe might, for example, want to know how many names / spellings of a name with a specific person_id (above 3900000) exist for each person_id in each of the top voted seven films of 2015.\n\nSELECT acts.person_id, \n       COUNT(*) AS num_repeat_names\nFROM (SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info &gt; 400000) AS movs  # at least 400,000 votes\nJOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id &gt; 3900000) AS acts ON acts.movie_id = movs.id\nGROUP BY acts.person_id;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nperson_id\n\n\nnum_repeat_names\n\n\n\n\n\n\n3916648\n\n\n1\n\n\n\n\n4122876\n\n\n1\n\n\n\n\n3938423\n\n\n2\n\n\n\n\n3950111\n\n\n1\n\n\n\n\n4079047\n\n\n2\n\n\n\n\n4084626\n\n\n3\n\n\n\n\n4099458\n\n\n1\n\n\n\n\n3958614\n\n\n1\n\n\n\n\n3990819\n\n\n2\n\n\n\n\n4081131\n\n\n2"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#counting-number-of-actresses-per-film",
    "href": "slides/2024-01-10-joins.html#counting-number-of-actresses-per-film",
    "title": "SQL joins",
    "section": "Counting number of actresses per film",
    "text": "Counting number of actresses per film\nWe might, for example, want to know how many actresses with a specific person_id (above 3900000) are in each of the top voted seven films of 2015.\n\nSELECT movs.id, \n       movs.title,\n       COUNT(*) AS num_actress\nFROM (SELECT t.id,\n       t.title\nFROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               # movies only\n    AND idx.info_type_id = 100      # info_type is votes\n    AND idx.info &gt; 400000) AS movs  # at least 400,000 votes\nJOIN (SELECT a.person_id,\n       a.movie_id,\n       n.name\n    FROM cast_info AS a\n    JOIN aka_name AS n ON a.person_id = n.person_id\n    WHERE a.role_id = 2             # acresses only\n        AND a.person_id &gt; 3900000) AS acts ON acts.movie_id = movs.id\nGROUP BY movs.id;\n\n\n\n\n6 records\n\n\n\n\nid\n\n\ntitle\n\n\nnum_actress\n\n\n\n\n\n\n3313672\n\n\nAvengers: Age of Ultron\n\n\n1\n\n\n\n\n3752999\n\n\nInside Out\n\n\n1\n\n\n\n\n3787790\n\n\nJurassic World\n\n\n9\n\n\n\n\n3915213\n\n\nMad Max: Fury Road\n\n\n5\n\n\n\n\n4260166\n\n\nStar Wars: Episode VII - The Force Awakens\n\n\n15\n\n\n\n\n4389619\n\n\nThe Martian\n\n\n1"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#unions",
    "href": "slides/2024-01-10-joins.html#unions",
    "title": "SQL joins",
    "section": "UNIONs",
    "text": "UNIONs\nSilly example where the column names are ignored.\n\nSELECT \n    1 AS bar,\n    2 AS foo\n\nUNION\n\nSELECT \n    10 AS foo,\n    20 AS bar;\n\n\n\n\n2 records\n\n\n\n\nbar\n\n\nfoo\n\n\n\n\n\n\n1\n\n\n2\n\n\n\n\n10\n\n\n20"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#union",
    "href": "slides/2024-01-10-joins.html#union",
    "title": "SQL joins",
    "section": "UNION",
    "text": "UNION\nUNION is specifically designed to bind rows from two different SELECT queries where the variables have been selected in the same order.\nCombine the top voted movies from 2015 with the top voted movies from 2019.\nHowever, to account for time, we require the movies from 2015 to have more votes (400,000) than the movies from 2017 (200,000).\nThat is, the WHERE clause is different for the two subqueries."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#union-1",
    "href": "slides/2024-01-10-joins.html#union-1",
    "title": "SQL joins",
    "section": "UNION",
    "text": "UNION\n\n(SELECT t.title, \n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info &gt; 400000)\n\nUNION\n\n(SELECT t.title, \n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2017  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info &gt; 200000)\nLIMIT 0, 100;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\ntitle\n\n\nproduction_year\n\n\nnum_votes\n\n\n\n\n\n\nAvengers: Age of Ultron\n\n\n2015\n\n\n540606\n\n\n\n\nInside Out\n\n\n2015\n\n\n443051\n\n\n\n\nJurassic World\n\n\n2015\n\n\n471237\n\n\n\n\nMad Max: Fury Road\n\n\n2015\n\n\n666484\n\n\n\n\nStar Wars: Episode VII - The Force Awakens\n\n\n2015\n\n\n691691\n\n\n\n\nThe Martian\n\n\n2015\n\n\n583987\n\n\n\n\nThe Revenant\n\n\n2015\n\n\n526189\n\n\n\n\nDunkirk\n\n\n2017\n\n\n229089\n\n\n\n\nGuardians of the Galaxy Vol. 2\n\n\n2017\n\n\n281845\n\n\n\n\nLogan\n\n\n2017\n\n\n397056"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#union-all",
    "href": "slides/2024-01-10-joins.html#union-all",
    "title": "SQL joins",
    "section": "UNION ALL",
    "text": "UNION ALL\nIf the goal is to include duplicates across two tables, use UNION ALL instead of UNION.\nLet’s say that the first table is all movies with production year after 2012 and number of votes greater than 500,000. The second table is movies with production year equal to 2015 and number of votes greater than 400,000.\nThe Martian would be in both tables."
  },
  {
    "objectID": "slides/2024-01-10-joins.html#union-all-1",
    "href": "slides/2024-01-10-joins.html#union-all-1",
    "title": "SQL joins",
    "section": "UNION ALL",
    "text": "UNION ALL\nWith just UNION\n\n(SELECT t.title,\n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year &gt; 2012  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info &gt; 500000)\n\nUNION\n\n(SELECT t.title, \n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info &gt; 400000)\nORDER BY production_year DESC, num_votes;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\ntitle\n\n\nproduction_year\n\n\nnum_votes\n\n\n\n\n\n\nBatman v Superman: Dawn of Justice\n\n\n2016\n\n\n500037\n\n\n\n\nDeadpool\n\n\n2016\n\n\n673887\n\n\n\n\nInside Out\n\n\n2015\n\n\n443051\n\n\n\n\nJurassic World\n\n\n2015\n\n\n471237\n\n\n\n\nThe Revenant\n\n\n2015\n\n\n526189\n\n\n\n\nAvengers: Age of Ultron\n\n\n2015\n\n\n540606\n\n\n\n\nThe Martian\n\n\n2015\n\n\n583987\n\n\n\n\nMad Max: Fury Road\n\n\n2015\n\n\n666484\n\n\n\n\nStar Wars: Episode VII - The Force Awakens\n\n\n2015\n\n\n691691\n\n\n\n\nInterstellar\n\n\n2014\n\n\n1102826"
  },
  {
    "objectID": "slides/2024-01-10-joins.html#union-all-2",
    "href": "slides/2024-01-10-joins.html#union-all-2",
    "title": "SQL joins",
    "section": "UNION ALL",
    "text": "UNION ALL\nWhen UNION ALL is applied, The Martian is listed twice in the results table.\n\n(SELECT t.title,\n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year &gt; 2012  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info &gt; 500000)\n\nUNION ALL\n\n(SELECT t.title, \n        t.production_year, \n        idx.info AS num_votes\n    FROM title AS t\nJOIN movie_info_idx AS idx ON idx.movie_id = t.id\nWHERE t.production_year = 2015  \n    AND t.kind_id = 1               \n    AND idx.info_type_id = 100      \n    AND idx.info &gt; 400000)\nORDER BY production_year DESC, num_votes;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\ntitle\n\n\nproduction_year\n\n\nnum_votes\n\n\n\n\n\n\nBatman v Superman: Dawn of Justice\n\n\n2016\n\n\n500037\n\n\n\n\nDeadpool\n\n\n2016\n\n\n673887\n\n\n\n\nInside Out\n\n\n2015\n\n\n443051\n\n\n\n\nJurassic World\n\n\n2015\n\n\n471237\n\n\n\n\nThe Revenant\n\n\n2015\n\n\n526189\n\n\n\n\nThe Revenant\n\n\n2015\n\n\n526189\n\n\n\n\nAvengers: Age of Ultron\n\n\n2015\n\n\n540606\n\n\n\n\nAvengers: Age of Ultron\n\n\n2015\n\n\n540606\n\n\n\n\nThe Martian\n\n\n2015\n\n\n583987\n\n\n\n\nThe Martian\n\n\n2015\n\n\n583987"
  },
  {
    "objectID": "handout/lab3_joins_sds261_j24.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab3_joins_sds261_j24.html#advice-for-turning-in-the-assignment",
    "title": "Lab 3 - SQL joins",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .sql file) which problem is being answered with which SQL code. Use the following syntax to comment within a .sql file: /* here is where comments go */. Indeed, feel free to copy the question into the .sql file so that you have it for your own records.\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe SQL document should be saved in the R Project as lab3-sds261-yourlastname-yourfirstname.sql. You will have to navigate to the R Project to save the DBeaver file in the correct place.\nConnect to the yelp database, which contains the businesses, reviews, and users tables. See README file for connection details.\n\n\nSHOW TABLES;\n\n\n3 records\n\n\nTables_in_yelp\n\n\n\n\nbusinesses\n\n\nreviews\n\n\nusers"
  },
  {
    "objectID": "handout/lab3_joins_sds261_j24.html#assignment",
    "href": "handout/lab3_joins_sds261_j24.html#assignment",
    "title": "Lab 3 - SQL joins",
    "section": "Assignment",
    "text": "Assignment\n\nFor each of the three tables in the yelp database, identify the number of records and the variables. (That means, write at least a sentence for each table.)\n\n\nFind the user with the most reviews. What is the person’s name, and how many reviews did they make?\n\n\nWhat cities are represented in the businesses table? Find out by querying the number of businesses per city. Use LIMIT to start, just in case there are hundreds of cities. Write down a few of the city names. Do you notice anything interesting?\n\n\nFind the businesses in “Carefree” (a city in Arizona). Write down the names of a few of the businesses.\n\n\nCount the number of records resulting when the query connects the users with the reviews using a JOIN. How many records are there? What does that tell you about the two tables?\n\n\nHow many users wrote reviews in the reviews table but do not exist in the users table. Hint: use a RIGHT JOIN to keep all the reviews, and then look for the rows where the user_id from the users table IS NULL.\n\n\nWrite a query to ask a question that you think is interesting and uses at least one join. Provide both the question (in words) as well as the SQL code and results."
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#proper-times-and-dates",
    "href": "slides/2024-01-11-regex1.html#proper-times-and-dates",
    "title": "Regular Expressions I",
    "section": "Proper times and dates",
    "text": "Proper times and dates\n\nMatch dates like 01/15/24 and also like 01.15.24 and like 01-15-24.\n\n\nstring &lt;- c(\"01/15/24\", \"01.15.24\", \"01-15-24\", \"011524\", \n            \"January 15, 2024\")"
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#proper-times-and-dates-1",
    "href": "slides/2024-01-11-regex1.html#proper-times-and-dates-1",
    "title": "Regular Expressions I",
    "section": "Proper times and dates",
    "text": "Proper times and dates\n\nMatch dates like 01/15/24 and also like 01.15.24 and like 01-15-24.\n\n\nstring &lt;- c(\"01/15/24\", \"01.15.24\", \"01-15-24\", \"01 15 24\", \n            \"011524\", \"January 15, 2024\")\n\nstr_extract(string, \"\\\\d\\\\d.\\\\d\\\\d.\\\\d\\\\d\")\n\n[1] \"01/15/24\" \"01.15.24\" \"01-15-24\" \"01 15 24\" NA         NA        \n\nstr_extract(string, \"\\\\d\\\\d[/.\\\\-]\\\\d\\\\d[/.\\\\-]\\\\d\\\\d\")\n\n[1] \"01/15/24\" \"01.15.24\" \"01-15-24\" NA         NA         NA        \n\nstr_extract(string, \"\\\\d{2}[/.\\\\-]\\\\d{2}[/.\\\\-]\\\\d{2}\")\n\n[1] \"01/15/24\" \"01.15.24\" \"01-15-24\" NA         NA         NA"
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#proper-times-and-dates-2",
    "href": "slides/2024-01-11-regex1.html#proper-times-and-dates-2",
    "title": "Regular Expressions I",
    "section": "Proper times and dates",
    "text": "Proper times and dates\n\nMatch a time of day such as “9:17 am” or “12:30 pm”. Require that the time be a valid time (not “99:99 pm”). Assume no leading zeros (i.e., “09:17 am”).\n\n\nstring &lt;- c(\"9:17 am\", \"12:30 pm\", \"99:99 pm\", \"09:17 am\")"
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#proper-times-and-dates-3",
    "href": "slides/2024-01-11-regex1.html#proper-times-and-dates-3",
    "title": "Regular Expressions I",
    "section": "Proper times and dates",
    "text": "Proper times and dates\n\nMatch a time of day such as “9:17 am” or “12:30 pm”. Require that the time be a valid time (not “99:99 pm”). Assume no leading zeros (i.e., “09:17 am”).\n\n^(1[012]|[1-9]):[0-5][0-9] (am|pm)$\n\nstring &lt;- c(\"9:17 am\", \"12:30 pm\", \"99:99 pm\", \"09:17 am\")\n\nstr_extract(string, \"(1[012]|[1-9]):[0-5][0-9] (am|pm)\")\n\n[1] \"9:17 am\"  \"12:30 pm\" NA         \"9:17 am\" \n\nstr_extract(string, \"^(1[012]|[1-9]):[0-5][0-9] (am|pm)$\")\n\n[1] \"9:17 am\"  \"12:30 pm\" NA         NA"
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#alternation-operator",
    "href": "slides/2024-01-11-regex1.html#alternation-operator",
    "title": "Regular Expressions I",
    "section": "Alternation operator",
    "text": "Alternation operator\nThe “or” operator, | has the lowest precedence and parentheses have the highest precedence, which means that parentheses get evaluated before “or”.\n\nWhat is the difference between \\bMary|Jane|Sue\\b and \\b(Mary|Jane|Sue)\\b?\n\n\nstring &lt;- c(\"Mary\", \"Mar\", \"Janet\", \"jane\", \"Susan\", \"Sue\")\n\nstr_extract(string, \"\\\\bMary|Jane|Sue\\\\b\")\nstr_extract(string, \"\\\\b(Mary|Jane|Sue)\\\\b\")"
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#alternation-operator-1",
    "href": "slides/2024-01-11-regex1.html#alternation-operator-1",
    "title": "Regular Expressions I",
    "section": "Alternation operator",
    "text": "Alternation operator\nThe “or” operator, | has the lowest precedence and parentheses have the highest precedence, which means that parentheses get evaluated before “or”.\n\nWhat is the difference between \\bMary|Jane|Sue\\b and \\b(Mary|Jane|Sue)\\b?\n\n\nstring &lt;- c(\"Mary\", \"Mar\", \"Janet\", \"jane\", \"Susan\", \"Sue\")\n\nstr_extract(string, \"\\\\bMary|Jane|Sue\\\\b\")\n\n[1] \"Mary\" NA     \"Jane\" NA     NA     \"Sue\" \n\nstr_extract(string, \"\\\\b(Mary|Jane|Sue)\\\\b\")\n\n[1] \"Mary\" NA     NA     NA     NA     \"Sue\""
  },
  {
    "objectID": "handout/lab4_regex_sds261_j24.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab4_regex_sds261_j24.html#advice-for-turning-in-the-assignment",
    "title": "Lab 4 - regular expressions",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .qmd file) which problem is being answered with which code. A sentence or two with each response goes a long way toward your understanding!\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe .qmd document should be saved in the R Project as lab4-sds261-yourlastname-yourfirstname.qmd.\n\n\nExample: Let’s say that I want to test whether the string contains a US zip code (of the format: xxxxx or xxxxx-xxxx). I might want to test it against a particular string.\n\nstring_zip &lt;- c(\"01063-6302\", \"91711\", \"6302\", \"01063\", \"zip 01063\")\n\nI would use the str_extract() function (in the stringr package) to test whether my regular expression is correct.\n\nstr_extract(string_zip, \"^\\\\d{5}(-\\\\d{4})?$\")\n\n[1] \"01063-6302\" \"91711\"      NA           \"01063\"      NA          \n\n\nDepending on how strict I was being, I might have kept the last one by leaving out the starting and ending positioning.\n\nstr_extract(string_zip, \"\\\\d{5}(-\\\\d{4})?\")\n\n[1] \"01063-6302\" \"91711\"      NA           \"01063\"      \"01063\"     \n\n\nNote that in R, \\d needs to be escaped to \\\\d. That’s true with any metacharacter which uses a backslash."
  },
  {
    "objectID": "handout/lab3_joins_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab3_joins_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "title": "Lab 3 - SQL joins",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .sql file) which problem is being answered with which SQL code. Use the following syntax to comment within a .sql file: /* here is where comments go */. Indeed, feel free to copy the question into the .sql file so that you have it for your own records.\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe SQL document should be saved in the R Project as lab3-sds261-yourlastname-yourfirstname.sql. You will have to navigate to the R Project to save the DBeaver file in the correct place.\nConnect to the yelp database, which contains the businesses, reviews, and users tables. See README file for connection details.\n\n\nSHOW TABLES;\n\n\n3 records\n\n\nTables_in_yelp\n\n\n\n\nbusinesses\n\n\nreviews\n\n\nusers"
  },
  {
    "objectID": "handout/lab3_joins_sds261_j24_sol.html#assignment",
    "href": "handout/lab3_joins_sds261_j24_sol.html#assignment",
    "title": "Lab 3 - SQL joins",
    "section": "Assignment",
    "text": "Assignment\n\nFor each of the three tables in the yelp database, identify the number of records and the variables. (That means, write at least a sentence for each table.)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM businesses LIMIT 0, 5;\n\n\n5 records\n\n\n\n\n\n\n\n\n\n\n\n\nid\nname\nstars\nopen\nreview_count\ncity\nlongitude\nlatitude\n\n\n\n\nrncjoVoEFUJGCUoC1JgnUA\nPeoria Income Tax Service\n5\nTRUE\n3\nPeoria\n-112.2416\n33.58187\n\n\n0FNFSzCFP_rGUoJx8W7tJg\nBike Doctor\n5\nTRUE\n5\nPhoenix\n-112.1059\n33.60405\n\n\n3f_lyB6vFK48ukH6ScvLHg\nValley Permaculture Alliance\n5\nTRUE\n4\nPhoenix\n-112.0739\n33.46053\n\n\nusAsSV36QmUej8–yvN-dg\nFood City\n4\nTRUE\n5\nPhoenix\n-112.0854\n33.39221\n\n\nPzOqRohWw7F7YEPBz6AubA\nHot Bagels & Deli\n4\nTRUE\n14\nGlendale Az\n-112.2003\n33.71280\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM reviews LIMIT 0, 5;\n\n\n5 records\n\n\nbusiness_id\nuser_id\nstars\n\n\n\n\n9yKzy9PApeiPPOUJEtnvkg\nrLtl8ZkDX5vH5nAx9C3q5Q\n5\n\n\nZRJwVLyzEJq1VAihDhYiow\n0a2KyEL0d3Yb1V6aivbIuQ\n5\n\n\n6oRAC4uyJCsJl1X0WZpVSA\n0hT2KtfLiobPvh6cDC8JQg\n4\n\n\n_1QQZuf4zZOyFCvXc0o6Vg\nuZetl9T0NcROGOyFfughhg\n5\n\n\n6ozycU1RpktNG2-1BroVtw\nvYmM4KTsC8ZfQBg-j5MWkw\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM users LIMIT 0, 5;\n\n\n5 records\n\n\nuser_id\nname\naverage_stars\nreview_count\n\n\n\n\nCR2y7yEm4X035ZMzrTtN9Q\nJim\n5\n6\n\n\n_9GXoHhdxc30ujPaQwh6Ew\nKelle\n1\n2\n\n\n8mM-nqxjg6pT04kwcjMbsw\nStephanie\n5\n2\n\n\nCh6CdTR2IVaVANr-RglMOg\nT\n5\n2\n\n\nNZrLmHRyiHmyT1JrfzkCOA\nBeth\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*) FROM businesses;\n\n\n1 records\n\n\nCOUNT(*)\n\n\n\n\n11537\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*) FROM reviews;\n\n\n1 records\n\n\nCOUNT(*)\n\n\n\n\n229907\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*) FROM users;\n\n\n1 records\n\n\nCOUNT(*)\n\n\n\n\n43873\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nbusinesses: 11,537 records with variables of id, name, stars, open, review_count, city, longitude, latitude\nreviews: 229,907 records with variables of business_id, user_id, stars\nusers: 43,873 records with variables of user_id, name, average_stars, review_count\n\n\n\n\n\nFind the user with the most reviews. What is the person’s name, and how many reviews did they make?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT user_id, name, average_stars, review_count\nFROM users\nORDER BY review_count DESC\nLIMIT 0, 5;\n\n\n5 records\n\n\nuser_id\nname\naverage_stars\nreview_count\n\n\n\n\nAIVQg9enGug5woxehjmlGg\nKim\n3.77\n5807\n\n\n6HBnx7fTfFlpWyez_P55xA\nKaren\n3.63\n2848\n\n\n7FuLnS_-b79GG-33mwLaMg\nAndrew\n3.64\n2810\n\n\nlxZSVeJz6KEBW1nlA3JKJg\nShiho\n3.84\n2760\n\n\nqbfQRHLvZk5WSkKY0l_lMw\nStephy\n3.87\n2587\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nKim has the most reviews (5,807 reviews!) with an average rating of 3.77 stars.\n\n\n\n\n\nWhat cities are represented in the businesses table? Find out by querying the number of businesses per city. Use LIMIT to start, just in case there are hundreds of cities. Write down a few of the city names. Do you notice anything interesting?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*), city\nFROM businesses\nGROUP BY city\nORDER BY city\nLIMIT 0, 100;\n\n\nDisplaying records 1 - 10\n\n\nCOUNT(*)\ncity\n\n\n\n\n4\nAhwatukee\n\n\n34\nAnthem\n\n\n46\nApache Junction\n\n\n129\nAvondale\n\n\n31\nBuckeye\n\n\n20\nCarefree\n\n\n48\nCasa Grande\n\n\n65\nCave Creek\n\n\n865\nChandler\n\n\n1\nCharleston\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThere appear to be cities in Phoenix as well as in Pheonix (??). And a few of the city names include the AZ to indicate that they are in Arizona. Before really working with the data, we would want to clean up the city names.\n\n\n\n\n\nFind the businesses in “Carefree” (a city in Arizona). Write down the names of a few of the businesses.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT id, name, stars, open, review_count, city\nFROM businesses\nWHERE city = \"Carefree\"\nLIMIT 0, 50;\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\nid\nname\nstars\nopen\nreview_count\ncity\n\n\n\n\nK0v87iFgB3sXSzw6e-BJ5w\nAZ Wine Company\n5\nTRUE\n8\nCarefree\n\n\nnZ0mUQEdez-CHrykD2nNLA\nCarefree Resort & Conference Center\n3\nTRUE\n30\nCarefree\n\n\nc4FLMLP7hMnAbSiW2o_o3A\nSaguaro Grille\n3\nFALSE\n5\nCarefree\n\n\nQygMZmPO8A6OaJYO2a0pnw\nStudio C Hair Salon\n5\nTRUE\n3\nCarefree\n\n\nZ85BGr-jnEWvoI4xAnoh3g\nLowe’s Home Improvement Warehouse of Phoenix\n4\nTRUE\n6\nCarefree\n\n\nSahvCnFp3OvUVZIAYCyckw\n34 Easy St\n4\nFALSE\n3\nCarefree\n\n\njdStuaC_1leN_DNGcQ0yEw\nLatilla\n5\nFALSE\n5\nCarefree\n\n\nAwUMl0PT3mdkPS7huzEUYQ\nBalloon Festival\n1\nTRUE\n4\nCarefree\n\n\nMHPXDXVE_cUYodfPhkadeQ\nBlack Mountain Coffee Shop\n4\nTRUE\n11\nCarefree\n\n\nOvlAlAkiyyCILkq-TylBWg\nThe Sundial Cafe\n3\nTRUE\n7\nCarefree\n\n\n\n\n\n\n\n\n\nCount the number of records resulting when the query connects the users with the reviews using a JOIN. How many records are there? What does that tell you about the two tables?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*)\nFROM users\nJOIN reviews ON users.user_id = reviews.user_id\nLIMIT 0, 100;\n\n\n1 records\n\n\nCOUNT(*)\n\n\n\n\n215879\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nBecause there are fewer records in the join, we know that some reviews were done by users that are not in the users table.\n\n\n\n\n\nHow many users wrote reviews in the reviews table but do not exist in the users table. Hint: use a RIGHT JOIN to keep all the reviews, and then look for the rows where the user_id from the users table IS NULL.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(DISTINCT reviews.user_id)\nFROM users\nRIGHT JOIN reviews ON users.user_id = reviews.user_id\nWHERE users.user_id IS NULL;\n\n\n1 records\n\n\nCOUNT(DISTINCT reviews.user_id)\n\n\n\n\n2108\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThere are 2,108 users who wrote 14,028 reviews and who are not in the users table.\n\n\n\n\n\nWrite a query to ask a question that you think is interesting and uses at least one join. Provide both the question (in words) as well as the SQL code and results."
  },
  {
    "objectID": "handout/lab4_regex_sds261_j24.html#assignment",
    "href": "handout/lab4_regex_sds261_j24.html#assignment",
    "title": "Lab 4 - regular expressions",
    "section": "Assignment",
    "text": "Assignment\n\nGo through the lessons in https://regexone.com/. Nothing to turn in.\nCatch all of the instances of the words color or colour, case insensitive. Test on the given string.\n\n\nstring &lt;- c(\"color\", \"colour\", \"Color\", \"Colour\", \"Colr\", \"cols\")\n\n\n\nMatch any number (including zero) of o’s, as in: ggle, gogle, google, gooogle, …\nMatch at least one o, as in: gogle, google, gooogle, …\n\n\nTest on the given string.\n\nstring &lt;- c(\"ggle\", \"gogle\", \"google\", \"gooogle\", \"goooogle\", \"gooooogle\")\n\n\nValidate dates which are in the format mm/dd/yy or mm/dd/yyyy. Allow for any digits for the values (e.g., month could be 47). As an extra challenge, try to make the numerical values realistic (e.g., months only between 01 and 12). Test on the given string.\n\n\nstring_date &lt;- c(\"01/11/2024\", \"1/11/2024\", \"1/1/24\", \"01/11/24\", \"24/01/4700\" )\n\n\nCheck a command line response so that true, t, yes, y, okay, ok, and 1 are all accepted in any combination of uppercase and lowercase. Test on the given string.\n\n\nstr_affirm &lt;- c(\"true\", \"t\", \"yes\", \"y\", \"okay\", \"ok\", \"1\", \"tRUe\", \"TRUE\", \"T\",\n               \"YES!\", \"yeS\", \"okay...\", \"sure\", \"maybe\")\n\n\nMatch numbers that use the comma as the thousands separator and the dot as the decimal separator. Test on the given string.\n\n\nstring_number &lt;- c(\"12345\", \"12,345\", \"123.45\", \"1,234,567.890\", \"12,345.\")\n\n\nDetermine whether a user entered a North American phone number in a common format, including the local area code. Common formats include 1234567890, 123-456-7890, 123.456.7890, 123 456 7890, (123) 456 7890, and all related combinations. Test on the given string.\n\n\nstring_phone &lt;- c(\"1234567890\", \"1234\", \"456-7890\", \"123-456-7890\", \"123.456.7890\", \"123 456 7890\", \"(123) 456 7890\", \"+1 (123) 456 789\")\n\n\nFind all words that occur inside an html emphasis tag (&lt;em&gt; and &lt;/em&gt;). Test on the given string. (After Friday’s class.)\n\n\nstring_emph &lt;- c(\"&lt;p&gt;&lt;strong&gt;Pellentesque habitant morbi tristique&lt;/strong&gt; senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. &lt;em&gt;Aenean ultricies mi vitae est.&lt;/em&gt; Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, &lt;code&gt;commodo vitae&lt;/code&gt;, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. &lt;a href='#'&gt;Donec non enim&lt;/a&gt; in turpis pulvinar facilisis. Ut felis.&lt;/p&gt;\")"
  },
  {
    "objectID": "handout/lab4_regex_sds261_j24_sol.html",
    "href": "handout/lab4_regex_sds261_j24_sol.html",
    "title": "Lab 4 - regular expressions",
    "section": "",
    "text": "library(tidyverse)\nlibrary(stringr)\nToday’s lab will provide practice working with regular expressions in R.\nThe goals for lab 4 include:"
  },
  {
    "objectID": "handout/lab4_regex_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab4_regex_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "title": "Lab 4 - regular expressions",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .qmd file) which problem is being answered with which code. A sentence or two with each response goes a long way toward your understanding!\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe .qmd document should be saved in the R Project as lab4-sds261-yourlastname-yourfirstname.qmd.\n\n\nExample: Let’s say that I want to test whether the string contains a US zip code (of the format: xxxxx or xxxxx-xxxx). I might want to test it against a particular string.\n\nstring_zip &lt;- c(\"01063-6302\", \"91711\", \"6302\", \"01063\", \"zip 01063\")\n\nI would use the str_extract() function (in the stringr package) to test whether my regular expression is correct.\n\nstr_extract(string_zip, \"^\\\\d{5}(-\\\\d{4})?$\")\n\n[1] \"01063-6302\" \"91711\"      NA           \"01063\"      NA          \n\n\nDepending on how strict I was being, I might have kept the last one by leaving out the starting and ending positioning.\n\nstr_extract(string_zip, \"\\\\d{5}(-\\\\d{4})?\")\n\n[1] \"01063-6302\" \"91711\"      NA           \"01063\"      \"01063\"     \n\n\nNote that in R, \\d needs to be escaped to \\\\d. That’s true with any metacharacter which uses a backslash."
  },
  {
    "objectID": "handout/lab4_regex_sds261_j24_sol.html#assignment",
    "href": "handout/lab4_regex_sds261_j24_sol.html#assignment",
    "title": "Lab 4 - regular expressions",
    "section": "Assignment",
    "text": "Assignment\n\nGo through the lessons in https://regexone.com/. Nothing to turn in.\nCatch all of the instances of the words color or colour, case insensitive. Test on the given string.\n\n\nstring &lt;- c(\"color\", \"colour\", \"Color\", \"Colour\", \"Colr\", \"cols\")\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Solution\n\nstr_extract(string, \"(?i)colou?r\")\n\n[1] \"color\"  \"colour\" \"Color\"  \"Colour\" NA       NA      \n\n\n\n\n\n\n\nMatch any number (including zero) of o’s, as in: ggle, gogle, google, gooogle, …\nMatch at least one o, as in: gogle, google, gooogle, …\n\n\nTest on the given string.\n\nstring &lt;- c(\"ggle\", \"gogle\", \"google\", \"gooogle\", \"goooogle\", \"gooooogle\")\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Solution (a)\n\nstr_extract(string, \"go*gle\")\n\n[1] \"ggle\"      \"gogle\"     \"google\"    \"gooogle\"   \"goooogle\"  \"gooooogle\"\n\n# Solution (b)\n\nstr_extract(string, \"go+gle\")\n\n[1] NA          \"gogle\"     \"google\"    \"gooogle\"   \"goooogle\"  \"gooooogle\"\n\n\n\n\n\n\nValidate dates which are in the format mm/dd/yy or mm/dd/yyyy. Allow for any digits for the values (e.g., month could be 47). As an extra challenge, try to make the numerical values realistic (e.g., months only between 01 and 12). Test on the given string.\n\n\nstring_date &lt;- c(\"01/11/2024\", \"1/11/2024\", \"1/1/24\", \"01/11/24\", \"24/01/4700\" )\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Solution: \n\nstr_extract(string_date, \"^[0-1][0-9]/[0-3][0-9]/([0-9]{2})?[0-9]{2}\")\n\n[1] \"01/11/2024\" NA           NA           \"01/11/24\"   NA          \n\n# Another solution\n\nstr_extract(string_date, \"\\\\d{2}/\\\\d{2}/(\\\\d{2}|\\\\d{4})\")\n\n[1] \"01/11/20\" NA         NA         \"01/11/24\" \"24/01/47\"\n\n\n\n\n\n\nCheck a command line response so that true, t, yes, y, okay, ok, and 1 are all accepted in any combination of uppercase and lowercase. Test on the given string.\n\n\nstr_affirm &lt;- c(\"true\", \"t\", \"yes\", \"y\", \"okay\", \"ok\", \"1\", \"tRUe\", \"TRUE\", \"T\",\n               \"YES!\", \"yeS\", \"okay...\", \"sure\", \"maybe\")\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Solution: \n\nstr_extract(str_affirm, \"(?i)^(1|t(rue)?|y(es)?|ok(ay)?)$\")\n\n [1] \"true\" \"t\"    \"yes\"  \"y\"    \"okay\" \"ok\"   \"1\"    \"tRUe\" \"TRUE\" \"T\"   \n[11] NA     \"yeS\"  NA     NA     NA    \n\n\n\n\n\n\nMatch numbers that use the comma as the thousands separator and the dot as the decimal separator. Test on the given string.\n\n\nstring_number &lt;- c(\"12345\", \"12,345\", \"123.45\", \"1,234,567.890\", \"12,345.\")\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Solution: \n\nstr_extract(string_number, \"^[0-9]{1,3}(,[0-9]{3})*(\\\\.[0-9]*)?$\")\n\n[1] NA              \"12,345\"        \"123.45\"        \"1,234,567.890\"\n[5] \"12,345.\"      \n\n# or if you don't want the last number\n\nstr_extract(string_number, \"^[0-9]{1,3}(,[0-9]{3})*(\\\\.[0-9]+)?$\")\n\n[1] NA              \"12,345\"        \"123.45\"        \"1,234,567.890\"\n[5] NA             \n\n\n\n\n\n\nDetermine whether a user entered a North American phone number in a common format, including the local area code. Common formats include 1234567890, 123-456-7890, 123.456.7890, 123 456 7890, (123) 456 7890, and all related combinations. Test on the given string.\n\n\nstring_phone &lt;- c(\"1234567890\", \"1234\", \"456-7890\", \"123-456-7890\", \"123.456.7890\", \"123 456 7890\", \"(123) 456 7890\", \"+1 (123) 456 789\")\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Solution: \n\nstr_extract(string_phone, \"^\\\\(?([0-9]{3})\\\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$\")\n\n[1] \"1234567890\"     NA               NA               \"123-456-7890\"  \n[5] \"123.456.7890\"   \"123 456 7890\"   \"(123) 456 7890\" NA              \n\n\n\n\n\n\nFind all words that occur inside an html emphasis tag (&lt;em&gt; and &lt;/em&gt;). Test on the given string. (After Friday’s class.)\n\n\nstring_emph &lt;- c(\"&lt;p&gt;&lt;strong&gt;Pellentesque habitant morbi tristique&lt;/strong&gt; senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. &lt;em&gt;Aenean ultricies mi vitae est.&lt;/em&gt; Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, &lt;code&gt;commodo vitae&lt;/code&gt;, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. &lt;a href='#'&gt;Donec non enim&lt;/a&gt; in turpis pulvinar facilisis. Ut felis.&lt;/p&gt;\")\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n# Solution: \n\nstr_extract(string_emph, \"(?&lt;=&lt;em&gt;)[\\\\w\\\\s.]+(?=&lt;/em&gt;)\")\n\n[1] \"Aenean ultricies mi vitae est.\""
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#case-insenstive",
    "href": "slides/2024-01-11-regex1.html#case-insenstive",
    "title": "Regular Expressions I",
    "section": "Case insenstive",
    "text": "Case insenstive\n\nMatch only the word meter in “The cemetery is 1 meter from the stop sign.” Also match Meter in “The cemetery is 1 Meter from the stop sign.”"
  },
  {
    "objectID": "slides/2024-01-11-regex1.html#case-insenstive-1",
    "href": "slides/2024-01-11-regex1.html#case-insenstive-1",
    "title": "Regular Expressions I",
    "section": "Case insenstive",
    "text": "Case insenstive\n\nMatch only the word meter in “The cemetery is 1 meter from the stop sign.” Also match Meter in “The cemetery is 1 Meter from the stop sign.”\n\n\nstring &lt;- c(\"The cemetery is 1 meter from the stop sign.\", \n            \"The cemetery is 1 Meter from the stop sign.\")\n\nstr_extract(string, \"(?i)\\\\bmeter\\\\b\")\n\n[1] \"meter\" \"Meter\""
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#regular-expressions-and-sql",
    "href": "slides/2024-01-12-regex2.html#regular-expressions-and-sql",
    "title": "Regular Expressions II",
    "section": "Regular expressions and SQL",
    "text": "Regular expressions and SQL\nBack to the IMDb database…\n\nSELECT production_year, title\n  FROM title\n  WHERE kind_id = 1 AND\n        title REGEXP '(?i)star'\n  LIMIT 0, 20;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nproduction_year\n\n\ntitle\n\n\n\n\n\n\n2005\n\n\n\"Dancing with the Stars\" (I)\n\n\n\n\n2005\n\n\n\"Dancing with the Stars\" (II)\n\n\n\n\n2005\n\n\n\"Dancing with the Stars\" (III)\n\n\n\n\n2017\n\n\n\"Girl Starter\" (II)\n\n\n\n\n2001\n\n\n\"Popstars\" (I)\n\n\n\n\n2001\n\n\n\"Popstars\" (II)\n\n\n\n\n2002\n\n\n\"Popstars\" (I)\n\n\n\n\n2000\n\n\n\"Popstars\" (I)\n\n\n\n\n1959\n\n\n\"Startime\" (II)\n\n\n\n\n1959\n\n\n\"Startime\" (I)"
  },
  {
    "objectID": "slides/2024-01-12-regex2.html#course-project",
    "href": "slides/2024-01-12-regex2.html#course-project",
    "title": "Regular Expressions II",
    "section": "Course project",
    "text": "Course project\nDon’t forget, next week, each person will be working on their own mini project!\n\nUsing SQL queries and joins to wrangle complicated data tables.\nWriting regular expressions to parse observations.\nCreating a SQL database.\n\n\nemail jo.hardin@pomona.edu by Tuesday, Jan 16 with an idea of what you plan to do.\n\nQuestion of interest that you hope to address.\nHolistic description of the dataset(s) (a few sentences).\nDescription of the observational units and columns in each data table.\nFull reference for data citation.\nLink to the resources."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#duckdb",
    "href": "slides/2024-01-16-creating-db.html#duckdb",
    "title": "Creating Databases",
    "section": "DuckDB",
    "text": "DuckDB\nDuckDB\n\nin-process database management system that runs entirely on your own computer.\nthe data live in your storage (instead of your memory).\nyou don’t have to transfer queries or results over the internet."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#duckdb-caveat",
    "href": "slides/2024-01-16-creating-db.html#duckdb-caveat",
    "title": "Creating Databases",
    "section": "DuckDB caveat",
    "text": "DuckDB caveat\n\nthe SQL dialect used in DuckDB is slightly different from MySQL\nwrite SELECT * FROM table 10; instead of SELECT * FROM table 0, 10;\nlots of different dialects, depending on the SQL server. Always be aware of the dialect you are using."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#duckdb-via-r",
    "href": "slides/2024-01-16-creating-db.html#duckdb-via-r",
    "title": "Creating Databases",
    "section": "DuckDB via R",
    "text": "DuckDB via R\n\ninstall.packages(\"duckdb\")  # only once, in the Console, not in the .qmd or .Rmd file\nlibrary(duckdb)             # at the top of the .qmd or .Rmd file\n\nlibrary(DBI)                # we also still need the DBI package\n\n\ncon_duckdb &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"duck_datab\")\n\n\nthe database has been stored to a database directory called duck_datab which lives in the current R project.\ncan’t open it like a standard folder, but it is where DuckDB stores the database files."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#preparing-to-load-data",
    "href": "slides/2024-01-16-creating-db.html#preparing-to-load-data",
    "title": "Creating Databases",
    "section": "Preparing to load data",
    "text": "Preparing to load data\nUnlike R, when creating a new data table, SQL requires that you communicate each future variable (column) and that variable’s type. Variable types are not automatically generated!"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#saturday-night-live",
    "href": "slides/2024-01-16-creating-db.html#saturday-night-live",
    "title": "Creating Databases",
    "section": "Saturday Night Live",
    "text": "Saturday Night Live\n\nFigure 1: image credit: NBCConsider the Saturday Night Live datasets available on the snldb GitHub repo."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#casts-table",
    "href": "slides/2024-01-16-creating-db.html#casts-table",
    "title": "Creating Databases",
    "section": "casts table",
    "text": "casts table\nUse R to understand the data from casts.csv.\n\nglimpse(casts)\n\nRows: 614\nColumns: 8\n$ aid             &lt;chr&gt; \"A. Whitney Brown\", \"A. Whitney Brown\", \"A. Whitney Br…\n$ sid             &lt;dbl&gt; 11, 12, 13, 14, 15, 16, 5, 39, 40, 41, 42, 45, 46, 21,…\n$ featured        &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …\n$ first_epid      &lt;dbl&gt; 19860222, NA, NA, NA, NA, NA, 19800409, 20140118, NA, …\n$ last_epid       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ update_anchor   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ n_episodes      &lt;dbl&gt; 8, 20, 13, 20, 20, 20, 5, 11, 21, 21, 21, 18, 17, 20, …\n$ season_fraction &lt;dbl&gt; 0.444, 1.000, 1.000, 1.000, 1.000, 1.000, 0.250, 0.524…"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#loading-data",
    "href": "slides/2024-01-16-creating-db.html#loading-data",
    "title": "Creating Databases",
    "section": "Loading data",
    "text": "Loading data\nImporting .csv files as tables, a series of steps:1\n\na USE statement that ensures we are in the right schema/database.\na series of DROP TABLE statements that drop any old tables with the same names as the ones we are going to create.\na series of CREATE TABLE statements that specify the table structures.\na series of COPY statements that read the data from the .csv files into the appropriate tables.\n\ntaken from MDSR."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#loading-step-1-use",
    "href": "slides/2024-01-16-creating-db.html#loading-step-1-use",
    "title": "Creating Databases",
    "section": "Loading step 1, USE",
    "text": "Loading step 1, USE\nUse the (local) database that we’ve called duck_datab.\n\n```{sql}\n#| connection: con_duckdb\n\nUSE duck_datab;\n```"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#loading-step-2-refresh",
    "href": "slides/2024-01-16-creating-db.html#loading-step-2-refresh",
    "title": "Creating Databases",
    "section": "Loading step 2, refresh",
    "text": "Loading step 2, refresh\nMake sure to “refresh” the table, in case it already exists. However, be very careful with the DROP TABLE statement, as it removes the casts table.\n\nDROP TABLE IF EXISTS casts;"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#loading-step-3-create-table",
    "href": "slides/2024-01-16-creating-db.html#loading-step-3-create-table",
    "title": "Creating Databases",
    "section": "Loading step 3, CREATE TABLE",
    "text": "Loading step 3, CREATE TABLE\nCarefully define the variable types, whether or not they allow missing values, and what a default value is for that variable. Additionally, identify the key for accessing information.\n\nCREATE TABLE casts (\n  aid VARCHAR(255) NOT NULL DEFAULT '',\n  sid INTEGER NOT NULL DEFAULT 0,\n  featured BOOLEAN NOT NULL DEFAULT 'false',\n  first_epid INTEGER DEFAULT 0,\n  last_epid INTEGER DEFAULT 0,\n  update_anchor BOOLEAN NOT NULL DEFAULT 0,\n  n_episodes INTEGER NOT NULL DEFAULT 0,\n  season_fraction DECIMAL(21,20) NOT NULL DEFAULT 0,\n  PRIMARY KEY (sid, aid)\n);"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#loading-step-4-copy",
    "href": "slides/2024-01-16-creating-db.html#loading-step-4-copy",
    "title": "Creating Databases",
    "section": "Loading step 4, COPY",
    "text": "Loading step 4, COPY\nThe .csv file lives on my computer, so I load it in directly. [n.b., the statement to load in data is different in MySQL.]\n\nCOPY casts FROM 'data/casts.csv' HEADER;"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#checking-the-loading-select",
    "href": "slides/2024-01-16-creating-db.html#checking-the-loading-select",
    "title": "Creating Databases",
    "section": "Checking the loading, SELECT",
    "text": "Checking the loading, SELECT\n\nSELECT * FROM casts LIMIT 8;\n\n\n\n\n\nTable 1: After CREATE TABLE where variable types are set, the COPY command pulls the data into the table. SELECT shows us that the table is as expected.\n\n\naid\nsid\nfeatured\nfirst_epid\nlast_epid\nupdate_anchor\nn_episodes\nseason_fraction\n\n\n\n\nA. Whitney Brown\n11\nTRUE\n19860222\n\nFALSE\n8\n0.444\n\n\nA. Whitney Brown\n12\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nA. Whitney Brown\n13\nTRUE\n\n\nFALSE\n13\n1.000\n\n\nA. Whitney Brown\n14\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nA. Whitney Brown\n15\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nA. Whitney Brown\n16\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nAlan Zweibel\n5\nTRUE\n19800409\n\nFALSE\n5\n0.250\n\n\nSasheer Zamata\n39\nTRUE\n20140118\n\nFALSE\n11\n0.524"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#check-the-database",
    "href": "slides/2024-01-16-creating-db.html#check-the-database",
    "title": "Creating Databases",
    "section": "Check the database",
    "text": "Check the database\nLet’s make sure that the database exists and that the table in the database exists.\n\nSHOW DATABASES;\n\n\n\n\n1 records\n\n\n\n\ndatabase_name\n\n\n\n\n\n\nduck_datab"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#efficiencies",
    "href": "slides/2024-01-16-creating-db.html#efficiencies",
    "title": "Creating Databases",
    "section": "Efficiencies",
    "text": "Efficiencies\n\nEach library (database) has books (tables). Each book (table) has pages (rows). Each page (row) has a unique page number to identify it (key value); to find a particular page, you sort through the page numbers (key values). But it isn’t immediately obvious where the particular page of interest is, you might have to page through the book a little bit to find the page of interest. It would be easier if you had several bookmarks throughout the book to anchor some of the page numbers. For example, if you want page 1047 and you have a bookmark on page 1050, you only have to turn back three pages. The bookmark is an index, it helps you find the desired rows much more quickly.1\n\nAnalogy taken from: https://www.quora.com/profile/Lara-Mazilu"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#key",
    "href": "slides/2024-01-16-creating-db.html#key",
    "title": "Creating Databases",
    "section": "Key",
    "text": "Key\nKeys are unique identifiers for each row, used primarily for connecting tables. Keys are generally not helpful for efficiency, but they are important for data integrity and relationships between tables.\n\nPRIMARY KEY is a column or set of columns that uniquely identify each row. Primary keys cannot be NULL.\nFOREIGN KEY is a column or set of columns that reference a primary key in a different table. A foreign key can be NULL."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#index",
    "href": "slides/2024-01-16-creating-db.html#index",
    "title": "Creating Databases",
    "section": "Index",
    "text": "Index\n\nEach library (database) has books (tables). Each book (table) has pages (rows). Each page (row) has a unique page number to identify it (key value); to find a particular page, you sort through the page numbers (key values). But it isn’t immediately obvious where the particular page of interest is, you might have to page through the book a little bit to find the page of interest. It would be easier if you had several bookmarks throughout the book to anchor some of the page numbers. For example, if you want page 1047 and you have a bookmark on page 1050, you only have to turn back three pages. The bookmark is an index, it helps you find the desired rows much more quickly.1\n\nAnalogy taken from: https://www.quora.com/profile/Lara-Mazilu"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#find-keys-and-indices",
    "href": "slides/2024-01-16-creating-db.html#find-keys-and-indices",
    "title": "Creating Databases",
    "section": "Find keys and indices",
    "text": "Find keys and indices\nIn MySQL the commands SHOW KEYS and SHOW INDEXES provide information about the keys and indices for each table."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#best-practice",
    "href": "slides/2024-01-16-creating-db.html#best-practice",
    "title": "Creating Databases",
    "section": "Best practice",
    "text": "Best practice\nIt is always a good idea to terminate the SQL connection when you are done with it.\n\ndbDisconnect(con_duckdb, shutdown = TRUE)"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#check-the-database-1",
    "href": "slides/2024-01-16-creating-db.html#check-the-database-1",
    "title": "Creating Databases",
    "section": "Check the database",
    "text": "Check the database\nLet’s make sure that the database exists and that the table in the database exists.\n\nSHOW TABLES;\n\n\n\n\n1 records\n\n\n\n\nname\n\n\n\n\n\n\ncasts"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#check-the-database-2",
    "href": "slides/2024-01-16-creating-db.html#check-the-database-2",
    "title": "Creating Databases",
    "section": "Check the database",
    "text": "Check the database\nLet’s make sure that the database exists and that the table in the database exists.\n\nDESCRIBE casts;\n\n\n\n\n\nTable 2: DESCRIBE variables in the casts table.\n\n\ncolumn_name\ncolumn_type\nnull\nkey\ndefault\nextra\n\n\n\n\naid\nVARCHAR\nNO\nPRI\n''\n\n\n\nsid\nINTEGER\nNO\nPRI\n0\n\n\n\nfeatured\nBOOLEAN\nNO\n\n'false'\n\n\n\nfirst_epid\nINTEGER\nYES\n\n0\n\n\n\nlast_epid\nINTEGER\nYES\n\n0\n\n\n\nupdate_anchor\nBOOLEAN\nNO\n\n0\n\n\n\nn_episodes\nINTEGER\nNO\n\n0\n\n\n\nseason_fraction\nDECIMAL(21,20)\nNO\n\n0"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#partitioning",
    "href": "slides/2024-01-16-creating-db.html#partitioning",
    "title": "Creating Databases",
    "section": "Partitioning",
    "text": "Partitioning\nAnother way to speed up query retrievals is to partition the data tables. If, for example, the SNL queries were always done by year, then the episodes table could be partitioned such that they are stored as separate tables (one per year). The partitioning functions as an index on year. The user would not be able to tell the difference between the unpartitioned episodes table and the partitioned one. Queries done by year would be faster. Queries done grouped in another way would be slower."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#a-null-example",
    "href": "slides/2024-01-09-clauses.html#a-null-example",
    "title": "SQL clauses",
    "section": "A NULL example",
    "text": "A NULL example\nThe logic of NULL:1\n\nIf you do anything with NULL, you’ll just get NULL. For instance if \\(x\\) is NULL, then \\(x &gt; 3\\), \\(1 = x\\), and \\(x + 4\\) all evaluate to NULL. Even \\(x =\\) NULL evaluates to NULL! if you want to check whether \\(x\\) is NULL, use x IS NULL or x IS NOT NULL.\nNULL short-circuits with boolean operators. That means a boolean expression involving NULL will evaluate to:\n\nTRUE, if it’d evaluate to TRUE regardless of whether the NULL value is really TRUE or FALSE.\nFALSE, if it’d evaluate to FALSE regardless of whether the NULL value is really TRUE or FALSE.\nOr NULL, if it depends on the NULL value.\n\n\ntaken from: https://cs186berkeley.net/notes/note1/#filtering-null-values"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#a-null-example-1",
    "href": "slides/2024-01-09-clauses.html#a-null-example-1",
    "title": "SQL clauses",
    "section": "A NULL example",
    "text": "A NULL example\nConsider the following table and SQL query to evaluate WHERE age &lt;= 20 OR num_dogs = 3:\n\nSELECT * FROM (\n   SELECT 'Ace' AS name, 20 AS age, 4 as num_dogs\n   UNION\n   SELECT 'Ada' AS name, NULL AS age, 3 as num_dogs   \n   UNION\n   SELECT 'Ben' AS name, NULL AS age, NULL as num_dogs\n   UNION\n   SELECT 'Cho' AS name, 27 AS age, NULL as num_dogs\n   ) AS temptable;\n\n\n\n\n4 records\n\n\n\n\nname\n\n\nage\n\n\nnum_dogs\n\n\n\n\n\n\nAce\n\n\n20\n\n\n4\n\n\n\n\nAda\n\n\n\n\n3\n\n\n\n\nBen\n\n\n\n\n\n\n\n\nCho\n\n\n27"
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#a-null-example-2",
    "href": "slides/2024-01-09-clauses.html#a-null-example-2",
    "title": "SQL clauses",
    "section": "A NULL example",
    "text": "A NULL example\nWhere does the WHERE clause do? It tells us that we only want to keep the rows satisfying the age &lt;= 20 OR num_dogs = 3. Let’s consider each row one at a time:\n\nFor Ace, age &lt;= 20 evaluates to TRUE so the claim is satisfied.\nFor Ada, age &lt;= 20 evaluates to NULL but num_dogs = 3 evaluates to TRUE so the claim is satisfied.\nFor Ben, age &lt;= 20 evaluates to NULL and num_dogs = 3 evaluates to NULL so the overall expression is NULL which has a FALSE value.\nFor Cho, age &lt;= 20 evaluates to FALSE and num_dogs = 3 evaluates to NULL so the overall expression evaluates to NULL (because it depends on the value of the NULL).\n\nThus we keep only Ace and Ada."
  },
  {
    "objectID": "slides/2024-01-09-clauses.html#a-null-example-3",
    "href": "slides/2024-01-09-clauses.html#a-null-example-3",
    "title": "SQL clauses",
    "section": "A NULL example",
    "text": "A NULL example\n\nSELECT * FROM (\n   SELECT 'Ace' AS name, 20 AS age, 4 as num_dogs\n   UNION\n   SELECT 'Ada' AS name, NULL AS age, 3 as num_dogs   \n   UNION\n   SELECT 'Ben' AS name, NULL AS age, NULL as num_dogs\n   UNION\n   SELECT 'Cho' AS name, 27 AS age, NULL as num_dogs\n   ) AS temptable\nWHERE age &lt;= 20 OR num_dogs = 3;\n\n\n\n\n2 records\n\n\n\n\nname\n\n\nage\n\n\nnum_dogs\n\n\n\n\n\n\nAce\n\n\n20\n\n\n4\n\n\n\n\nAda\n\n\n\n\n3"
  },
  {
    "objectID": "handout/lab5_creating_db_sds261_j24.html",
    "href": "handout/lab5_creating_db_sds261_j24.html",
    "title": "Lab 5 - creating databases",
    "section": "",
    "text": "Today’s lab will provide practice working with creating SQL databases using DuckDB.\nThe goals for lab 5 include:"
  },
  {
    "objectID": "handout/lab5_creating_db_sds261_j24.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab5_creating_db_sds261_j24.html#advice-for-turning-in-the-assignment",
    "title": "Lab 5 - creating databases",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .qmd file) which problem is being answered with which code. A sentence or two with each response goes a long way toward your understanding!\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe .qmd document should be saved in the R Project as lab5-sds261-yourlastname-yourfirstname.qmd.\nSet up a connection to a database of your naming using DuckDB.\n\n\ncon_college &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"you_name_the_db\")"
  },
  {
    "objectID": "handout/lab5_creating_db_sds261_j24.html#assignment",
    "href": "handout/lab5_creating_db_sds261_j24.html#assignment",
    "title": "Lab 5 - creating databases",
    "section": "Assignment",
    "text": "Assignment\nThe data we will work with today is on college tuition, pay, and diversity. The original data source is the US Department of Education, but it has been compiled as part of TidyTuesday on March 10, 2020. Tuition and fees are for 2018-19. Diversity is for 2014.\n\nDownload the data onto your own computer. In the interest of time, let’s only use three tables: tuition_cost and salary_potential and diversity_school.\n\n\nFollow the first two steps in the notes: USE and DROP TABLE.\n\n\nFor each of the three tables, in the CREATE TABLE operation, carefully define variable types and identify any key variables. Unfortunately, FOREIGN KEYs don’t work here because there is not referential integrity across the tables.\n\n\nUse COPY to load the data from your computer. (Hint: if there is an NA value, SQL doesn’t know that it is actually NULL and wants the variable to be loaded as a character string.)\n\n\nUse SELECT * (with a LIMIT!) to make sure all three tables loaded correctly.\n\n\nAdd an INDEX to the tuition table on state. We won’t discuss until Thursday, but state is better than state_code because state allows you to join with other tables. state is better than type or degree_length because state has a much higher cardinality."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html",
    "href": "slides/2024-01-16-creating-db.html",
    "title": "Creating Databases",
    "section": "",
    "text": "DuckDB\n\nin-process database management system that runs entirely on your own computer.\nthe data live in your storage (instead of your memory).\nyou don’t have to transfer queries or results over the internet."
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#footnotes",
    "href": "slides/2024-01-16-creating-db.html#footnotes",
    "title": "Creating Databases",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ntaken from MDSR.↩︎"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html",
    "href": "slides/2024-01-17-editing-db.html",
    "title": "Editing Databases",
    "section": "",
    "text": "We will continue to use DuckDB so that we have write access to the files we want to edit.\n\ncon_duckdb &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"duck_datab\")\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: image credit: NBC\n\n\n\n\n\nConsider the Saturday Night Live datasets available on the snldb GitHub repo.\n\n\n\nThe UPDATE function allows you to change a value in a table across all rows that match a certain criteria.\n\nSELECT * FROM impressions \n   WHERE name LIKE 'Ivanka%';\n\n\n5 records\n\n\nimpid\naid\nname\n\n\n\n\n2598\nScarlett Johansson\nIvanka Trump\n\n\n3716\nEmily Blunt\nIvanka Trump\n\n\n3694\nMargot Robbie\nIvanka Trump\n\n\n3679\nVanessa Bayer\nIvanka Trump\n\n\n2340\nMaya Rudolph\nIvanka Trump\n\n\n\n\n\n\n\n\nFor funsies, let’s change Ivanka Trump to Ivanka Kushner.\n\nUPDATE impressions\n   SET name = 'Ivanka Kushner'\n   WHERE name LIKE 'Ivanka%';\n\n\nSELECT * FROM impressions \n   WHERE name LIKE 'Ivanka%';\n\n\n5 records\n\n\nimpid\naid\nname\n\n\n\n\n2598\nScarlett Johansson\nIvanka Kushner\n\n\n3716\nEmily Blunt\nIvanka Kushner\n\n\n3694\nMargot Robbie\nIvanka Kushner\n\n\n3679\nVanessa Bayer\nIvanka Kushner\n\n\n2340\nMaya Rudolph\nIvanka Kushner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Watch out!\n\n\n\nBe careful with UPDATE. A careless UPDATE could write over all of the data in your table. There is no undo function.\n\n\n\n\n\nTask: include recent hosts in the hosts table.\nBy searching the SNL archives, we can see that the next host, chronologically was Elon Musk on May 8, 2021.\n\n\n\n\n\n\n\n\nFigure 2: Hosts information from snlarchives.net\n\n\n\n\n\n\n\n\nTask: include recent hosts in the hosts table.\nBy searching the SNL archives, we can see that the next host, chronologically was Elon Musk on May 8, 2021.\n\nSELECT * FROM hosts\n    ORDER BY epid DESC\n    LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nepid\naid\n\n\n\n\n20210410\nCarey Mulligan\n\n\n20210403\nDaniel Kaluuya\n\n\n20210327\nMaya Rudolph\n\n\n20210227\nNick Jonas\n\n\n20210220\nRege-Jean Page\n\n\n20210213\nRegina King\n\n\n20210206\nDan Levy\n\n\n20210130\nJohn Krasinski\n\n\n20201219\nKristen Wiig\n\n\n20201212\nTimothee Chalamet\n\n\n\n\n\n\n\n\nINSERT allows us to add the relevant information associated with the episode of SNL that Elon Musk hosted.\n\nINSERT INTO hosts (epid, aid)\n   VALUES ('20210508', 'Elon Musk');\n\n\nSELECT * FROM hosts\n    ORDER BY epid DESC\n    LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nepid\naid\n\n\n\n\n20210508\nElon Musk\n\n\n20210410\nCarey Mulligan\n\n\n20210403\nDaniel Kaluuya\n\n\n20210327\nMaya Rudolph\n\n\n20210227\nNick Jonas\n\n\n20210220\nRege-Jean Page\n\n\n20210213\nRegina King\n\n\n20210206\nDan Levy\n\n\n20210130\nJohn Krasinski\n\n\n20201219\nKristen Wiig\n\n\n\n\n\n\n\n\nIt would be tedious to INSERT all of the most recent host information by hand. Instead, we’ll scrape the SNL archives using the R package rvest, which allows us to pull out the appropriate html elements. The epid and aid are joined together in a tibble, and filtered to only include episodes which are not already in the episodes table.\n\nlibrary(rvest)\n\nrecent_hosts &lt;- read_html(\"http://www.snlarchives.net/Episodes/\") |&gt;\n  html_nodes(\"tr\") |&gt;\n  purrr::map_df( ~ tibble(\n    epid = .x |&gt; html_node(\"a.ms-2.me-2\") |&gt;\n      html_attr(\"href\") |&gt;\n      str_extract(\"\\\\d+\"),\n    aid = .x |&gt; html_node(\"td:nth-child(2)\") |&gt;\n      html_text2() |&gt;\n      str_extract(\"[\\\\w\\\\. \\\\w\\\\.]+(?=/|$)\")\n  )) |&gt;\n  filter(epid &gt; 20210508)\n\n\nwrite_csv(recent_hosts, \"data/recent_hosts.csv\")\n\n\n\n\n\nINSERT INTO hosts\n   SELECT *\n   FROM READ_CSV('data/recent_hosts.csv', AUTO_DETECT = TRUE);\n\n\nSELECT * FROM hosts\n  ORDER BY epid DESC\n  LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nepid\naid\n\n\n\n\n20240518\nJake Gyllenhaal\n\n\n20240511\nMaya Rudolph\n\n\n20240504\nDua Lipa\n\n\n20240413\nRyan Gosling\n\n\n20240406\nKristen Wiig\n\n\n20240330\nRamy Youssef\n\n\n20240309\nJosh Brolin\n\n\n20240302\nSydney Sweeney\n\n\n20240224\nShane Gillis\n\n\n20240203\nAyo Edebiri\n\n\n\n\n\n\n\n\nYou might change your mind and decide that you really only want hosts from years up to 2022. The DELETE function deletes any rows specified by the WHERE clause.\n\nDELETE FROM hosts\n   WHERE epid &gt; 20221231;\n\n\nSELECT * FROM hosts\n  ORDER BY epid DESC\n  LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nepid\naid\n\n\n\n\n20221217\nAustin Butler\n\n\n20221210\nMartin Short\n\n\n20221203\nKeke Palmer\n\n\n20221112\nDave Chappelle\n\n\n20221105\nAmy Schumer\n\n\n20221029\nJack Harlow\n\n\n20221015\nMegan Thee Stallion\n\n\n20221008\nBrendan Gleeson\n\n\n20221001\nMiles Teller\n\n\n20220521\nNatasha Lyonne\n\n\n\n\n\n\n\n\nALTER TABLE changes the structure of a table. For example, you can add or delete columns, create or destroy indexes, change the type of existing columns, or rename columns or the table itself.\nMultiple ADD, ALTER, DROP, and CHANGE clauses are permitted in a single ALTER TABLE statement, separated by commas.\nCaveat: I have found DuckDB to be slightly finicky in some of the operations…\n\n\n\n\nALTER TABLE t1\nDROP COLUMN col1,\nDROP COLUMN col2;\n\n\n\n\n\nrename an INT NOT NULL column from a to b and change its definition to use the BIGINT data type while retaining the NOT NULL attribute.\n\n\nALTER TABLE t1 CHANGE a b BIGINT NOT NULL;\n\n\n\n\n\nCHANGE, the syntax requires two column names, so you must specify the same name twice to leave the name unchanged. For example, to change the definition of column b.\n\n\nALTER TABLE t1 CHANGE b b INT NOT NULL;\n\n\n\n\n\nMODIFY is more convenient to change the definition without changing the name because it requires the column name only once.\n\n\nALTER TABLE t1 MODIFY b INT NOT NULL;\n\n\n\n\n\nCHANGE, the syntax requires a column definition, so to leave the definition unchanged, you must respecify the definition the column currently has. For example, to rename an INT NOT NULL column from b to a.\n\n\nALTER TABLE t1 CHANGE b a INT NOT NULL;\n\n\n\n\n\nRENAME COLUMN is more convenient to change the name without changing the definition because it requires only the old and new names.\n\n\nALTER TABLE t1 RENAME COLUMN b TO a;\n\n\n\n\n\ncannot RENAME COLUMN to a column name that already exists. The following are valid.\n\n\n/* swap a and b */\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO a;\n\n/* \"rotate\" a, b, c through a cycle */\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO c,\n               RENAME COLUMN c TO a;\n\n\n\n\nTemporary tables are used to break down complex queries into smaller, more manageable steps. For example, let’s say we want to JOIN two tables after each has been filtered using different WHERE clauses. The filtered tables can each be saved into their own temporary tables and then the temporary tables can be merged.\nTables in DuckDB are saved (to disk), even when the connection is closed. However, temporary tables are saved in memory (instead of on disk) and are deleted when the connection is closed.\n\n\n\n\nSELECT * FROM episodes LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nsid\nepid\naired\nepno\n\n\n\n\n46\n20210410\nApril 10, 2021\n17\n\n\n46\n20210403\nApril 3, 2021\n16\n\n\n46\n20210327\nMarch 27, 2021\n15\n\n\n46\n20210227\nFebruary 27, 2021\n14\n\n\n46\n20210220\nFebruary 20, 2021\n13\n\n\n46\n20210213\nFebruary 13, 2021\n12\n\n\n46\n20210206\nFebruary 6, 2021\n11\n\n\n46\n20210130\nJanuary 30, 2021\n10\n\n\n46\n20201219\nDecember 19, 2020\n9\n\n\n46\n20201212\nDecember 12, 2020\n8\n\n\n\n\n\n\n\n\nWe wouldn’t want to wrangle the date every single time we used the data.\n\nCREATE TEMP TABLE episodes_date AS\n    SELECT *, CASE\n             WHEN POSITION(',' IN aired) &gt; 0 THEN\n    EXTRACT(YEAR FROM CAST(\n                SUBSTRING(aired, POSITION(',' IN aired) + 2) || '-' ||\n                CASE\n                    WHEN POSITION('January' IN aired) &gt; 0 THEN '01'\n                    WHEN POSITION('February' IN aired) &gt; 0 THEN '02'\n                    WHEN POSITION('March' IN aired) &gt; 0 THEN '03'\n                    WHEN POSITION('April' IN aired) &gt; 0 THEN '04'\n                    WHEN POSITION('May' IN aired) &gt; 0 THEN '05'\n                    WHEN POSITION('June' IN aired) &gt; 0 THEN '06'\n                    WHEN POSITION('July' IN aired) &gt; 0 THEN '07'\n                    WHEN POSITION('August' IN aired) &gt; 0 THEN '08'\n                    WHEN POSITION('September' IN aired) &gt; 0 THEN '09'\n                    WHEN POSITION('October' IN aired) &gt; 0 THEN '10'\n                    WHEN POSITION('November' IN aired) &gt; 0 THEN '11'\n                    WHEN POSITION('December' IN aired) &gt; 0 THEN '12'\n                    ELSE '01' -- Default to January if no month is found\n                END || '-' ||\n                SUBSTRING(aired, POSITION(' ' IN aired) + 1, 2) AS DATE\n            ))\n            END AS year FROM episodes;\n\n\n\n\nIn case you are curious about the date wrangling code… consider SUBSTRING(aired, POSITION(',' IN aired) + 2)\n\nPOSITION(',' IN aired): This part of the expression uses the POSITION function to find the position of the first occurrence of the comma (,) in the string aired. The result is the index (position) of the comma within the string.\nPOSITION(',' IN aired) + 2: This adds 2 to the index of the comma. The + 2 is used to move the starting point of the substring two positions to the right of the comma. This is done to exclude the comma itself and any following spaces.\nSUBSTRING(aired, POSITION(',' IN aired) + 2): This part uses the SUBSTRING function to extract a substring from the string aired. The starting position of the substring is determined by POSITION(',' IN aired) + 2, and it goes until the end of the string. This effectively removes the part of the string that comes before and including the first comma.\n\nIn summary, the entire expression is extracting a substring from the original string aired, starting from two positions to the right of the first comma and continuing until the end of the string. This can be useful in scenarios where you want to remove or isolate part of a string based on the position of a specific character (in this case, the comma).\n\n\n\n\nSELECT * FROM episodes_date LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nsid\nepid\naired\nepno\nyear\n\n\n\n\n46\n20210410\nApril 10, 2021\n17\n2021\n\n\n46\n20210403\nApril 3, 2021\n16\n2021\n\n\n46\n20210327\nMarch 27, 2021\n15\n2021\n\n\n46\n20210227\nFebruary 27, 2021\n14\n2021\n\n\n46\n20210220\nFebruary 20, 2021\n13\n2021\n\n\n46\n20210213\nFebruary 13, 2021\n12\n2021\n\n\n46\n20210206\nFebruary 6, 2021\n11\n2021\n\n\n46\n20210130\nJanuary 30, 2021\n10\n2021\n\n\n46\n20201219\nDecember 19, 2020\n9\n2020\n\n\n46\n20201212\nDecember 12, 2020\n8\n2020\n\n\n\n\n\n\n\n\nNow that the year variable has been created in the new temporary table called episodes_date, we can use episode_date to query and find, for example, all of the hosts in 2019.\n\nSELECT hosts.aid, ep.aired, ep.year FROM hosts \nJOIN episodes_date AS ep ON hosts.epid = ep.epid\nWHERE year = 2019\nLIMIT 25;\n\n\nDisplaying records 1 - 10\n\n\naid\naired\nyear\n\n\n\n\nEddie Murphy\nDecember 21, 2019\n2019\n\n\nScarlett Johansson\nDecember 14, 2019\n2019\n\n\nJennifer Lopez\nDecember 7, 2019\n2019\n\n\nWill Ferrell\nNovember 23, 2019\n2019\n\n\nHarry Styles\nNovember 16, 2019\n2019\n\n\nKristen Stewart\nNovember 2, 2019\n2019\n\n\nChance the Rapper\nOctober 26, 2019\n2019\n\n\nDavid Harbour\nOctober 12, 2019\n2019\n\n\nPhoebe Waller-Bridge\nOctober 5, 2019\n2019\n\n\nWoody Harrelson\nSeptember 28, 2019\n2019\n\n\n\n\n\n\n\n\nIt is always a good idea to terminate the SQL connection when you are done with it.\n\ndbDisconnect(con_duckdb, shutdown = TRUE)\n\n\n:::"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#duckdb",
    "href": "slides/2024-01-17-editing-db.html#duckdb",
    "title": "Editing Databases",
    "section": "",
    "text": "DuckDB\n\nin-process database management system that runs entirely on your own computer.\nthe data live in your storage (instead of your memory).\nyou don’t have to transfer queries or results over the internet."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#duckdb-caveat",
    "href": "slides/2024-01-17-editing-db.html#duckdb-caveat",
    "title": "Editing Databases",
    "section": "DuckDB caveat",
    "text": "DuckDB caveat\n\nthe SQL dialect used in DuckDB is slightly different from MySQL\nwrite SELECT * FROM table 10; instead of SELECT * FROM table 0, 10;\nlots of different dialects, depending on the SQL server. Always be aware of the dialect you are using."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#duckdb-via-r",
    "href": "slides/2024-01-17-editing-db.html#duckdb-via-r",
    "title": "Editing Databases",
    "section": "DuckDB via R",
    "text": "DuckDB via R\n\ninstall.packages(\"duckdb\")  # only once, in the Console, not in the .qmd or .Rmd file\nlibrary(duckdb)             # at the top of the .qmd or .Rmd file\n\nlibrary(DBI)                # we also still need the DBI package\n\n\ncon_duckdb &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"duck_datab\")\n\n\nthe database has been stored to a database directory called duck_datab which lives in the current R project.\ncan’t open it like a standard folder, but it is where DuckDB stores the database files."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#preparing-to-load-data",
    "href": "slides/2024-01-17-editing-db.html#preparing-to-load-data",
    "title": "Editing Databases",
    "section": "Preparing to load data",
    "text": "Preparing to load data\nThe duckdb database is currently empty, so we need to load in some data. The duckdb_read_csv() function in the duckdb R package allows us to load the .csv file (available on GitHub) directly into the database without being loaded as an R object first.\nRecall that in ?@tbl-select-describe we used DESCRIBE to display the variable types of the database table(s). The list includes the variable name (Field), its Type, whether there are NULL values allowed, and whether there are keys or indices defined on the variable. See Table 2 for the DESCRIBE output on the table we are about to import.\nUnlike R, when creating a new data table, SQL requires that you communicate each future variable (column) and that variable’s type. Variable types are not automatically generated!"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#saturday-night-live",
    "href": "slides/2024-01-17-editing-db.html#saturday-night-live",
    "title": "Editing Databases",
    "section": "",
    "text": "Figure 1: image credit: NBC\n\n\n\n\n\nConsider the Saturday Night Live datasets available on the snldb GitHub repo."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#casts-table",
    "href": "slides/2024-01-17-editing-db.html#casts-table",
    "title": "Editing Databases",
    "section": "casts table",
    "text": "casts table\nUse R to understand the data from casts.csv.\n\ncasts &lt;- readr::read_csv(\"https://raw.githubusercontent.com/hhllcks/snldb/master/output/casts.csv\")\nglimpse(casts)\n\nRows: 614\nColumns: 8\n$ aid             &lt;chr&gt; \"A. Whitney Brown\", \"A. Whitney Brown\", \"A. Whitney Br…\n$ sid             &lt;dbl&gt; 11, 12, 13, 14, 15, 16, 5, 39, 40, 41, 42, 45, 46, 21,…\n$ featured        &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …\n$ first_epid      &lt;dbl&gt; 19860222, NA, NA, NA, NA, NA, 19800409, 20140118, NA, …\n$ last_epid       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ update_anchor   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ n_episodes      &lt;dbl&gt; 8, 20, 13, 20, 20, 20, 5, 11, 21, 21, 21, 18, 17, 20, …\n$ season_fraction &lt;dbl&gt; 0.444, 1.000, 1.000, 1.000, 1.000, 1.000, 0.250, 0.524…"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#loading-data",
    "href": "slides/2024-01-17-editing-db.html#loading-data",
    "title": "Editing Databases",
    "section": "Loading data",
    "text": "Loading data\nImporting .csv files as tables, a series of steps:1\n\na USE statement that ensures we are in the right schema/database.\na series of DROP TABLE statements that drop any old tables with the same names as the ones we are going to create.\na series of CREATE TABLE statements that specify the table structures.\na series of COPY statements that read the data from the .csv files into the appropriate tables."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#loading-step-1-use",
    "href": "slides/2024-01-17-editing-db.html#loading-step-1-use",
    "title": "Editing Databases",
    "section": "Loading step 1, USE",
    "text": "Loading step 1, USE\nUse the (local) database that we’ve called duck_datab.\n\n```{sql}\n#| connection: con_duckdb\n\nUSE duck_datab;\n```"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#loading-step-2-refresh",
    "href": "slides/2024-01-17-editing-db.html#loading-step-2-refresh",
    "title": "Editing Databases",
    "section": "Loading step 2, refresh",
    "text": "Loading step 2, refresh\nMake sure to “refresh” the table, in case it already exists. However, be very careful with the DROP TABLE statement, as it removes the casts table.\n\nDROP TABLE IF EXISTS casts;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#loading-step-3-create-table",
    "href": "slides/2024-01-17-editing-db.html#loading-step-3-create-table",
    "title": "Editing Databases",
    "section": "Loading step 3, CREATE TABLE",
    "text": "Loading step 3, CREATE TABLE\nCarefully define the variable types, whether or not they allow missing values, and what a default value is for that variable. Additionally, identify the key for accessing information.\n\nCREATE TABLE casts (\n  aid VARCHAR(255) NOT NULL DEFAULT '',\n  sid INTEGER NOT NULL DEFAULT 0,\n  featured BOOLEAN NOT NULL DEFAULT 'false',\n  first_epid INTEGER DEFAULT 0,\n  last_epid INTEGER DEFAULT 0,\n  update_anchor BOOLEAN NOT NULL DEFAULT 0,\n  n_episodes INTEGER NOT NULL DEFAULT 0,\n  season_fraction DECIMAL(21,20) NOT NULL DEFAULT 0,\n  PRIMARY KEY (sid, aid)\n);"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#loading-step-4-copy",
    "href": "slides/2024-01-17-editing-db.html#loading-step-4-copy",
    "title": "Editing Databases",
    "section": "Loading step 4, COPY",
    "text": "Loading step 4, COPY\nThe .csv file lives on my computer, so I load it in directly. [n.b., the statement to load in data is different in MySQL.]\n\nCOPY casts FROM 'data/casts.csv' HEADER;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#checking-the-loading-select",
    "href": "slides/2024-01-17-editing-db.html#checking-the-loading-select",
    "title": "Editing Databases",
    "section": "Checking the loading, SELECT",
    "text": "Checking the loading, SELECT\n\nSELECT * FROM casts LIMIT 8;\n\n\n\n\n\nTable 1: After CREATE TABLE where variable types are set, the COPY command pulls the data into the table. SELECT shows us that the table is as expected.\n\n\naid\nsid\nfeatured\nfirst_epid\nlast_epid\nupdate_anchor\nn_episodes\nseason_fraction\n\n\n\n\nA. Whitney Brown\n11\nTRUE\n19860222\n\nFALSE\n8\n0.444\n\n\nA. Whitney Brown\n12\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nA. Whitney Brown\n13\nTRUE\n\n\nFALSE\n13\n1.000\n\n\nA. Whitney Brown\n14\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nA. Whitney Brown\n15\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nA. Whitney Brown\n16\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nAlan Zweibel\n5\nTRUE\n19800409\n\nFALSE\n5\n0.250\n\n\nSasheer Zamata\n39\nTRUE\n20140118\n\nFALSE\n11\n0.524"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#check-the-database",
    "href": "slides/2024-01-17-editing-db.html#check-the-database",
    "title": "Editing Databases",
    "section": "Check the database",
    "text": "Check the database\nLet’s make sure that the database exists and that the table in the database exists.\n\nSHOW DATABASES;\n\n\n\n\n1 records\n\n\n\n\ndatabase_name\n\n\n\n\n\n\nduck_datab"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#check-the-database-1",
    "href": "slides/2024-01-17-editing-db.html#check-the-database-1",
    "title": "Editing Databases",
    "section": "Check the database",
    "text": "Check the database\nLet’s make sure that the database exists and that the table in the database exists.\n\nSHOW TABLES;\n\n\n\n\n1 records\n\n\n\n\nname\n\n\n\n\n\n\ncasts"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#check-the-database-2",
    "href": "slides/2024-01-17-editing-db.html#check-the-database-2",
    "title": "Editing Databases",
    "section": "Check the database",
    "text": "Check the database\nLet’s make sure that the database exists and that the table in the database exists.\n\nDESCRIBE casts;\n\n\n\n\n\nTable 2: DESCRIBE variables in the casts table.\n\n\ncolumn_name\ncolumn_type\nnull\nkey\ndefault\nextra\n\n\n\n\naid\nVARCHAR\nNO\nPRI\n''\n\n\n\nsid\nINTEGER\nNO\nPRI\n0\n\n\n\nfeatured\nBOOLEAN\nNO\n\n'false'\n\n\n\nfirst_epid\nINTEGER\nYES\n\n0\n\n\n\nlast_epid\nINTEGER\nYES\n\n0\n\n\n\nupdate_anchor\nBOOLEAN\nNO\n\n0\n\n\n\nn_episodes\nINTEGER\nNO\n\n0\n\n\n\nseason_fraction\nDECIMAL(21,20)\nNO\n\n0"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#efficiencies",
    "href": "slides/2024-01-17-editing-db.html#efficiencies",
    "title": "Editing Databases",
    "section": "Efficiencies",
    "text": "Efficiencies\nIt is worth pointing out a few aspects to loading data into SQL: keys, indices, and partitioning."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#key",
    "href": "slides/2024-01-17-editing-db.html#key",
    "title": "Editing Databases",
    "section": "Key",
    "text": "Key\nKeys are unique identifiers for each row, used primarily for connecting tables. Keys are generally not helpful for efficiency, but they are important for data integrity and relationships between tables.\n\nPRIMARY KEY is a column or set of columns that uniquely identify each row. Primary keys cannot be NULL.\nFOREIGN KEY is a column or set of columns that reference a primary key in a different table. A foreign key can be NULL."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#index",
    "href": "slides/2024-01-17-editing-db.html#index",
    "title": "Editing Databases",
    "section": "Index",
    "text": "Index\nIndices are the crux of why SQL is so much more efficient than, say, R. An index is a lookup table that helps SQL keep track of which records contain certain values. By indexing the rows, SQL is able to optimize sorting and joining tables. The index is created in advance (when the table is created) and saved to disk, which can take up substantial space on the disk. Sometimes more than one variable is used to index the table. There are trade-offs to having a lot of indices (disk space but fast wrangling) versus a few indices (slow wrangling but less space)."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#find-keys-and-indices",
    "href": "slides/2024-01-17-editing-db.html#find-keys-and-indices",
    "title": "Editing Databases",
    "section": "Find keys and indices",
    "text": "Find keys and indices\nIn MySQL the commands SHOW KEYS and SHOW INDEXES provide information about the keys and indices for each table."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#partitioning",
    "href": "slides/2024-01-17-editing-db.html#partitioning",
    "title": "Editing Databases",
    "section": "Partitioning",
    "text": "Partitioning\nAnother way to speed up query retrievals is to partition the data tables. If, for example, the SNL queries were always done by year, then the episodes table could be partitioned such that they are stored as separate tables (one per year). The partitioning functions as an index on year. The user would not be able to tell the difference between the unpartitioned episodes table and the partitioned one. Queries done by year would be faster. Queries done grouped in another way would be slower."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#best-practice",
    "href": "slides/2024-01-17-editing-db.html#best-practice",
    "title": "Editing Databases",
    "section": "",
    "text": "It is always a good idea to terminate the SQL connection when you are done with it.\n\ndbDisconnect(con_duckdb, shutdown = TRUE)\n\n\n:::"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#footnotes",
    "href": "slides/2024-01-17-editing-db.html#footnotes",
    "title": "Editing Databases",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ntaken from MDSR.↩︎"
  },
  {
    "objectID": "handout/lab5_creating_db_sds261_j24_sol.html",
    "href": "handout/lab5_creating_db_sds261_j24_sol.html",
    "title": "Lab 5 - creating databases",
    "section": "",
    "text": "Solution\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RMariaDB)\nlibrary(dbplyr)\nlibrary(mdsr)\nToday’s lab will provide practice working with creating SQL databases using DuckDB.\nThe goals for lab 5 include:"
  },
  {
    "objectID": "handout/lab5_creating_db_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab5_creating_db_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "title": "Lab 5 - creating databases",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .qmd file) which problem is being answered with which code. A sentence or two with each response goes a long way toward your understanding!\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe .qmd document should be saved in the R Project as lab5-sds261-yourlastname-yourfirstname.qmd.\nSet up a connection to a database of your naming using DuckDB.\n\n\ncon_college &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"you_name_the_db\")"
  },
  {
    "objectID": "handout/lab5_creating_db_sds261_j24_sol.html#assignment",
    "href": "handout/lab5_creating_db_sds261_j24_sol.html#assignment",
    "title": "Lab 5 - creating databases",
    "section": "Assignment",
    "text": "Assignment\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ncon_college &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"collegeDB\")\n\n\n\n\nThe data we will work with today is on college tuition, pay, and diversity. The original data source is the US Department of Education, but it has been compiled as part of TidyTuesday on March 10, 2020. Tuition and fees are for 2018-19. Diversity is for 2014.\n\nDownload the data onto your own computer. In the interest of time, let’s only use three tables: tuition_cost and salary_potential and diversity_school.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntuition_cost &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_cost.csv')\n\nsalary_potential &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/salary_potential.csv')\n\ndiversity_school &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/diversity_school.csv')\n\n\n\n\n\nFollow the first two steps in the notes: USE and DROP TABLE.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nUSE collegeDB;\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nDROP TABLE IF EXISTS salary;\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nDROP TABLE IF EXISTS diversity;\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nDROP TABLE IF EXISTS tuition;\n\n\n\n\n\nFor each of the three tables, in the CREATE TABLE operation, carefully define variable types and identify any key variables. Unfortunately, FOREIGN KEYs don’t work here because there is not referential integrity across the tables.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCREATE TABLE tuition (\n  name VARCHAR(255) NOT NULL DEFAULT '',\n  state VARCHAR(255),\n  state_code VARCHAR(255),\n  type VARCHAR(255),\n  degree_length VARCHAR(255),\n  room_and_board VARCHAR(255),\n  in_state_tuition DOUBLE,\n  in_state_total DOUBLE,\n  out_of_state_tuition DOUBLE,\n  out_of_state_total DOUBLE,\n  PRIMARY KEY (name, state)\n);\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCREATE TABLE salary (\n  rank DOUBLE,\n  name VARCHAR(255),\n  state_name VARCHAR(255),\n  early_career_pay DOUBLE,\n  mid_career_pay DOUBLE,\n  make_world_better_percent VARCHAR(255),\n  stem_percent DOUBLE\n);\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCREATE TABLE diversity (\n  name VARCHAR(255),\n  total_enrollment DOUBLE,\n  state VARCHAR(255),\n  category VARCHAR(255),\n  enrollment DOUBLE\n);\n\n\n\n\n\nUse COPY to load the data from your computer. (Hint: if there is an NA value, SQL doesn’t know that it is actually NULL and wants the variable to be loaded as a character string.)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCOPY tuition FROM 'data/tuition_cost.csv' HEADER;\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCOPY salary FROM 'data/salary_potential.csv' HEADER;\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCOPY diversity FROM 'data/diversity_school.csv' HEADER;\n\n\n\n\n\nUse SELECT * (with a LIMIT!) to make sure all three tables loaded correctly.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM tuition LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\nstate\nstate_code\ntype\ndegree_length\nroom_and_board\nin_state_tuition\nin_state_total\nout_of_state_tuition\nout_of_state_total\n\n\n\n\nAaniiih Nakoda College\nMontana\nMT\nPublic\n2 Year\nNA\n2380\n2380\n2380\n2380\n\n\nAbilene Christian University\nTexas\nTX\nPrivate\n4 Year\n10350\n34850\n45200\n34850\n45200\n\n\nAbraham Baldwin Agricultural College\nGeorgia\nGA\nPublic\n2 Year\n8474\n4128\n12602\n12550\n21024\n\n\nAcademy College\nMinnesota\nMN\nFor Profit\n2 Year\nNA\n17661\n17661\n17661\n17661\n\n\nAcademy of Art University\nCalifornia\nCA\nFor Profit\n4 Year\n16648\n27810\n44458\n27810\n44458\n\n\nAdams State University\nColorado\nCO\nPublic\n4 Year\n8782\n9440\n18222\n20456\n29238\n\n\nAdelphi University\nNew York\nNY\nPrivate\n4 Year\n16030\n38660\n54690\n38660\n54690\n\n\nAdirondack Community College\nNew York\nNY\nPublic\n2 Year\n11660\n5375\n17035\n9935\n21595\n\n\nAdrian College\nMichigan\nMI\nPrivate\n4 Year\n11318\n37087\n48405\n37087\n48405\n\n\nAdvanced Technology Institute\nVirginia\nVA\nFor Profit\n2 Year\nNA\n13680\n13680\n13680\n13680\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM salary LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\nrank\nname\nstate_name\nearly_career_pay\nmid_career_pay\nmake_world_better_percent\nstem_percent\n\n\n\n\n1\nAuburn University\nAlabama\n54400\n104500\n51\n31\n\n\n2\nUniversity of Alabama in Huntsville\nAlabama\n57500\n103900\n59\n45\n\n\n3\nThe University of Alabama\nAlabama\n52300\n97400\n50\n15\n\n\n4\nTuskegee University\nAlabama\n54500\n93500\n61\n30\n\n\n5\nSamford University\nAlabama\n48400\n90500\n52\n3\n\n\n6\nSpring Hill College\nAlabama\n46600\n89100\n53\n12\n\n\n7\nBirmingham Southern College\nAlabama\n49100\n88300\n48\n27\n\n\n8\nUniversity of Alabama at Birmingham\nAlabama\n48600\n87200\n57\n17\n\n\n9\nUniversity of South Alabama\nAlabama\n47700\n86400\n56\n17\n\n\n10\nAlabama A&M University\nAlabama\n48700\n83500\n58\n20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM diversity LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\nname\ntotal_enrollment\nstate\ncategory\nenrollment\n\n\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nWomen\n134722\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nAmerican Indian / Alaska Native\n876\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nAsian\n1959\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nBlack\n31455\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nHispanic\n13984\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nNative Hawaiian / Pacific Islander\n1019\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nWhite\n58209\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nTwo Or More Races\n19039\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nUnknown\n65163\n\n\nUniversity of Phoenix-Arizona\n195059\nArizona\nNon-Resident Foreign\n3355\n\n\n\n\n\n\n\n\n\nAdd an INDEX to the tuition table on state. We won’t discuss until Thursday, but state is better than state_code because state allows you to join with other tables. state is better than type or degree_length because state has a much higher cardinality.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCREATE INDEX state_idx ON tuition (state);"
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24.html",
    "href": "handout/lab6_editing_db_sds261_j24.html",
    "title": "Lab 6 - editing databases",
    "section": "",
    "text": "Today’s lab will provide practice working with editing SQL databases using DuckDB.\nThe goals for lab 6 include:"
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab6_editing_db_sds261_j24.html#advice-for-turning-in-the-assignment",
    "title": "Lab 6 - editing databases",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .qmd file) which problem is being answered with which code. A sentence or two with each response goes a long way toward your understanding!\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe .qmd document should be saved in the R Project as lab6-sds261-yourlastname-yourfirstname.qmd.\nSet up a connection to a database of your naming using DuckDB.\n\n\ncon_college &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"samenameaslab5\")"
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24.html#assignment",
    "href": "handout/lab6_editing_db_sds261_j24.html#assignment",
    "title": "Lab 6 - editing databases",
    "section": "Assignment",
    "text": "Assignment\nThe data we will work with today is on college tuition, pay, and diversity. The original data source is the US Department of Education, but it has been compiled as part of TidyTuesday on March 10, 2020. Tuition and fees are for 2018-19. Diversity is for 2014.\n\nUse the same database from Lab 5. If the database somehow got deleted or corrupted, go back and re-run your code from Lab 5.\n\n\nUse UPDATE to change the NA values to NULL (for room_and_board in the tuition table and make_world_better_percent in the salary table). (Originally I had a follow up task to convert the data type from VARCHAR to DOUBLE as well. However, DuckDB is particularly finicky with those conversions, and so we aren’t going to do it. If/when you work on a SQL server, you might adjust the data type using something like: ALTER TABLE tuition MODIFY room_and_board DOUBLE;.)1\n\n\nUsing INSERT INTO add records to the diversity table. Add ‘Barden University’ in ‘Louisiana’ that has a total enrollment of 10,000 students, half of whom are female. Add an additional value to indicate, if the Bellas are representative of the student population, that Barden University has 1667 Black students.\n\n\n\nCheck to see that the values inserted into the diversity table are correct. In order to tell, use a SELECT clause where you only look at schools from ‘Louisiana’ and sort by the name of the school.\n\n\nUsing the diversty table, DELETE all the records that don’t record race or ethnicity. That is, delete the records that have a category of ‘Total Minority’, ‘Women’, or ‘Non-Resident Foreign’. Again, use a SELECT command to confirm that your code worked.\n\n\nUse ALTER TABLE to change the variable type of make_world_better_percent in the salary table from VARCHAR to DOUBLE. Follow up by running DESCRIBE on the salary table to make sure your change worked. (Note: for some reason, the same code doesn’t seem to work on the tuition table with room_and_board. It says that tuition depends on something. You are welcome to try to make it work on your own computers!)\n\n\nCreate a temporary table (e.g., to use in a follow up SELECT query) that contains only the ‘Private’ universities from the tuition table.\n\n\nCreate a temporary table consisting of the JOIN of all three tables but including only the Smith College data."
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24.html#footnotes",
    "href": "handout/lab6_editing_db_sds261_j24.html#footnotes",
    "title": "Lab 6 - editing databases",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTo change the data type only during a query, use SELECT CAST(room_and_board AS DOUBLE) FROM tuition.↩︎"
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24_sol.html",
    "href": "handout/lab6_editing_db_sds261_j24_sol.html",
    "title": "Lab 6 - editing databases",
    "section": "",
    "text": "Solution\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RMariaDB)\nlibrary(dbplyr)\nlibrary(mdsr)\nToday’s lab will provide practice working with editing SQL databases using DuckDB.\nThe goals for lab 6 include:"
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "href": "handout/lab6_editing_db_sds261_j24_sol.html#advice-for-turning-in-the-assignment",
    "title": "Lab 6 - editing databases",
    "section": "Advice for turning in the assignment",
    "text": "Advice for turning in the assignment\n\nBe sure to indicate (in the .qmd file) which problem is being answered with which code. A sentence or two with each response goes a long way toward your understanding!\nsave the .Rproj file somewhere you can find it. Don’t keep everything in your downloads folder. Maybe make a folder called SDS261 or something. That folder could live on your Desktop. Or maybe in your Dropbox.\nThe .qmd document should be saved in the R Project as lab6-sds261-yourlastname-yourfirstname.qmd.\nSet up a connection to a database of your naming using DuckDB.\n\n\ncon_college &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"samenameaslab5\")"
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24_sol.html#assignment",
    "href": "handout/lab6_editing_db_sds261_j24_sol.html#assignment",
    "title": "Lab 6 - editing databases",
    "section": "Assignment",
    "text": "Assignment\nThe data we will work with today is on college tuition, pay, and diversity. The original data source is the US Department of Education, but it has been compiled as part of TidyTuesday on March 10, 2020. Tuition and fees are for 2018-19. Diversity is for 2014.\n\nUse the same database from Lab 5. If the database somehow got deleted or corrupted, go back and re-run your code from Lab 5.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ncon_college &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"collegeDB\")\n\n\n\n\n\nUse UPDATE to change the NA values to NULL (for room_and_board in the tuition table and make_world_better_percent in the salary table). (Originally I had a follow up task to convert the data type from VARCHAR to DOUBLE as well. However, DuckDB is particularly finicky with those conversions, and so we aren’t going to do it. If/when you work on a SQL server, you might adjust the data type using something like: ALTER TABLE tuition MODIFY room_and_board DOUBLE;.)1\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*) AS number_null\nFROM tuition\nWHERE room_and_board IS NULL;\n\n\n1 records\n\n\nnumber_null\n\n\n\n\n1094\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nUPDATE tuition\nSET room_and_board = NULL\nWHERE room_and_board = 'NA'\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*) AS number_null\nFROM tuition\nWHERE room_and_board IS NULL;\n\n\n1 records\n\n\nnumber_null\n\n\n\n\n1094\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM tuition LIMIT 5;\n\n\n5 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\nstate\nstate_code\ntype\ndegree_length\nroom_and_board\nin_state_tuition\nin_state_total\nout_of_state_tuition\nout_of_state_total\n\n\n\n\nAaniiih Nakoda College\nMontana\nMT\nPublic\n2 Year\nNA\n2380\n2380\n2380\n2380\n\n\nAbilene Christian University\nTexas\nTX\nPrivate\n4 Year\n10350\n34850\n45200\n34850\n45200\n\n\nAbraham Baldwin Agricultural College\nGeorgia\nGA\nPublic\n2 Year\n8474\n4128\n12602\n12550\n21024\n\n\nAcademy College\nMinnesota\nMN\nFor Profit\n2 Year\nNA\n17661\n17661\n17661\n17661\n\n\nAcademy of Art University\nCalifornia\nCA\nFor Profit\n4 Year\n16648\n27810\n44458\n27810\n44458\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*) AS number_null\nFROM salary\nWHERE make_world_better_percent IS NULL;\n\n\n1 records\n\n\nnumber_null\n\n\n\n\n33\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nUPDATE salary\nSET make_world_better_percent = NULL\nWHERE make_world_better_percent = 'NA'\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT COUNT(*) AS number_null\nFROM salary\nWHERE make_world_better_percent IS NULL;\n\n\n1 records\n\n\nnumber_null\n\n\n\n\n33\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM salary LIMIT 5;\n\n\n5 records\n\n\n\n\n\n\n\n\n\n\n\nrank\nname\nstate_name\nearly_career_pay\nmid_career_pay\nmake_world_better_percent\nstem_percent\n\n\n\n\n1\nAuburn University\nAlabama\n54400\n104500\n51\n31\n\n\n2\nUniversity of Alabama in Huntsville\nAlabama\n57500\n103900\n59\n45\n\n\n3\nThe University of Alabama\nAlabama\n52300\n97400\n50\n15\n\n\n4\nTuskegee University\nAlabama\n54500\n93500\n61\n30\n\n\n5\nSamford University\nAlabama\n48400\n90500\n52\n3\n\n\n\n\n\n\n\n\n\nUsing INSERT INTO add records to the diversity table. Add ‘Barden University’ in ‘Louisiana’ that has a total enrollment of 10,000 students, half of whom are female. Add an additional value to indicate, if the Bellas are representative of the student population, that Barden University has 1667 Black students.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nINSERT INTO diversity (name, total_enrollment, state, category, enrollment)\n   VALUES('Barden University', 10000, 'Louisiana', 'Women', 5000),\n         ('Barden University', 10000, 'Louisiana', 'Black', 1667);\n\n\n\n\n\nCheck to see that the values inserted into the diversity table are correct. In order to tell, use a SELECT clause where you only look at schools from ‘Louisiana’ and sort by the name of the school.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM diversity\nWHERE state = 'Louisiana'\nORDER BY name\nLIMIT 50;\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\nname\ntotal_enrollment\nstate\ncategory\nenrollment\n\n\n\n\nBarden University\n10000\nLouisiana\nBlack\n1667\n\n\nBarden University\n10000\nLouisiana\nWomen\n5000\n\n\nBarden University\n10000\nLouisiana\nBlack\n1667\n\n\nBarden University\n10000\nLouisiana\nBlack\n1667\n\n\nBarden University\n10000\nLouisiana\nBlack\n1667\n\n\nBaton Rouge Community College\n7740\nLouisiana\nUnknown\n633\n\n\nBaton Rouge Community College\n7740\nLouisiana\nAmerican Indian / Alaska Native\n24\n\n\nBaton Rouge Community College\n7740\nLouisiana\nAsian\n149\n\n\nBaton Rouge Community College\n7740\nLouisiana\nBlack\n3263\n\n\nBaton Rouge Community College\n7740\nLouisiana\nHispanic\n241\n\n\n\n\n\n\n\n\n\nUsing the diversty table, DELETE all the records that don’t record race or ethnicity. That is, delete the records that have a category of ‘Total Minority’, ‘Women’, or ‘Non-Resident Foreign’. Again, use a SELECT command to confirm that your code worked.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nDELETE FROM diversity\nWHERE category = 'Total Minority' OR category = 'Women' OR category = 'Non-Resident Foreign'\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM diversity\nWHERE state = 'Louisiana'\nORDER BY name\nLIMIT 50;\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\nname\ntotal_enrollment\nstate\ncategory\nenrollment\n\n\n\n\nBarden University\n10000\nLouisiana\nBlack\n1667\n\n\nBarden University\n10000\nLouisiana\nBlack\n1667\n\n\nBarden University\n10000\nLouisiana\nBlack\n1667\n\n\nBarden University\n10000\nLouisiana\nBlack\n1667\n\n\nBaton Rouge Community College\n7740\nLouisiana\nUnknown\n633\n\n\nBaton Rouge Community College\n7740\nLouisiana\nAmerican Indian / Alaska Native\n24\n\n\nBaton Rouge Community College\n7740\nLouisiana\nAsian\n149\n\n\nBaton Rouge Community College\n7740\nLouisiana\nBlack\n3263\n\n\nBaton Rouge Community College\n7740\nLouisiana\nHispanic\n241\n\n\nBaton Rouge Community College\n7740\nLouisiana\nNative Hawaiian / Pacific Islander\n12\n\n\n\n\n\n\n\n\n\nUse ALTER TABLE to change the variable type of make_world_better_percent in the salary table from VARCHAR to DOUBLE. Follow up by running DESCRIBE on the salary table to make sure your change worked. (Note: for some reason, the same code doesn’t seem to work on the tuition table with room_and_board. It says that tuition depends on something. You are welcome to try to make it work on your own computers!)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nALTER TABLE salary ALTER make_world_better_percent TYPE DOUBLE;\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nDESCRIBE salary;\n\n\n7 records\n\n\ncolumn_name\ncolumn_type\nnull\nkey\ndefault\nextra\n\n\n\n\nrank\nDOUBLE\nYES\nNA\nNA\nNA\n\n\nname\nVARCHAR\nYES\nNA\nNA\nNA\n\n\nstate_name\nVARCHAR\nYES\nNA\nNA\nNA\n\n\nearly_career_pay\nDOUBLE\nYES\nNA\nNA\nNA\n\n\nmid_career_pay\nDOUBLE\nYES\nNA\nNA\nNA\n\n\nmake_world_better_percent\nDOUBLE\nYES\nNA\nNA\nNA\n\n\nstem_percent\nDOUBLE\nYES\nNA\nNA\nNA\n\n\n\n\n\n\n\n\n\nCreate a temporary table (e.g., to use in a follow up SELECT query) that contains only the ‘Private’ universities from the tuition table.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCREATE TEMP TABLE tuition_private AS\n    SELECT * FROM tuition WHERE type = 'Private';\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM tuition_private LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\nstate\nstate_code\ntype\ndegree_length\nroom_and_board\nin_state_tuition\nin_state_total\nout_of_state_tuition\nout_of_state_total\n\n\n\n\nAbilene Christian University\nTexas\nTX\nPrivate\n4 Year\n10350\n34850\n45200\n34850\n45200\n\n\nAdelphi University\nNew York\nNY\nPrivate\n4 Year\n16030\n38660\n54690\n38660\n54690\n\n\nAdrian College\nMichigan\nMI\nPrivate\n4 Year\n11318\n37087\n48405\n37087\n48405\n\n\nAdventist University of Health Sciences\nFlorida\nFL\nPrivate\n4 Year\n4200\n15150\n19350\n15150\n19350\n\n\nAgnes Scott College\nGeorgia\nGA\nPrivate\n4 Year\n12330\n41160\n53490\n41160\n53490\n\n\nAlaska Bible College\nAlaska\nAK\nPrivate\n4 Year\n5700\n9300\n15000\n9300\n15000\n\n\nAlaska Pacific University\nAlaska\nAK\nPrivate\n4 Year\n7300\n20830\n28130\n20830\n28130\n\n\nAlbany College of Pharmacy and Health Sciences\nNew York\nNY\nPrivate\n4 Year\n10920\n35105\n46025\n35105\n46025\n\n\nAlbertus Magnus College\nConnecticut\nCT\nPrivate\n4 Year\n13200\n32060\n45260\n32060\n45260\n\n\nAlbion College\nMichigan\nMI\nPrivate\n4 Year\n12380\n45775\n58155\n45775\n58155\n\n\n\n\n\n\n\n\n\nCreate a temporary table consisting of the JOIN of all three tables but including only the Smith College data.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nCREATE TEMP TABLE smith_data AS\nSELECT tuition.name, category, enrollment, type, \n       degree_length, room_and_board,\n       in_state_tuition, out_of_state_tuition, in_state_total,\n       out_of_state_total, early_career_pay, mid_career_pay,\n       make_world_better_percent, stem_percent,\n       total_enrollment\nFROM tuition\nJOIN salary ON tuition.name = salary.name\nJOIN diversity ON tuition.name = diversity.name\nWHERE tuition.name = 'Smith College'\nLIMIT 20;\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nSELECT * FROM smith_data;\n\n\n8 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ncategory\nenrollment\ntype\ndegree_length\nroom_and_board\nin_state_tuition\nout_of_state_tuition\nin_state_total\nout_of_state_total\nearly_career_pay\nmid_career_pay\nmake_world_better_percent\nstem_percent\ntotal_enrollment\n\n\n\n\nSmith College\nAmerican Indian / Alaska Native\n5\nPrivate\n4 Year\n17520\n52404\n52404\n69924\n69924\n52700\n98200\n51\n26\n2989\n\n\nSmith College\nAsian\n348\nPrivate\n4 Year\n17520\n52404\n52404\n69924\n69924\n52700\n98200\n51\n26\n2989\n\n\nSmith College\nBlack\n149\nPrivate\n4 Year\n17520\n52404\n52404\n69924\n69924\n52700\n98200\n51\n26\n2989\n\n\nSmith College\nHispanic\n276\nPrivate\n4 Year\n17520\n52404\n52404\n69924\n69924\n52700\n98200\n51\n26\n2989\n\n\nSmith College\nNative Hawaiian / Pacific Islander\n2\nPrivate\n4 Year\n17520\n52404\n52404\n69924\n69924\n52700\n98200\n51\n26\n2989\n\n\nSmith College\nWhite\n1447\nPrivate\n4 Year\n17520\n52404\n52404\n69924\n69924\n52700\n98200\n51\n26\n2989\n\n\nSmith College\nTwo Or More Races\n128\nPrivate\n4 Year\n17520\n52404\n52404\n69924\n69924\n52700\n98200\n51\n26\n2989\n\n\nSmith College\nUnknown\n246\nPrivate\n4 Year\n17520\n52404\n52404\n69924\n69924\n52700\n98200\n51\n26\n2989"
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24_sol.html#footnotes",
    "href": "handout/lab6_editing_db_sds261_j24_sol.html#footnotes",
    "title": "Lab 6 - editing databases",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTo change the data type only during a query, use SELECT CAST(room_and_board AS DOUBLE) FROM tuition.↩︎"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#data-types",
    "href": "slides/2024-01-16-creating-db.html#data-types",
    "title": "Creating Databases",
    "section": "Data types",
    "text": "Data types\n\nNumbers: INTEGER, SMALLINT, NUMERIC, DECIMAL, DOUBLE(precision, scale) precision = # sig digits, scale = # digits the follow decimal.\nString: CHAR, VARCHAR, BINARY, TEXT\nDate: DATE, TIME, DATETIME, TIMESTAMP, YEAR\nBoolean: SMALLINT(1) in MySQL, BOOLEAN in DuckDB"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#check-constraints",
    "href": "slides/2024-01-16-creating-db.html#check-constraints",
    "title": "Creating Databases",
    "section": "CHECK constraints",
    "text": "CHECK constraints\nViolation will result in an error.\n\nCREATE TABLE CountryListCensus (\n    Id INT,\n    CountryName VARCHAR(255) NOT NULL,\n    CountryPopulation INT CHECK(CountryPopulation &gt; 0),\n    LastCensus DATE,\n    NextCensus DATE,\n    CHECK(LastCensus&lt;NextCensus),\n    PRIMARY KEY (Id)\n);"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#creating-keys",
    "href": "slides/2024-01-16-creating-db.html#creating-keys",
    "title": "Creating Databases",
    "section": "Creating KEYs",
    "text": "Creating KEYs\n\nCREATE TABLE table1 (\n  col1 ...,\n  col2 ...,\n  col3 ...,\n  PRIMARY KEY col1,\n  FOREIGN KEY col2 REFERENCES table2(table2col1)\n);\n\nEither or both of the KEYs could be multiple columns.\n\nCREATE TABLE table1 (\n  col1 ...,\n  col2 ...,\n  col3 ...,\n  PRIMARY KEY (col1, col3),\n  FOREIGN KEY (col1, col2) REFERENCES table2(table2col1, table2col4)\n);"
  },
  {
    "objectID": "slides/2024-01-16-creating-db.html#creating-indexes",
    "href": "slides/2024-01-16-creating-db.html#creating-indexes",
    "title": "Creating Databases",
    "section": "Creating INDEXes",
    "text": "Creating INDEXes\nIndexes can be created on one or more variable. A table does not need to have an INDEX (or a KEY).\n\nCREATE INDEX name_of_index ON table (col1);\n\n\nCREATE INDEX name_of_index ON table (col1, col2);"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html",
    "href": "slides/2024-01-18-db-etc.html",
    "title": "SQL Extras",
    "section": "",
    "text": "DuckDB\n\nin-process database management system that runs entirely on your own computer.\nthe data live in your storage (instead of your memory).\nyou don’t have to transfer queries or results over the internet."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#duckdb",
    "href": "slides/2024-01-18-db-etc.html#duckdb",
    "title": "SQL Extras",
    "section": "",
    "text": "DuckDB\n\nin-process database management system that runs entirely on your own computer.\nthe data live in your storage (instead of your memory).\nyou don’t have to transfer queries or results over the internet."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#duckdb-caveat",
    "href": "slides/2024-01-18-db-etc.html#duckdb-caveat",
    "title": "SQL Extras",
    "section": "DuckDB caveat",
    "text": "DuckDB caveat\n\nthe SQL dialect used in DuckDB is slightly different from MySQL\nwrite SELECT * FROM table 10; instead of SELECT * FROM table 0, 10;\nlots of different dialects, depending on the SQL server. Always be aware of the dialect you are using."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#duckdb-via-r",
    "href": "slides/2024-01-18-db-etc.html#duckdb-via-r",
    "title": "SQL Extras",
    "section": "DuckDB via R",
    "text": "DuckDB via R\n\ninstall.packages(\"duckdb\")  # only once, in the Console, not in the .qmd or .Rmd file\nlibrary(duckdb)             # at the top of the .qmd or .Rmd file\n\nlibrary(DBI)                # we also still need the DBI package\n\n\ncon_duckdb &lt;- DBI::dbConnect(duckdb::duckdb(),\n                             dbdir = \"duck_datab\")\n\n\nthe database has been stored to a database directory called duck_datab which lives in the current R project.\ncan’t open it like a standard folder, but it is where DuckDB stores the database files."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#preparing-to-load-data",
    "href": "slides/2024-01-18-db-etc.html#preparing-to-load-data",
    "title": "SQL Extras",
    "section": "Preparing to load data",
    "text": "Preparing to load data\nThe duckdb database is currently empty, so we need to load in some data. The duckdb_read_csv() function in the duckdb R package allows us to load the .csv file (available on GitHub) directly into the database without being loaded as an R object first.\nRecall that in ?@tbl-select-describe we used DESCRIBE to display the variable types of the database table(s). The list includes the variable name (Field), its Type, whether there are NULL values allowed, and whether there are keys or indices defined on the variable. See Table 2 for the DESCRIBE output on the table we are about to import.\nUnlike R, when creating a new data table, SQL requires that you communicate each future variable (column) and that variable’s type. Variable types are not automatically generated!"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#saturday-night-live",
    "href": "slides/2024-01-18-db-etc.html#saturday-night-live",
    "title": "SQL Extras",
    "section": "Saturday Night Live",
    "text": "Saturday Night Live\n\n\n\n\n\nFigure 1: image credit: NBC\n\n\n\n\nConsider the Saturday Night Live datasets available on the snldb GitHub repo."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#casts-table",
    "href": "slides/2024-01-18-db-etc.html#casts-table",
    "title": "SQL Extras",
    "section": "casts table",
    "text": "casts table\nUse R to understand the data from casts.csv.\n\ncasts &lt;- readr::read_csv(\"https://raw.githubusercontent.com/hhllcks/snldb/master/output/casts.csv\")\nglimpse(casts)\n\nRows: 614\nColumns: 8\n$ aid             &lt;chr&gt; \"A. Whitney Brown\", \"A. Whitney Brown\", \"A. Whitney Br…\n$ sid             &lt;dbl&gt; 11, 12, 13, 14, 15, 16, 5, 39, 40, 41, 42, 45, 46, 21,…\n$ featured        &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …\n$ first_epid      &lt;dbl&gt; 19860222, NA, NA, NA, NA, NA, 19800409, 20140118, NA, …\n$ last_epid       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ update_anchor   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ n_episodes      &lt;dbl&gt; 8, 20, 13, 20, 20, 20, 5, 11, 21, 21, 21, 18, 17, 20, …\n$ season_fraction &lt;dbl&gt; 0.444, 1.000, 1.000, 1.000, 1.000, 1.000, 0.250, 0.524…"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#data-types",
    "href": "slides/2024-01-18-db-etc.html#data-types",
    "title": "SQL Extras",
    "section": "Data types",
    "text": "Data types\n\nNumbers: INTEGER, SMALLINT, NUMERIC, DECIMAL, DOUBLE(precision, scale) precision = # sig digits, scale = # digits the follow decimal.\nString: CHAR, VARCHAR, BINARY, TEXT\nDate: DATE, TIME, DATETIME, TIMESTAMP, YEAR\nBoolean: SMALLINT(1) in MySQL, BOOLEAN in DuckDB"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#check-constraints",
    "href": "slides/2024-01-18-db-etc.html#check-constraints",
    "title": "SQL Extras",
    "section": "CHECK constraints",
    "text": "CHECK constraints\nViolation will result in an error.\n\nCREATE TABLE CountryListCensus (\n    Id INT,\n    CountryName VARCHAR(255) NOT NULL,\n    CountryPopulation INT CHECK(CountryPopulation &gt; 0),\n    LastCensus DATE,\n    NextCensus DATE,\n    CHECK(LastCensus&lt;NextCensus),\n    PRIMARY KEY (Id)\n);"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#loading-data",
    "href": "slides/2024-01-18-db-etc.html#loading-data",
    "title": "SQL Extras",
    "section": "Loading data",
    "text": "Loading data\nImporting .csv files as tables, a series of steps:1\n\na USE statement that ensures we are in the right schema/database.\na series of DROP TABLE statements that drop any old tables with the same names as the ones we are going to create.\na series of CREATE TABLE statements that specify the table structures.\na series of COPY statements that read the data from the .csv files into the appropriate tables."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#loading-step-1-use",
    "href": "slides/2024-01-18-db-etc.html#loading-step-1-use",
    "title": "SQL Extras",
    "section": "Loading step 1, USE",
    "text": "Loading step 1, USE\nUse the (local) database that we’ve called duck_datab.\n\n```{sql}\n#| connection: con_duckdb\n\nUSE duck_datab;\n```"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#loading-step-2-refresh",
    "href": "slides/2024-01-18-db-etc.html#loading-step-2-refresh",
    "title": "SQL Extras",
    "section": "Loading step 2, refresh",
    "text": "Loading step 2, refresh\nMake sure to “refresh” the table, in case it already exists. However, be very careful with the DROP TABLE statement, as it removes the casts table.\n\nDROP TABLE IF EXISTS casts;"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#loading-step-3-create-table",
    "href": "slides/2024-01-18-db-etc.html#loading-step-3-create-table",
    "title": "SQL Extras",
    "section": "Loading step 3, CREATE TABLE",
    "text": "Loading step 3, CREATE TABLE\nCarefully define the variable types, whether or not they allow missing values, and what a default value is for that variable. Additionally, identify the key for accessing information.\n\nCREATE TABLE casts (\n  aid VARCHAR(255) NOT NULL DEFAULT '',\n  sid INTEGER NOT NULL DEFAULT 0,\n  featured BOOLEAN NOT NULL DEFAULT 'false',\n  first_epid INTEGER DEFAULT 0,\n  last_epid INTEGER DEFAULT 0,\n  update_anchor BOOLEAN NOT NULL DEFAULT 0,\n  n_episodes INTEGER NOT NULL DEFAULT 0,\n  season_fraction DECIMAL(21,20) NOT NULL DEFAULT 0,\n  PRIMARY KEY (sid, aid)\n);"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#loading-step-4-copy",
    "href": "slides/2024-01-18-db-etc.html#loading-step-4-copy",
    "title": "SQL Extras",
    "section": "Loading step 4, COPY",
    "text": "Loading step 4, COPY\nThe .csv file lives on my computer, so I load it in directly. [n.b., the statement to load in data is different in MySQL.]\n\nCOPY casts FROM 'data/casts.csv' HEADER;"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#checking-the-loading-select",
    "href": "slides/2024-01-18-db-etc.html#checking-the-loading-select",
    "title": "SQL Extras",
    "section": "Checking the loading, SELECT",
    "text": "Checking the loading, SELECT\n\nSELECT * FROM casts LIMIT 8;\n\n\n\n\n\nTable 1: After CREATE TABLE where variable types are set, the COPY command pulls the data into the table. SELECT shows us that the table is as expected.\n\n\naid\nsid\nfeatured\nfirst_epid\nlast_epid\nupdate_anchor\nn_episodes\nseason_fraction\n\n\n\n\nA. Whitney Brown\n11\nTRUE\n19860222\n\nFALSE\n8\n0.444\n\n\nA. Whitney Brown\n12\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nA. Whitney Brown\n13\nTRUE\n\n\nFALSE\n13\n1.000\n\n\nA. Whitney Brown\n14\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nA. Whitney Brown\n15\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nA. Whitney Brown\n16\nTRUE\n\n\nFALSE\n20\n1.000\n\n\nAlan Zweibel\n5\nTRUE\n19800409\n\nFALSE\n5\n0.250\n\n\nSasheer Zamata\n39\nTRUE\n20140118\n\nFALSE\n11\n0.524"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#check-the-database",
    "href": "slides/2024-01-18-db-etc.html#check-the-database",
    "title": "SQL Extras",
    "section": "Check the database",
    "text": "Check the database\nLet’s make sure that the database exists and that the table in the database exists.\n\nSHOW DATABASES;\n\n\n\n\n1 records\n\n\n\n\ndatabase_name\n\n\n\n\n\n\nduck_datab"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#check-the-database-1",
    "href": "slides/2024-01-18-db-etc.html#check-the-database-1",
    "title": "SQL Extras",
    "section": "Check the database",
    "text": "Check the database\nLet’s make sure that the database exists and that the table in the database exists.\n\nSHOW TABLES;\n\n\n\n\n1 records\n\n\n\n\nname\n\n\n\n\n\n\ncasts"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#check-the-database-2",
    "href": "slides/2024-01-18-db-etc.html#check-the-database-2",
    "title": "SQL Extras",
    "section": "Check the database",
    "text": "Check the database\nLet’s make sure that the database exists and that the table in the database exists.\n\nDESCRIBE casts;\n\n\n\n\n\nTable 2: DESCRIBE variables in the casts table.\n\n\ncolumn_name\ncolumn_type\nnull\nkey\ndefault\nextra\n\n\n\n\naid\nVARCHAR\nNO\nPRI\n''\n\n\n\nsid\nINTEGER\nNO\nPRI\n0\n\n\n\nfeatured\nBOOLEAN\nNO\n\n'false'\n\n\n\nfirst_epid\nINTEGER\nYES\n\n0\n\n\n\nlast_epid\nINTEGER\nYES\n\n0\n\n\n\nupdate_anchor\nBOOLEAN\nNO\n\n0\n\n\n\nn_episodes\nINTEGER\nNO\n\n0\n\n\n\nseason_fraction\nDECIMAL(21,20)\nNO\n\n0"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#efficiencies",
    "href": "slides/2024-01-18-db-etc.html#efficiencies",
    "title": "SQL Extras",
    "section": "Efficiencies",
    "text": "Efficiencies\nReconsider this analogy:\n\nEach library (database) has books (tables). Each book (table) has pages (rows). Each page (row) has a unique page number to identify it (key value); to find a particular page, you sort through the page numbers (key values). But it isn’t immediately obvious where the particular page of interest is, you might have to page through the book a little bit to find the page of interest. It would be easier if you had several bookmarks throughout the book to anchor some of the page numbers. For example, if you want page 1047 and you have a bookmark on page 1050, you only have to turn back three pages. The bookmark is an index, it helps you find the desired rows much more quickly.1\n\nAnalogy taken from: https://www.quora.com/profile/Lara-Mazilu"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#key",
    "href": "slides/2024-01-18-db-etc.html#key",
    "title": "SQL Extras",
    "section": "Key",
    "text": "Key\nKeys are unique identifiers for each row, used primarily for connecting tables. Keys are generally not helpful for efficiency, but they are important for data integrity and relationships between tables.\n\nPRIMARY KEY is a column or set of columns that uniquely identify each row. Primary keys cannot be NULL.\nFOREIGN KEY is a column or set of columns that reference a primary key in a different table. A foreign key can be NULL."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#index",
    "href": "slides/2024-01-18-db-etc.html#index",
    "title": "SQL Extras",
    "section": "Index",
    "text": "Index\nIndices are the crux of why SQL is so much more efficient than, say, R. An index is a lookup table that helps SQL keep track of which records contain certain values. By indexing the rows, SQL is able to optimize sorting and joining tables. The index is created in advance (when the table is created) and saved to disk, which can take up substantial space on the disk. Sometimes more than one variable is used to index the table. There are trade-offs to having a lot of indices (disk space but fast wrangling) versus a few indices (slow wrangling but less space)."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#find-keys-and-indices",
    "href": "slides/2024-01-18-db-etc.html#find-keys-and-indices",
    "title": "SQL Extras",
    "section": "Find keys and indices",
    "text": "Find keys and indices\nIn MySQL the commands SHOW KEYS and SHOW INDEXES provide information about the keys and indices for each table."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#partitioning",
    "href": "slides/2024-01-18-db-etc.html#partitioning",
    "title": "SQL Extras",
    "section": "Partitioning",
    "text": "Partitioning\nAnother way to speed up query retrievals is to partition the data tables. If, for example, the SNL queries were always done by year, then the episodes table could be partitioned such that they are stored as separate tables (one per year). The partitioning functions as an index on year. The user would not be able to tell the difference between the unpartitioned episodes table and the partitioned one. However, queries done by year would be faster. Queries done grouped in another way would be slower."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#best-practice",
    "href": "slides/2024-01-18-db-etc.html#best-practice",
    "title": "SQL Extras",
    "section": "Best practice",
    "text": "Best practice\nIt is always a good idea to terminate the SQL connection when you are done with it.\n\ndbDisconnect(con_air, shutdown = TRUE)"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#footnotes",
    "href": "slides/2024-01-18-db-etc.html#footnotes",
    "title": "SQL Extras",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ntaken from MDSR.↩︎"
  },
  {
    "objectID": "handout/lab5_creating_db_sds261_j24.html#disconnect-from-the-server",
    "href": "handout/lab5_creating_db_sds261_j24.html#disconnect-from-the-server",
    "title": "Lab 5 - creating databases",
    "section": "Disconnect from the server",
    "text": "Disconnect from the server"
  },
  {
    "objectID": "handout/lab5_creating_db_sds261_j24_sol.html#disconnect-from-the-server",
    "href": "handout/lab5_creating_db_sds261_j24_sol.html#disconnect-from-the-server",
    "title": "Lab 5 - creating databases",
    "section": "Disconnect from the server",
    "text": "Disconnect from the server"
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24.html#disconnect-from-the-server",
    "href": "handout/lab6_editing_db_sds261_j24.html#disconnect-from-the-server",
    "title": "Lab 6 - editing databases",
    "section": "Disconnect from the server",
    "text": "Disconnect from the server\n\ndbDisconnect(con_college, shutdown = TRUE)"
  },
  {
    "objectID": "handout/lab6_editing_db_sds261_j24_sol.html#disconnect-from-the-server",
    "href": "handout/lab6_editing_db_sds261_j24_sol.html#disconnect-from-the-server",
    "title": "Lab 6 - editing databases",
    "section": "Disconnect from the server",
    "text": "Disconnect from the server\n\ndbDisconnect(con_college, shutdown = TRUE)"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#changing-data",
    "href": "slides/2024-01-17-editing-db.html#changing-data",
    "title": "Editing Databases",
    "section": "",
    "text": "The UPDATE function allows you to change a value in a table across all rows that match a certain criteria.\n\nSELECT * FROM impressions \n   WHERE name LIKE 'Ivanka%';\n\n\n5 records\n\n\nimpid\naid\nname\n\n\n\n\n2598\nScarlett Johansson\nIvanka Trump\n\n\n3716\nEmily Blunt\nIvanka Trump\n\n\n3694\nMargot Robbie\nIvanka Trump\n\n\n3679\nVanessa Bayer\nIvanka Trump\n\n\n2340\nMaya Rudolph\nIvanka Trump"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#update",
    "href": "slides/2024-01-17-editing-db.html#update",
    "title": "Editing Databases",
    "section": "",
    "text": "For funsies, let’s change Ivanka Trump to Ivanka Kushner.\n\nUPDATE impressions\n   SET name = 'Ivanka Kushner'\n   WHERE name LIKE 'Ivanka%';\n\n\nSELECT * FROM impressions \n   WHERE name LIKE 'Ivanka%';\n\n\n5 records\n\n\nimpid\naid\nname\n\n\n\n\n2598\nScarlett Johansson\nIvanka Kushner\n\n\n3716\nEmily Blunt\nIvanka Kushner\n\n\n3694\nMargot Robbie\nIvanka Kushner\n\n\n3679\nVanessa Bayer\nIvanka Kushner\n\n\n2340\nMaya Rudolph\nIvanka Kushner"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#update-1",
    "href": "slides/2024-01-17-editing-db.html#update-1",
    "title": "Editing Databases",
    "section": "",
    "text": "Watch out!\n\n\n\nBe careful with UPDATE. A careless UPDATE could write over all of the data in your table. There is no undo function."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#inserting-data",
    "href": "slides/2024-01-17-editing-db.html#inserting-data",
    "title": "Editing Databases",
    "section": "",
    "text": "Task: include recent hosts in the hosts table.\nBy searching the SNL archives, we can see that the next host, chronologically was Elon Musk on May 8, 2021.\n\n\n\n\n\n\n\n\nFigure 2: Hosts information from snlarchives.net"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#inserting-data-1",
    "href": "slides/2024-01-17-editing-db.html#inserting-data-1",
    "title": "Editing Databases",
    "section": "",
    "text": "Task: include recent hosts in the hosts table.\nBy searching the SNL archives, we can see that the next host, chronologically was Elon Musk on May 8, 2021.\n\nSELECT * FROM hosts\n    ORDER BY epid DESC\n    LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nepid\naid\n\n\n\n\n20210410\nCarey Mulligan\n\n\n20210403\nDaniel Kaluuya\n\n\n20210327\nMaya Rudolph\n\n\n20210227\nNick Jonas\n\n\n20210220\nRege-Jean Page\n\n\n20210213\nRegina King\n\n\n20210206\nDan Levy\n\n\n20210130\nJohn Krasinski\n\n\n20201219\nKristen Wiig\n\n\n20201212\nTimothee Chalamet"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#inserting-data-2",
    "href": "slides/2024-01-17-editing-db.html#inserting-data-2",
    "title": "Editing Databases",
    "section": "",
    "text": "INSERT allows us to add the relevant information associated with the episode of SNL that Elon Musk hosted.\n\nINSERT INTO hosts (epid, aid)\n   VALUES ('20210508', 'Elon Musk');\n\n\nSELECT * FROM hosts\n    ORDER BY epid DESC\n    LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nepid\naid\n\n\n\n\n20210508\nElon Musk\n\n\n20210410\nCarey Mulligan\n\n\n20210403\nDaniel Kaluuya\n\n\n20210327\nMaya Rudolph\n\n\n20210227\nNick Jonas\n\n\n20210220\nRege-Jean Page\n\n\n20210213\nRegina King\n\n\n20210206\nDan Levy\n\n\n20210130\nJohn Krasinski\n\n\n20201219\nKristen Wiig"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#inserting-data-3",
    "href": "slides/2024-01-17-editing-db.html#inserting-data-3",
    "title": "Editing Databases",
    "section": "",
    "text": "It would be tedious to INSERT all of the most recent host information by hand. Instead, we’ll scrape the SNL archives using the R package rvest, which allows us to pull out the appropriate html elements. The epid and aid are joined together in a tibble, and filtered to only include episodes which are not already in the episodes table.\n\nlibrary(rvest)\n\nrecent_hosts &lt;- read_html(\"http://www.snlarchives.net/Episodes/\") |&gt;\n  html_nodes(\"tr\") |&gt;\n  purrr::map_df( ~ tibble(\n    epid = .x |&gt; html_node(\"a.ms-2.me-2\") |&gt;\n      html_attr(\"href\") |&gt;\n      str_extract(\"\\\\d+\"),\n    aid = .x |&gt; html_node(\"td:nth-child(2)\") |&gt;\n      html_text2() |&gt;\n      str_extract(\"[\\\\w\\\\. \\\\w\\\\.]+(?=/|$)\")\n  )) |&gt;\n  filter(epid &gt; 20210508)\n\n\nwrite_csv(recent_hosts, \"data/recent_hosts.csv\")"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#deleting-data",
    "href": "slides/2024-01-17-editing-db.html#deleting-data",
    "title": "Editing Databases",
    "section": "",
    "text": "You might change your mind and decide that you really only want hosts from years up to 2022. The DELETE function deletes any rows specified by the WHERE clause.\n\nDELETE FROM hosts\n   WHERE epid &gt; 20221231;\n\n\nSELECT * FROM hosts\n  ORDER BY epid DESC\n  LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nepid\naid\n\n\n\n\n20221217\nAustin Butler\n\n\n20221210\nMartin Short\n\n\n20221203\nKeke Palmer\n\n\n20221112\nDave Chappelle\n\n\n20221105\nAmy Schumer\n\n\n20221029\nJack Harlow\n\n\n20221015\nMegan Thee Stallion\n\n\n20221008\nBrendan Gleeson\n\n\n20221001\nMiles Teller\n\n\n20220521\nNatasha Lyonne"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#altering-the-table",
    "href": "slides/2024-01-17-editing-db.html#altering-the-table",
    "title": "Editing Databases",
    "section": "",
    "text": "ALTER TABLE changes the structure of a table. For example, you can add or delete columns, create or destroy indexes, change the type of existing columns, or rename columns or the table itself.\nMultiple ADD, ALTER, DROP, and CHANGE clauses are permitted in a single ALTER TABLE statement, separated by commas.\nCaveat: I have found DuckDB to be slightly finicky in some of the operations…"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#inserting-data-4",
    "href": "slides/2024-01-17-editing-db.html#inserting-data-4",
    "title": "Editing Databases",
    "section": "",
    "text": "INSERT INTO hosts\n   SELECT *\n   FROM READ_CSV('data/recent_hosts.csv', AUTO_DETECT = TRUE);\n\n\nSELECT * FROM hosts\n  ORDER BY epid DESC\n  LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nepid\naid\n\n\n\n\n20240518\nJake Gyllenhaal\n\n\n20240511\nMaya Rudolph\n\n\n20240504\nDua Lipa\n\n\n20240413\nRyan Gosling\n\n\n20240406\nKristen Wiig\n\n\n20240330\nRamy Youssef\n\n\n20240309\nJosh Brolin\n\n\n20240302\nSydney Sweeney\n\n\n20240224\nShane Gillis\n\n\n20240203\nAyo Edebiri"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#altering-the-table-drop-columns",
    "href": "slides/2024-01-17-editing-db.html#altering-the-table-drop-columns",
    "title": "Editing Databases",
    "section": "",
    "text": "ALTER TABLE t1\nDROP COLUMN col1,\nDROP COLUMN col2;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#altering-the-table-change-name-and-definition",
    "href": "slides/2024-01-17-editing-db.html#altering-the-table-change-name-and-definition",
    "title": "Editing Databases",
    "section": "",
    "text": "rename an INT NOT NULL column from a to b and change its definition to use the BIGINT data type while retaining the NOT NULL attribute.\n\n\nALTER TABLE t1 CHANGE a b BIGINT NOT NULL;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#altering-the-table-change-definition-not-name",
    "href": "slides/2024-01-17-editing-db.html#altering-the-table-change-definition-not-name",
    "title": "Editing Databases",
    "section": "",
    "text": "CHANGE, the syntax requires two column names, so you must specify the same name twice to leave the name unchanged. For example, to change the definition of column b.\n\n\nALTER TABLE t1 CHANGE b b INT NOT NULL;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#altering-the-table-modify-definition",
    "href": "slides/2024-01-17-editing-db.html#altering-the-table-modify-definition",
    "title": "Editing Databases",
    "section": "",
    "text": "MODIFY is more convenient to change the definition without changing the name because it requires the column name only once.\n\n\nALTER TABLE t1 MODIFY b INT NOT NULL;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#altering-the-table-change-name-not-definition",
    "href": "slides/2024-01-17-editing-db.html#altering-the-table-change-name-not-definition",
    "title": "Editing Databases",
    "section": "",
    "text": "CHANGE, the syntax requires a column definition, so to leave the definition unchanged, you must respecify the definition the column currently has. For example, to rename an INT NOT NULL column from b to a.\n\n\nALTER TABLE t1 CHANGE b a INT NOT NULL;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#altering-the-table-rename-column-name-not-definition",
    "href": "slides/2024-01-17-editing-db.html#altering-the-table-rename-column-name-not-definition",
    "title": "Editing Databases",
    "section": "",
    "text": "RENAME COLUMN is more convenient to change the name without changing the definition because it requires only the old and new names.\n\n\nALTER TABLE t1 RENAME COLUMN b TO a;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#altering-the-table-rename-column-multiple-columns",
    "href": "slides/2024-01-17-editing-db.html#altering-the-table-rename-column-multiple-columns",
    "title": "Editing Databases",
    "section": "",
    "text": "cannot RENAME COLUMN to a column name that already exists. The following are valid.\n\n\n/* swap a and b */\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO a;\n\n/* \"rotate\" a, b, c through a cycle */\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO c,\n               RENAME COLUMN c TO a;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#temporary-tables",
    "href": "slides/2024-01-17-editing-db.html#temporary-tables",
    "title": "Editing Databases",
    "section": "",
    "text": "Temporary tables are used to break down complex queries into smaller, more manageable steps. For example, let’s say we want to JOIN two tables after each has been filtered using different WHERE clauses. The filtered tables can each be saved into their own temporary tables and then the temporary tables can be merged.\nTables in DuckDB are saved (to disk), even when the connection is closed. However, temporary tables are saved in memory (instead of on disk) and are deleted when the connection is closed."
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#temporary-tables-1",
    "href": "slides/2024-01-17-editing-db.html#temporary-tables-1",
    "title": "Editing Databases",
    "section": "",
    "text": "We wouldn’t want to wrangle the date every single time we used the data.\n\nCREATE TEMP TABLE episodes_date AS\n    SELECT *, CASE\n             WHEN POSITION(',' IN aired) &gt; 0 THEN\n    EXTRACT(YEAR FROM CAST(\n                SUBSTRING(aired, POSITION(',' IN aired) + 2) || '-' ||\n                CASE\n                    WHEN POSITION('January' IN aired) &gt; 0 THEN '01'\n                    WHEN POSITION('February' IN aired) &gt; 0 THEN '02'\n                    WHEN POSITION('March' IN aired) &gt; 0 THEN '03'\n                    WHEN POSITION('April' IN aired) &gt; 0 THEN '04'\n                    WHEN POSITION('May' IN aired) &gt; 0 THEN '05'\n                    WHEN POSITION('June' IN aired) &gt; 0 THEN '06'\n                    WHEN POSITION('July' IN aired) &gt; 0 THEN '07'\n                    WHEN POSITION('August' IN aired) &gt; 0 THEN '08'\n                    WHEN POSITION('September' IN aired) &gt; 0 THEN '09'\n                    WHEN POSITION('October' IN aired) &gt; 0 THEN '10'\n                    WHEN POSITION('November' IN aired) &gt; 0 THEN '11'\n                    WHEN POSITION('December' IN aired) &gt; 0 THEN '12'\n                    ELSE '01' -- Default to January if no month is found\n                END || '-' ||\n                SUBSTRING(aired, POSITION(' ' IN aired) + 1, 2) AS DATE\n            ))\n            END AS year FROM episodes;"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#temporary-tables-hosts",
    "href": "slides/2024-01-17-editing-db.html#temporary-tables-hosts",
    "title": "Editing Databases",
    "section": "Temporary Tables (hosts)",
    "text": "Temporary Tables (hosts)\n\nSELECT * FROM hosts LIMIT 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nepid\n\n\naid\n\n\n\n\n\n\n20210410\n\n\nCarey Mulligan\n\n\n\n\n20210403\n\n\nDaniel Kaluuya\n\n\n\n\n20210327\n\n\nMaya Rudolph\n\n\n\n\n20210227\n\n\nNick Jonas\n\n\n\n\n20210220\n\n\nRege-Jean Page\n\n\n\n\n20210213\n\n\nRegina King\n\n\n\n\n20210206\n\n\nDan Levy\n\n\n\n\n20210130\n\n\nJohn Krasinski\n\n\n\n\n20201219\n\n\nKristen Wiig\n\n\n\n\n20201212\n\n\nTimothee Chalamet"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#temporary-tables-episodes",
    "href": "slides/2024-01-17-editing-db.html#temporary-tables-episodes",
    "title": "Editing Databases",
    "section": "",
    "text": "SELECT * FROM episodes LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nsid\nepid\naired\nepno\n\n\n\n\n46\n20210410\nApril 10, 2021\n17\n\n\n46\n20210403\nApril 3, 2021\n16\n\n\n46\n20210327\nMarch 27, 2021\n15\n\n\n46\n20210227\nFebruary 27, 2021\n14\n\n\n46\n20210220\nFebruary 20, 2021\n13\n\n\n46\n20210213\nFebruary 13, 2021\n12\n\n\n46\n20210206\nFebruary 6, 2021\n11\n\n\n46\n20210130\nJanuary 30, 2021\n10\n\n\n46\n20201219\nDecember 19, 2020\n9\n\n\n46\n20201212\nDecember 12, 2020\n8"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#temporary-table-exists",
    "href": "slides/2024-01-17-editing-db.html#temporary-table-exists",
    "title": "Editing Databases",
    "section": "",
    "text": "SELECT * FROM episodes_date LIMIT 10;\n\n\nDisplaying records 1 - 10\n\n\nsid\nepid\naired\nepno\nyear\n\n\n\n\n46\n20210410\nApril 10, 2021\n17\n2021\n\n\n46\n20210403\nApril 3, 2021\n16\n2021\n\n\n46\n20210327\nMarch 27, 2021\n15\n2021\n\n\n46\n20210227\nFebruary 27, 2021\n14\n2021\n\n\n46\n20210220\nFebruary 20, 2021\n13\n2021\n\n\n46\n20210213\nFebruary 13, 2021\n12\n2021\n\n\n46\n20210206\nFebruary 6, 2021\n11\n2021\n\n\n46\n20210130\nJanuary 30, 2021\n10\n2021\n\n\n46\n20201219\nDecember 19, 2020\n9\n2020\n\n\n46\n20201212\nDecember 12, 2020\n8\n2020"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#using-a-temporary-table",
    "href": "slides/2024-01-17-editing-db.html#using-a-temporary-table",
    "title": "Editing Databases",
    "section": "",
    "text": "Now that the year variable has been created in the new temporary table called episodes_date, we can use episode_date to query and find, for example, all of the hosts in 2019.\n\nSELECT hosts.aid, ep.aired, ep.year FROM hosts \nJOIN episodes_date AS ep ON hosts.epid = ep.epid\nWHERE year = 2019\nLIMIT 25;\n\n\nDisplaying records 1 - 10\n\n\naid\naired\nyear\n\n\n\n\nEddie Murphy\nDecember 21, 2019\n2019\n\n\nScarlett Johansson\nDecember 14, 2019\n2019\n\n\nJennifer Lopez\nDecember 7, 2019\n2019\n\n\nWill Ferrell\nNovember 23, 2019\n2019\n\n\nHarry Styles\nNovember 16, 2019\n2019\n\n\nKristen Stewart\nNovember 2, 2019\n2019\n\n\nChance the Rapper\nOctober 26, 2019\n2019\n\n\nDavid Harbour\nOctober 12, 2019\n2019\n\n\nPhoebe Waller-Bridge\nOctober 5, 2019\n2019\n\n\nWoody Harrelson\nSeptember 28, 2019\n2019"
  },
  {
    "objectID": "slides/2024-01-17-editing-db.html#what-does-position-do",
    "href": "slides/2024-01-17-editing-db.html#what-does-position-do",
    "title": "Editing Databases",
    "section": "",
    "text": "In case you are curious about the date wrangling code… consider SUBSTRING(aired, POSITION(',' IN aired) + 2)\n\nPOSITION(',' IN aired): This part of the expression uses the POSITION function to find the position of the first occurrence of the comma (,) in the string aired. The result is the index (position) of the comma within the string.\nPOSITION(',' IN aired) + 2: This adds 2 to the index of the comma. The + 2 is used to move the starting point of the substring two positions to the right of the comma. This is done to exclude the comma itself and any following spaces.\nSUBSTRING(aired, POSITION(',' IN aired) + 2): This part uses the SUBSTRING function to extract a substring from the string aired. The starting position of the substring is determined by POSITION(',' IN aired) + 2, and it goes until the end of the string. This effectively removes the part of the string that comes before and including the first comma.\n\nIn summary, the entire expression is extracting a substring from the original string aired, starting from two positions to the right of the first comma and continuing until the end of the string. This can be useful in scenarios where you want to remove or isolate part of a string based on the position of a specific character (in this case, the comma)."
  },
  {
    "objectID": "handout/tempqmd.html",
    "href": "handout/tempqmd.html",
    "title": "Untitled",
    "section": "",
    "text": "words here are perfect\n\nrnorm(10)\n\n [1]  0.32076290 -0.27356519  1.32280634 -0.53182529 -0.36214646  0.30805779\n [7]  0.53618050 -0.66224235 -0.04290013  0.07816006\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#back-to-the-flights",
    "href": "slides/2024-01-18-db-etc.html#back-to-the-flights",
    "title": "SQL Extras",
    "section": "Back to the flights",
    "text": "Back to the flights\nThe examples below use the airlines database, including the flights, carriers, airports, and planes tables."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#keys",
    "href": "slides/2024-01-18-db-etc.html#keys",
    "title": "SQL Extras",
    "section": "KEYs",
    "text": "KEYs\nKeys are unique identifiers for each row, used primarily for connecting tables. Keys are generally not helpful for efficiency, but they are important for data integrity and relationships between tables. A key is a pointer that identifies a record. In practice, a key is one or more columns that are earmarked to uniquely identify a record in a table. Keys serve two main purposes:\n\nThey provide constraints on the column such as that it can’t store duplicate or null values.\nThey are also used to generate relationships among different tables."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#indexes",
    "href": "slides/2024-01-18-db-etc.html#indexes",
    "title": "SQL Extras",
    "section": "INDEXes",
    "text": "INDEXes\n\nBy indexing the rows, SQL is able to optimize sorting and joining tables.\nThe index is created in advance (when the table is created) and saved to disk, which can take up substantial space on the disk.\nSometimes more than one variable is used to index the table.\nThere are trade-offs to having a lot of indexes (disk space but fast wrangling) versus a few indexes (slow wrangling but less space).\nA table may have more than one index but you shouldn’t add indexes to every column in a table, as these have to be updated for every addition/update/delete to the column.\nIndexes should be added to columns that are frequently included in queries."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#show-indexes",
    "href": "slides/2024-01-18-db-etc.html#show-indexes",
    "title": "SQL Extras",
    "section": "SHOW INDEXES",
    "text": "SHOW INDEXES\nNotice that the planes table has a single PRIMARY key. That primary key is used to index the table. The flights table has no PRIMARY key, but it does have six different indexes: Year, Date, Origin, Dest, Carrier, and tailNum.\n\nSHOW INDEXES FROM planes;\n\n\n\n\n1 records\n\n\n\n\nTable\n\n\nNon_unique\n\n\nKey_name\n\n\nSeq_in_index\n\n\nColumn_name\n\n\nCollation\n\n\nCardinality\n\n\nSub_part\n\n\nPacked\n\n\nNull\n\n\nIndex_type\n\n\nComment\n\n\nIndex_comment\n\n\n\n\n\n\nplanes\n\n\n0\n\n\nPRIMARY\n\n\n1\n\n\ntailnum\n\n\nA\n\n\n3322\n\n\n\n\n\n\n\n\nBTREE\n\n\n\n\n\n\n\n\n\n\n\n\nSHOW INDEXES FROM flights;\n\n\n\n\n8 records\n\n\n\n\nTable\n\n\nNon_unique\n\n\nKey_name\n\n\nSeq_in_index\n\n\nColumn_name\n\n\nCollation\n\n\nCardinality\n\n\nSub_part\n\n\nPacked\n\n\nNull\n\n\nIndex_type\n\n\nComment\n\n\nIndex_comment\n\n\n\n\n\n\nflights\n\n\n1\n\n\nYear\n\n\n1\n\n\nyear\n\n\nA\n\n\n7\n\n\n\n\n\n\nYES\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nDate\n\n\n1\n\n\nyear\n\n\nA\n\n\n7\n\n\n\n\n\n\nYES\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nDate\n\n\n2\n\n\nmonth\n\n\nA\n\n\n89\n\n\n\n\n\n\nYES\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nDate\n\n\n3\n\n\nday\n\n\nA\n\n\n2712\n\n\n\n\n\n\nYES\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nOrigin\n\n\n1\n\n\norigin\n\n\nA\n\n\n2267\n\n\n\n\n\n\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nDest\n\n\n1\n\n\ndest\n\n\nA\n\n\n2267\n\n\n\n\n\n\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nCarrier\n\n\n1\n\n\ncarrier\n\n\nA\n\n\n134\n\n\n\n\n\n\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\ntailNum\n\n\n1\n\n\ntailnum\n\n\nA\n\n\n37862\n\n\n\n\n\n\nYES\n\n\nBTREE"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#show-indexes-1",
    "href": "slides/2024-01-18-db-etc.html#show-indexes-1",
    "title": "SQL Extras",
    "section": "SHOW INDEXES",
    "text": "SHOW INDEXES\nThe values output by SHOW INDEXES are:1\n\nTable: The name of the table.\nNon_unique: 0 if the index cannot contain duplicates, 1 if it can.\nKey_name: The name of the index. If the index is the primary key, the name is always PRIMARY.\nSeq_in_index: The column sequence number in the index, starting with 1.\nColumn_name: The column name. See also the description for the Expression column.\nCollation: How the column is sorted in the index. This can have values A (ascending), D (descending), or NULL (not sorted).\nCardinality: An estimate of the number of unique values in the index.\nSub_part: The index prefix. That is, the number of indexed characters if the column is only partly indexed, NULL if the entire column is indexed.\nPacked: Indicates how the key is packed. NULL if it is not.\nNull: Contains YES if the column may contain NULL values and ’’ if not.\nIndex_type: The index method used (BTREE, FULLTEXT, HASH, RTREE).\nComment: Information about the index not described in its own column, such as disabled if the index is disabled.\nIndex_comment: Any comment provided for the index with a COMMENT attribute when the index was created.\n\nTaken from: https://dev.mysql.com/doc/refman/8.0/en/show-index.html"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#querying-quickly",
    "href": "slides/2024-01-18-db-etc.html#querying-quickly",
    "title": "SQL Extras",
    "section": "Querying quickly",
    "text": "Querying quickly\nIndexes are built to accommodate the specific queries that are most likely to be run. However, you might not know which queries are going to be run, so it isn’t always obviously how to index a table.\n\nSHOW INDEXES FROM flights;\n\n\n\n\n8 records\n\n\n\n\nTable\n\n\nNon_unique\n\n\nKey_name\n\n\nSeq_in_index\n\n\nColumn_name\n\n\nCollation\n\n\nCardinality\n\n\nSub_part\n\n\nPacked\n\n\nNull\n\n\nIndex_type\n\n\nComment\n\n\nIndex_comment\n\n\n\n\n\n\nflights\n\n\n1\n\n\nYear\n\n\n1\n\n\nyear\n\n\nA\n\n\n7\n\n\n\n\n\n\nYES\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nDate\n\n\n1\n\n\nyear\n\n\nA\n\n\n7\n\n\n\n\n\n\nYES\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nDate\n\n\n2\n\n\nmonth\n\n\nA\n\n\n89\n\n\n\n\n\n\nYES\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nDate\n\n\n3\n\n\nday\n\n\nA\n\n\n2712\n\n\n\n\n\n\nYES\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nOrigin\n\n\n1\n\n\norigin\n\n\nA\n\n\n2267\n\n\n\n\n\n\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nDest\n\n\n1\n\n\ndest\n\n\nA\n\n\n2267\n\n\n\n\n\n\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\nCarrier\n\n\n1\n\n\ncarrier\n\n\nA\n\n\n134\n\n\n\n\n\n\n\n\nBTREE\n\n\n\n\n\n\n\n\nflights\n\n\n1\n\n\ntailNum\n\n\n1\n\n\ntailnum\n\n\nA\n\n\n37862\n\n\n\n\n\n\nYES\n\n\nBTREE"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#explain-with-distance",
    "href": "slides/2024-01-18-db-etc.html#explain-with-distance",
    "title": "SQL Extras",
    "section": "EXPLAIN with distance",
    "text": "EXPLAIN with distance\nEXPLAIN communicates how onerous the query is, without actually running it—saving you the time of having to wait for it to execute.\n\nEXPLAIN SELECT * FROM flights WHERE distance &gt; 3000;\n\n\n\n\n1 records\n\n\n\n\nid\n\n\nselect_type\n\n\ntable\n\n\npartitions\n\n\ntype\n\n\npossible_keys\n\n\nkey\n\n\nkey_len\n\n\nref\n\n\nrows\n\n\nfiltered\n\n\nExtra\n\n\n\n\n\n\n1\n\n\nSIMPLE\n\n\nflights\n\n\np1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25,p26,p27,p28,p29,p30,p31,p32\n\n\nALL\n\n\n\n\n\n\n\n\n\n\n47932811\n\n\n33.3\n\n\nUsing where\n\n\n\n\n\n\n\nIf we were to run a query for long flights using the distance column the server will have to inspect each of the 48 million rows, because distance is not indexed. A query on a non-indexed variable is the slowest possible search and is often called a table scan. The 48 million number that you see in the rows column is an estimate of the number of rows that MySQL will have to consult in order to process your query. In general, more rows mean a slower query."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#explain-with-year",
    "href": "slides/2024-01-18-db-etc.html#explain-with-year",
    "title": "SQL Extras",
    "section": "EXPLAIN with year",
    "text": "EXPLAIN with year\nA search for recent flights using the year column, which has an index built on it, considers many fewer rows (about 6.3 million, those flights in 2013).\n\nEXPLAIN SELECT * FROM flights WHERE year = 2013;\n\n\n\n\n1 records\n\n\n\n\nid\n\n\nselect_type\n\n\ntable\n\n\npartitions\n\n\ntype\n\n\npossible_keys\n\n\nkey\n\n\nkey_len\n\n\nref\n\n\nrows\n\n\nfiltered\n\n\nExtra\n\n\n\n\n\n\n1\n\n\nSIMPLE\n\n\nflights\n\n\np27\n\n\nALL\n\n\nYear,Date\n\n\n\n\n\n\n\n\n6369482\n\n\n100\n\n\nUsing where"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#explain-with-year-and-month",
    "href": "slides/2024-01-18-db-etc.html#explain-with-year-and-month",
    "title": "SQL Extras",
    "section": "EXPLAIN with year and month",
    "text": "EXPLAIN with year and month\nIn a search by year and month, SQL uses the Date index. Only 700,000 rows are searched, those in June of 2013.\n\nEXPLAIN SELECT * FROM flights WHERE year = 2013 AND month = 6;\n\n\n\n\n1 records\n\n\n\n\nid\n\n\nselect_type\n\n\ntable\n\n\npartitions\n\n\ntype\n\n\npossible_keys\n\n\nkey\n\n\nkey_len\n\n\nref\n\n\nrows\n\n\nfiltered\n\n\nExtra\n\n\n\n\n\n\n1\n\n\nSIMPLE\n\n\nflights\n\n\np27\n\n\nref\n\n\nYear,Date\n\n\nDate\n\n\n6\n\n\nconst,const\n\n\n714535\n\n\n100"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#explain-with-month",
    "href": "slides/2024-01-18-db-etc.html#explain-with-month",
    "title": "SQL Extras",
    "section": "EXPLAIN with month",
    "text": "EXPLAIN with month\nIf we search for particular months across all years, the indexing does not help at all. The query results in a table scan.\n\nEXPLAIN SELECT * FROM flights WHERE month = 6;\n\n\n\n\n1 records\n\n\n\n\nid\n\n\nselect_type\n\n\ntable\n\n\npartitions\n\n\ntype\n\n\npossible_keys\n\n\nkey\n\n\nkey_len\n\n\nref\n\n\nrows\n\n\nfiltered\n\n\nExtra\n\n\n\n\n\n\n1\n\n\nSIMPLE\n\n\nflights\n\n\np1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25,p26,p27,p28,p29,p30,p31,p32\n\n\nALL\n\n\n\n\n\n\n\n\n\n\n47932811\n\n\n10\n\n\nUsing where\n\n\n\n\n\n\n\nAlthough month is part of the Date index, it is the second column in the index, and thus it doesn’t help us when we aren’t filtering on year. Thus, if it were common for our users to search on month without year, it would probably be worth building an index on month. Were we to actually run these queries, there would be a significant difference in computational time."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#explain-with-join---faster",
    "href": "slides/2024-01-18-db-etc.html#explain-with-join---faster",
    "title": "SQL Extras",
    "section": "EXPLAIN with JOIN - faster",
    "text": "EXPLAIN with JOIN - faster\nThe cardinality of the index on tailnum is large (the number of rows in flights associated with each unique value of tailnum is small).\n\nEXPLAIN \n  SELECT * FROM planes p \n  LEFT JOIN flights o ON p.tailnum = o.TailNum\n  WHERE manufacturer = 'BOEING';\n\n\n\n\n2 records\n\n\n\n\nid\n\n\nselect_type\n\n\ntable\n\n\npartitions\n\n\ntype\n\n\npossible_keys\n\n\nkey\n\n\nkey_len\n\n\nref\n\n\nrows\n\n\nfiltered\n\n\nExtra\n\n\n\n\n\n\n1\n\n\nSIMPLE\n\n\np\n\n\n\n\nALL\n\n\n\n\n\n\n\n\n\n\n3322\n\n\n10\n\n\nUsing where\n\n\n\n\n1\n\n\nSIMPLE\n\n\no\n\n\np1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25,p26,p27,p28,p29,p30,p31,p32\n\n\nref\n\n\ntailNum\n\n\ntailNum\n\n\n9\n\n\nairlines.p.tailnum\n\n\n1266\n\n\n100"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#explain-with-join---slower",
    "href": "slides/2024-01-18-db-etc.html#explain-with-join---slower",
    "title": "SQL Extras",
    "section": "EXPLAIN with JOIN - slower",
    "text": "EXPLAIN with JOIN - slower\n\nThe cardinality of the index on year is small (the number of rows in flights associated with each unique year is large).\n\n\nEXPLAIN \n  SELECT * FROM planes p \n  LEFT JOIN flights o ON p.Year = o.Year\n  WHERE manufacturer = 'BOEING';\n\n\n\n\n2 records\n\n\n\n\nid\n\n\nselect_type\n\n\ntable\n\n\npartitions\n\n\ntype\n\n\npossible_keys\n\n\nkey\n\n\nkey_len\n\n\nref\n\n\nrows\n\n\nfiltered\n\n\nExtra\n\n\n\n\n\n\n1\n\n\nSIMPLE\n\n\np\n\n\n\n\nALL\n\n\n\n\n\n\n\n\n\n\n3322\n\n\n10\n\n\nUsing where\n\n\n\n\n1\n\n\nSIMPLE\n\n\no\n\n\np1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25,p26,p27,p28,p29,p30,p31,p32\n\n\nref\n\n\nYear,Date\n\n\nYear\n\n\n3\n\n\nairlines.p.year\n\n\n6450117\n\n\n100\n\n\nUsing where"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#sql-in-dbplyr",
    "href": "slides/2024-01-18-db-etc.html#sql-in-dbplyr",
    "title": "SQL Extras",
    "section": "SQL in dbplyr",
    "text": "SQL in dbplyr\nAs mentioned previously, dbplyr doesn’t translate every R command into SQL. After all, SQL is not a statistical software and doesn’t, for example, have a mechanism for creating data visualizations. To track which R commands are connected to SQL see the dbplyr reference sheet."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#median",
    "href": "slides/2024-01-18-db-etc.html#median",
    "title": "SQL Extras",
    "section": "Median",
    "text": "Median\nLet’s start with an example, calculating the median altitude in the airports table.1\n\nairports &lt;- tbl(con_air, \"airports\")\n\nhead(airports)\n\n# Source:   SQL [6 x 9]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  faa   name                           lat   lon   alt    tz dst   city  country\n  &lt;chr&gt; &lt;chr&gt;                        &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  \n1 04G   Lansdowne Airport             41.1 -80.6  1044    -5 A     Youn… United…\n2 06A   Moton Field Municipal Airpo…  32.5 -85.7   264    -6 A     Tusk… United…\n3 06C   Schaumburg Regional           42.0 -88.1   801    -6 A     Scha… United…\n4 06N   Randall Airport               41.4 -74.4   523    -5 A     Midd… United…\n5 09J   Jekyll Island Airport         31.1 -81.4    11    -5 A     Jeky… United…\n6 0A9   Elizabethton Municipal Airp…  36.4 -82.2  1593    -5 A     Eliz… United…\n\n\nExample taken from: https://sebhastian.com/mysql-median/"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#median-1",
    "href": "slides/2024-01-18-db-etc.html#median-1",
    "title": "SQL Extras",
    "section": "Median",
    "text": "Median\nIt looks like show_query() is providing SQL code for calculating the median!\n\nmedian_query &lt;- airports |&gt;\n  summarize(med_alt = median(alt, na.rm = TRUE))\n\nshow_query(median_query)\n\n&lt;SQL&gt;\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY `alt`) AS `med_alt`\nFROM `airports`"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#median-2",
    "href": "slides/2024-01-18-db-etc.html#median-2",
    "title": "SQL Extras",
    "section": "Median",
    "text": "Median\nBut when the SQL code is run, it doesn’t seem to work.\n\nSELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY `alt`) AS `med_alt`\nFROM `airports`;\n\nError: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'GROUP (ORDER BY `alt`) AS `med_alt`\nFROM `airports`' at line 1 [1064]"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#median-3",
    "href": "slides/2024-01-18-db-etc.html#median-3",
    "title": "SQL Extras",
    "section": "Median",
    "text": "Median\nWhat happens when we computer the median on the tbl?\n\nairports |&gt;\n  summarize(med_alt = median(alt, na.rm = TRUE))\n\nError in `collect()`:\n! Failed to collect lazy table.\nCaused by error:\n! You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'GROUP (ORDER BY `alt`) AS `med_alt`\nFROM `airports`\nLIMIT 7' at line 1 [1064]"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#median-4",
    "href": "slides/2024-01-18-db-etc.html#median-4",
    "title": "SQL Extras",
    "section": "Median",
    "text": "Median\nHow can the median be calculated in SQL?\n\nSET @row_index := -1;\n\n\nSELECT AVG(subquery.alt) AS median_value\nFROM (\nSELECT @row_index:=@row_index + 1 AS row_index, alt\n  FROM airports\n  ORDER BY alt\n) AS subquery\nWHERE subquery.row_index IN (FLOOR(@row_index / 2), CEIL(@row_index / 2));\n\n\n\n\n1 records\n\n\n\n\nmedian_value\n\n\n\n\n\n\n476"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#median-5",
    "href": "slides/2024-01-18-db-etc.html#median-5",
    "title": "SQL Extras",
    "section": "Median",
    "text": "Median\nLet’s break down what the code is doing… First, set the row_index to -1 and iterate through by adding +1 for each row. Then concatenate the row_index information onto our table of interest. (Basically, create a column that gives a row value to the dataset, sorted by altitude.)\n\nSET @row_index := -1;\n\n\nSELECT @row_index:=@row_index + 1 AS row_index, alt\n  FROM airports\n  ORDER BY alt\n  LIMIT 10;\n\n\n\n\nDisplaying records 1 - 10\n\n\n\n\nrow_index\n\n\nalt\n\n\n\n\n\n\n0\n\n\n-54\n\n\n\n\n1\n\n\n-42\n\n\n\n\n2\n\n\n0\n\n\n\n\n3\n\n\n0\n\n\n\n\n4\n\n\n0\n\n\n\n\n5\n\n\n0\n\n\n\n\n6\n\n\n0\n\n\n\n\n7\n\n\n0\n\n\n\n\n8\n\n\n0\n\n\n\n\n9\n\n\n0"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#median-6",
    "href": "slides/2024-01-18-db-etc.html#median-6",
    "title": "SQL Extras",
    "section": "Median",
    "text": "Median\nNext, filter the data to include only the middle row or two rows.\n\nSET @row_index := -1;\n\n\nSELECT *\nFROM (\nSELECT @row_index:=@row_index + 1 AS row_index, alt\n  FROM airports\n  ORDER BY alt\n) AS subquery\nWHERE subquery.row_index IN (FLOOR(@row_index / 2), CEIL(@row_index / 2));\n\n\n\n\n2 records\n\n\n\n\nrow_index\n\n\nalt\n\n\n\n\n\n\n728\n\n\n474\n\n\n\n\n729\n\n\n477"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#median-7",
    "href": "slides/2024-01-18-db-etc.html#median-7",
    "title": "SQL Extras",
    "section": "Median",
    "text": "Median\nThe last step is to average the middle row(s). If only one row is pulled out in the previous query, then only one row will be averaged (which the computer does happily).\n\nSET @row_index := -1;\n\n\nSELECT AVG(subquery.alt) AS median_value\nFROM (\nSELECT @row_index:=@row_index + 1 AS row_index, alt\n  FROM airports\n  ORDER BY alt\n) AS subquery\nWHERE subquery.row_index IN (FLOOR(@row_index / 2), CEIL(@row_index / 2));\n\n\n\n\n1 records\n\n\n\n\nmedian_value\n\n\n\n\n\n\n476"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-ifelse",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-ifelse",
    "title": "SQL Extras",
    "section": "CASE WHEN and ifelse()",
    "text": "CASE WHEN and ifelse()\nConsider the various R functions that create new variables based on an original variable.\n\nairports |&gt;\n  mutate(sea = ifelse(alt &gt; 500, \"above sea\", \"near sea\")) |&gt;\n  head(5)\n\n# Source:   SQL [5 x 10]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  faa   name                     lat   lon   alt    tz dst   city  country sea  \n  &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;\n1 04G   Lansdowne Airport       41.1 -80.6  1044    -5 A     Youn… United… abov…\n2 06A   Moton Field Municipal…  32.5 -85.7   264    -6 A     Tusk… United… near…\n3 06C   Schaumburg Regional     42.0 -88.1   801    -6 A     Scha… United… abov…\n4 06N   Randall Airport         41.4 -74.4   523    -5 A     Midd… United… abov…\n5 09J   Jekyll Island Airport   31.1 -81.4    11    -5 A     Jeky… United… near…"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-ifelse-1",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-ifelse-1",
    "title": "SQL Extras",
    "section": "CASE WHEN and ifelse()",
    "text": "CASE WHEN and ifelse()\n\nif_query &lt;- airports |&gt;\n  mutate(sea = ifelse(alt &gt; 500, \"above sea\", \"near sea\"))\n\nshow_query(if_query)\n\n&lt;SQL&gt;\nSELECT\n  *,\n  CASE WHEN (`alt` &gt; 500.0) THEN 'above sea' WHEN NOT (`alt` &gt; 500.0) THEN 'near sea' END AS `sea`\nFROM `airports`"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-ifelse-2",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-ifelse-2",
    "title": "SQL Extras",
    "section": "CASE WHEN and ifelse()",
    "text": "CASE WHEN and ifelse()\n\nSELECT *,\nCASE WHEN (`alt` &gt; 500.0) THEN 'above sea' WHEN NOT (`alt` &gt; 500.0) THEN 'near sea' END AS `sea`\nFROM `airports` \nLIMIT 5;\n\n\n\n\n5 records\n\n\n\n\nfaa\n\n\nname\n\n\nlat\n\n\nlon\n\n\nalt\n\n\ntz\n\n\ndst\n\n\ncity\n\n\ncountry\n\n\nsea\n\n\n\n\n\n\n04G\n\n\nLansdowne Airport\n\n\n41.1\n\n\n-80.6\n\n\n1044\n\n\n-5\n\n\nA\n\n\nYoungstown\n\n\nUnited States\n\n\nabove sea\n\n\n\n\n06A\n\n\nMoton Field Municipal Airport\n\n\n32.5\n\n\n-85.7\n\n\n264\n\n\n-6\n\n\nA\n\n\nTuskegee\n\n\nUnited States\n\n\nnear sea\n\n\n\n\n06C\n\n\nSchaumburg Regional\n\n\n42.0\n\n\n-88.1\n\n\n801\n\n\n-6\n\n\nA\n\n\nSchaumburg\n\n\nUnited States\n\n\nabove sea\n\n\n\n\n06N\n\n\nRandall Airport\n\n\n41.4\n\n\n-74.4\n\n\n523\n\n\n-5\n\n\nA\n\n\nMiddletown\n\n\nUnited States\n\n\nabove sea\n\n\n\n\n09J\n\n\nJekyll Island Airport\n\n\n31.1\n\n\n-81.4\n\n\n11\n\n\n-5\n\n\nA\n\n\nJekyll Island\n\n\nUnited States\n\n\nnear sea"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#other-functions",
    "href": "slides/2024-01-18-db-etc.html#other-functions",
    "title": "SQL Extras",
    "section": "Other functions",
    "text": "Other functions\ndistinct() / head()"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-case_when",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-case_when",
    "title": "SQL Extras",
    "section": "CASE WHEN and case_when()",
    "text": "CASE WHEN and case_when()\n\nairports |&gt;\n  mutate(sea = case_when(\n    alt &lt; 500 ~ \"near sea\",\n    alt &lt; 2000 ~ \"low alt\",\n    alt &lt; 3000 ~ \"mod alt\",\n    alt &lt; 5500 ~ \"high alt\",\n    alt &gt; 5500 ~ \"extreme alt\")) |&gt;\n  head(5)\n\n# Source:   SQL [5 x 10]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  faa   name                     lat   lon   alt    tz dst   city  country sea  \n  &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;\n1 04G   Lansdowne Airport       41.1 -80.6  1044    -5 A     Youn… United… low …\n2 06A   Moton Field Municipal…  32.5 -85.7   264    -6 A     Tusk… United… near…\n3 06C   Schaumburg Regional     42.0 -88.1   801    -6 A     Scha… United… low …\n4 06N   Randall Airport         41.4 -74.4   523    -5 A     Midd… United… low …\n5 09J   Jekyll Island Airport   31.1 -81.4    11    -5 A     Jeky… United… near…"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-case_when-1",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-case_when-1",
    "title": "SQL Extras",
    "section": "CASE WHEN and case_when()",
    "text": "CASE WHEN and case_when()\n\ncw_query &lt;- airports |&gt;\n  mutate(sea = case_when(\n    alt &lt; 500 ~ \"near sea\",\n    alt &lt; 2000 ~ \"low alt\",\n    alt &lt; 3000 ~ \"mod alt\",\n    alt &lt; 5500 ~ \"high alt\",\n    alt &gt; 5500 ~ \"extreme alt\"))\n\nshow_query(cw_query)\n\n&lt;SQL&gt;\nSELECT\n  *,\n  CASE\nWHEN (`alt` &lt; 500.0) THEN 'near sea'\nWHEN (`alt` &lt; 2000.0) THEN 'low alt'\nWHEN (`alt` &lt; 3000.0) THEN 'mod alt'\nWHEN (`alt` &lt; 5500.0) THEN 'high alt'\nWHEN (`alt` &gt; 5500.0) THEN 'extreme alt'\nEND AS `sea`\nFROM `airports`"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-case_when-2",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-case_when-2",
    "title": "SQL Extras",
    "section": "CASE WHEN and case_when()",
    "text": "CASE WHEN and case_when()\n\nSELECT\n  *,\n  CASE\nWHEN (`alt` &lt; 500.0) THEN 'near sea'\nWHEN (`alt` &lt; 2000.0) THEN 'low alt'\nWHEN (`alt` &lt; 3000.0) THEN 'mod alt'\nWHEN (`alt` &lt; 5500.0) THEN 'high alt'\nWHEN (`alt` &gt; 5500.0) THEN 'extreme alt'\nEND AS `sea`\nFROM `airports`\nLIMIT 5;\n\n\n\n\n5 records\n\n\n\n\nfaa\n\n\nname\n\n\nlat\n\n\nlon\n\n\nalt\n\n\ntz\n\n\ndst\n\n\ncity\n\n\ncountry\n\n\nsea\n\n\n\n\n\n\n04G\n\n\nLansdowne Airport\n\n\n41.1\n\n\n-80.6\n\n\n1044\n\n\n-5\n\n\nA\n\n\nYoungstown\n\n\nUnited States\n\n\nlow alt\n\n\n\n\n06A\n\n\nMoton Field Municipal Airport\n\n\n32.5\n\n\n-85.7\n\n\n264\n\n\n-6\n\n\nA\n\n\nTuskegee\n\n\nUnited States\n\n\nnear sea\n\n\n\n\n06C\n\n\nSchaumburg Regional\n\n\n42.0\n\n\n-88.1\n\n\n801\n\n\n-6\n\n\nA\n\n\nSchaumburg\n\n\nUnited States\n\n\nlow alt\n\n\n\n\n06N\n\n\nRandall Airport\n\n\n41.4\n\n\n-74.4\n\n\n523\n\n\n-5\n\n\nA\n\n\nMiddletown\n\n\nUnited States\n\n\nlow alt\n\n\n\n\n09J\n\n\nJekyll Island Airport\n\n\n31.1\n\n\n-81.4\n\n\n11\n\n\n-5\n\n\nA\n\n\nJekyll Island\n\n\nUnited States\n\n\nnear sea"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-cut",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-cut",
    "title": "SQL Extras",
    "section": "CASE WHEN and cut()",
    "text": "CASE WHEN and cut()\n\nairports |&gt;\n  mutate(sea = cut(\n    alt,\n    breaks = c(-Inf, 500, 2000, 3000, 5500, Inf),\n    labels = c(\"near sea\", \"low alt\", \"mod alt\", \"high alt\", \"extreme alt\")\n  )\n)|&gt;\n  head(5)\n\n# Source:   SQL [5 x 10]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  faa   name                     lat   lon   alt    tz dst   city  country sea  \n  &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;\n1 04G   Lansdowne Airport       41.1 -80.6  1044    -5 A     Youn… United… low …\n2 06A   Moton Field Municipal…  32.5 -85.7   264    -6 A     Tusk… United… near…\n3 06C   Schaumburg Regional     42.0 -88.1   801    -6 A     Scha… United… low …\n4 06N   Randall Airport         41.4 -74.4   523    -5 A     Midd… United… low …\n5 09J   Jekyll Island Airport   31.1 -81.4    11    -5 A     Jeky… United… near…"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-case_when-3",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-case_when-3",
    "title": "SQL Extras",
    "section": "CASE WHEN and case_when()",
    "text": "CASE WHEN and case_when()\n\ncw_query &lt;- airports |&gt;\n  mutate(sea = cut(\n    alt,\n    breaks = c(-Inf, 500, 2000, 3000, 5500, Inf),\n    labels = c(\"near sea\", \"low alt\", \"mod alt\", \"high alt\", \"extreme alt\")\n  )\n)\n\nshow_query(cw_query)\n\n&lt;SQL&gt;\nSELECT\n  *,\n  CASE\nWHEN (`alt` &lt;= 500.0) THEN 'near sea'\nWHEN (`alt` &lt;= 2000.0) THEN 'low alt'\nWHEN (`alt` &lt;= 3000.0) THEN 'mod alt'\nWHEN (`alt` &lt;= 5500.0) THEN 'high alt'\nWHEN (`alt` &gt; 5500.0) THEN 'extreme alt'\nEND AS `sea`\nFROM `airports`"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-case_when-4",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-case_when-4",
    "title": "SQL Extras",
    "section": "CASE WHEN and case_when()",
    "text": "CASE WHEN and case_when()\n\nSELECT\n  *,\n  CASE\nWHEN (`alt` &lt;= 500.0) THEN 'near sea'\nWHEN (`alt` &lt;= 2000.0) THEN 'low alt'\nWHEN (`alt` &lt;= 3000.0) THEN 'mod alt'\nWHEN (`alt` &lt;= 5500.0) THEN 'high alt'\nWHEN (`alt` &gt; 5500.0) THEN 'extreme alt'\nEND AS `sea`\nFROM `airports`\nLIMIT 5;\n\n\n\n\n5 records\n\n\n\n\nfaa\n\n\nname\n\n\nlat\n\n\nlon\n\n\nalt\n\n\ntz\n\n\ndst\n\n\ncity\n\n\ncountry\n\n\nsea\n\n\n\n\n\n\n04G\n\n\nLansdowne Airport\n\n\n41.1\n\n\n-80.6\n\n\n1044\n\n\n-5\n\n\nA\n\n\nYoungstown\n\n\nUnited States\n\n\nlow alt\n\n\n\n\n06A\n\n\nMoton Field Municipal Airport\n\n\n32.5\n\n\n-85.7\n\n\n264\n\n\n-6\n\n\nA\n\n\nTuskegee\n\n\nUnited States\n\n\nnear sea\n\n\n\n\n06C\n\n\nSchaumburg Regional\n\n\n42.0\n\n\n-88.1\n\n\n801\n\n\n-6\n\n\nA\n\n\nSchaumburg\n\n\nUnited States\n\n\nlow alt\n\n\n\n\n06N\n\n\nRandall Airport\n\n\n41.4\n\n\n-74.4\n\n\n523\n\n\n-5\n\n\nA\n\n\nMiddletown\n\n\nUnited States\n\n\nlow alt\n\n\n\n\n09J\n\n\nJekyll Island Airport\n\n\n31.1\n\n\n-81.4\n\n\n11\n\n\n-5\n\n\nA\n\n\nJekyll Island\n\n\nUnited States\n\n\nnear sea"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#distinct",
    "href": "slides/2024-01-18-db-etc.html#distinct",
    "title": "SQL Extras",
    "section": "distinct()",
    "text": "distinct()\nHow many distinct time zones are there in the airports table?\n\nairports |&gt;\n  select(tz) |&gt;\n  distinct()\n\n# Source:   SQL [?? x 1]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n     tz\n  &lt;int&gt;\n1    -5\n2    -6\n3    -8\n4    -7\n5    -9\n6   -10\n# ℹ more rows"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#distinct-1",
    "href": "slides/2024-01-18-db-etc.html#distinct-1",
    "title": "SQL Extras",
    "section": "distinct()",
    "text": "distinct()\nHow many distinct time zones are there in the airports table?\n\ndist_query &lt;- airports |&gt;\n  select(tz) |&gt;\n  distinct()\n\nshow_query(dist_query)\n\n&lt;SQL&gt;\nSELECT DISTINCT `tz`\nFROM `airports`"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#distinct-2",
    "href": "slides/2024-01-18-db-etc.html#distinct-2",
    "title": "SQL Extras",
    "section": "distinct()",
    "text": "distinct()\nHow many distinct time zones are there in the airports table?\n\nSELECT DISTINCT `tz`\nFROM `airports`;\n\n\n\n\n7 records\n\n\n\n\ntz\n\n\n\n\n\n\n-5\n\n\n\n\n-6\n\n\n\n\n-8\n\n\n\n\n-7\n\n\n\n\n-9\n\n\n\n\n-10\n\n\n\n\n8"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#limit-as-head",
    "href": "slides/2024-01-18-db-etc.html#limit-as-head",
    "title": "SQL Extras",
    "section": "LIMIT as head()",
    "text": "LIMIT as head()\n\nairports |&gt;\n  head(5)\n\n# Source:   SQL [5 x 9]\n# Database: mysql  [mdsr_public@mdsr.cdc7tgkkqd0n.us-east-1.rds.amazonaws.com:NA/airlines]\n  faa   name                           lat   lon   alt    tz dst   city  country\n  &lt;chr&gt; &lt;chr&gt;                        &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  \n1 04G   Lansdowne Airport             41.1 -80.6  1044    -5 A     Youn… United…\n2 06A   Moton Field Municipal Airpo…  32.5 -85.7   264    -6 A     Tusk… United…\n3 06C   Schaumburg Regional           42.0 -88.1   801    -6 A     Scha… United…\n4 06N   Randall Airport               41.4 -74.4   523    -5 A     Midd… United…\n5 09J   Jekyll Island Airport         31.1 -81.4    11    -5 A     Jeky… United…"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#limit-as-head-1",
    "href": "slides/2024-01-18-db-etc.html#limit-as-head-1",
    "title": "SQL Extras",
    "section": "LIMIT as head()",
    "text": "LIMIT as head()\n\nhead_query &lt;- airports |&gt;\n  head(5)\n\nshow_query(head_query)\n\n&lt;SQL&gt;\nSELECT *\nFROM `airports`\nLIMIT 5"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#limit-as-head-2",
    "href": "slides/2024-01-18-db-etc.html#limit-as-head-2",
    "title": "SQL Extras",
    "section": "LIMIT as head()",
    "text": "LIMIT as head()\n\nSELECT *\nFROM `airports`\nLIMIT 5;\n\n\n\n\n5 records\n\n\n\n\nfaa\n\n\nname\n\n\nlat\n\n\nlon\n\n\nalt\n\n\ntz\n\n\ndst\n\n\ncity\n\n\ncountry\n\n\n\n\n\n\n04G\n\n\nLansdowne Airport\n\n\n41.1\n\n\n-80.6\n\n\n1044\n\n\n-5\n\n\nA\n\n\nYoungstown\n\n\nUnited States\n\n\n\n\n06A\n\n\nMoton Field Municipal Airport\n\n\n32.5\n\n\n-85.7\n\n\n264\n\n\n-6\n\n\nA\n\n\nTuskegee\n\n\nUnited States\n\n\n\n\n06C\n\n\nSchaumburg Regional\n\n\n42.0\n\n\n-88.1\n\n\n801\n\n\n-6\n\n\nA\n\n\nSchaumburg\n\n\nUnited States\n\n\n\n\n06N\n\n\nRandall Airport\n\n\n41.4\n\n\n-74.4\n\n\n523\n\n\n-5\n\n\nA\n\n\nMiddletown\n\n\nUnited States\n\n\n\n\n09J\n\n\nJekyll Island Airport\n\n\n31.1\n\n\n-81.4\n\n\n11\n\n\n-5\n\n\nA\n\n\nJekyll Island\n\n\nUnited States"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#ggplot",
    "href": "slides/2024-01-18-db-etc.html#ggplot",
    "title": "SQL Extras",
    "section": "ggplot()",
    "text": "ggplot()\n\nairports |&gt;\n  ggplot(aes(x = lon, y = lat)) +\n  geom_point()"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#ggplot-1",
    "href": "slides/2024-01-18-db-etc.html#ggplot-1",
    "title": "SQL Extras",
    "section": "ggplot()",
    "text": "ggplot()\n\nairports |&gt;\n  filter(lon &lt; 0) |&gt;\n  ggplot(aes(x = lon, y = lat)) +\n  geom_point()"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#ggplot-2",
    "href": "slides/2024-01-18-db-etc.html#ggplot-2",
    "title": "SQL Extras",
    "section": "ggplot()",
    "text": "ggplot()\n\ngg_query &lt;- airports |&gt;\n  filter(lon &lt; 0) |&gt;\n  ggplot(aes(x = lon, y = lat)) +\n  geom_point()\n\nshow_query(gg_query)\n\nError in UseMethod(\"show_query\"): no applicable method for 'show_query' applied to an object of class \"c('gg', 'ggplot')\""
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-cut-1",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-cut-1",
    "title": "SQL Extras",
    "section": "CASE WHEN and cut()",
    "text": "CASE WHEN and cut()\n\ncw_query &lt;- airports |&gt;\n  mutate(sea = cut(\n    alt,\n    breaks = c(-Inf, 500, 2000, 3000, 5500, Inf),\n    labels = c(\"near sea\", \"low alt\", \"mod alt\", \"high alt\", \"extreme alt\")\n  )\n)\n\nshow_query(cw_query)\n\n&lt;SQL&gt;\nSELECT\n  *,\n  CASE\nWHEN (`alt` &lt;= 500.0) THEN 'near sea'\nWHEN (`alt` &lt;= 2000.0) THEN 'low alt'\nWHEN (`alt` &lt;= 3000.0) THEN 'mod alt'\nWHEN (`alt` &lt;= 5500.0) THEN 'high alt'\nWHEN (`alt` &gt; 5500.0) THEN 'extreme alt'\nEND AS `sea`\nFROM `airports`"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#case-when-and-cut-2",
    "href": "slides/2024-01-18-db-etc.html#case-when-and-cut-2",
    "title": "SQL Extras",
    "section": "CASE WHEN and cut()",
    "text": "CASE WHEN and cut()\n\nSELECT\n  *,\n  CASE\nWHEN (`alt` &lt;= 500.0) THEN 'near sea'\nWHEN (`alt` &lt;= 2000.0) THEN 'low alt'\nWHEN (`alt` &lt;= 3000.0) THEN 'mod alt'\nWHEN (`alt` &lt;= 5500.0) THEN 'high alt'\nWHEN (`alt` &gt; 5500.0) THEN 'extreme alt'\nEND AS `sea`\nFROM `airports`\nLIMIT 5;\n\n\n\n\n5 records\n\n\n\n\nfaa\n\n\nname\n\n\nlat\n\n\nlon\n\n\nalt\n\n\ntz\n\n\ndst\n\n\ncity\n\n\ncountry\n\n\nsea\n\n\n\n\n\n\n04G\n\n\nLansdowne Airport\n\n\n41.1\n\n\n-80.6\n\n\n1044\n\n\n-5\n\n\nA\n\n\nYoungstown\n\n\nUnited States\n\n\nlow alt\n\n\n\n\n06A\n\n\nMoton Field Municipal Airport\n\n\n32.5\n\n\n-85.7\n\n\n264\n\n\n-6\n\n\nA\n\n\nTuskegee\n\n\nUnited States\n\n\nnear sea\n\n\n\n\n06C\n\n\nSchaumburg Regional\n\n\n42.0\n\n\n-88.1\n\n\n801\n\n\n-6\n\n\nA\n\n\nSchaumburg\n\n\nUnited States\n\n\nlow alt\n\n\n\n\n06N\n\n\nRandall Airport\n\n\n41.4\n\n\n-74.4\n\n\n523\n\n\n-5\n\n\nA\n\n\nMiddletown\n\n\nUnited States\n\n\nlow alt\n\n\n\n\n09J\n\n\nJekyll Island Airport\n\n\n31.1\n\n\n-81.4\n\n\n11\n\n\n-5\n\n\nA\n\n\nJekyll Island\n\n\nUnited States\n\n\nnear sea"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#cardinality-x-rows",
    "href": "slides/2024-01-18-db-etc.html#cardinality-x-rows",
    "title": "SQL Extras",
    "section": "Cardinality x rows",
    "text": "Cardinality x rows\nThe Cardinality from SHOW INDEXES times the rows from EXPLAIN is roughly the total number of rows in the dataframe."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#median-8",
    "href": "slides/2024-01-18-db-etc.html#median-8",
    "title": "SQL Extras",
    "section": "Median",
    "text": "Median\nTake-aways:\n\ndbplyr is not able to translate the median() function into SQL.\nThe median is actually really hard to calculate! In particular, it is hard to calculate the median in one pass through the data."
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#take-away-message",
    "href": "slides/2024-01-18-db-etc.html#take-away-message",
    "title": "SQL Extras",
    "section": "Take-away message",
    "text": "Take-away message\n\ndbplyr is awesome and can often be helpful in figuring out SQL syntax\nsometimes dbplyr will provide SQL syntax that does not work (see the median example)\nsometimes there is no SQL syntax to match the R task of interest (see ggplot)"
  },
  {
    "objectID": "slides/2024-01-18-db-etc.html#section",
    "href": "slides/2024-01-18-db-etc.html#section",
    "title": "SQL Extras",
    "section": "47",
    "text": "47\nPomona’s number is 47, and I wanted to have a 47th slide.\n\n\nFigure 1: image credit: Jo Hardin"
  },
  {
    "objectID": "syllabus.html#ds002r-fall-2024",
    "href": "syllabus.html#ds002r-fall-2024",
    "title": "syllabus",
    "section": "",
    "text": "Jo Hardin 2351 Estella jo.hardin@pomona.edu\nOffice Hours: Mon 3:30-4:30pm, Tues 10-11am & 2:30-3:30pm, Thurs 10am-noon\nMentor Sessions:\nMon 8-10pm, Tues 8-10pm\nEstella 2099\nMentors: Federica Domecq Lacroze and Z Skigen\n\n\n\n\n\nArtwork by @allison_horst."
  },
  {
    "objectID": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "href": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "Creative Commons Attribution-ShareAlike 4.0 International Public License",
    "text": "Creative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part; and\nB. produce, reproduce, and Share Adapted Material.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. __Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.t stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org\n\n\n:::"
  },
  {
    "objectID": "project2.html",
    "href": "project2.html",
    "title": "Project 2",
    "section": "",
    "text": "more soon.\n\n:::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "project3.html",
    "href": "project3.html",
    "title": "Project 3",
    "section": "",
    "text": "more soon.\n\n:::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "project5.html",
    "href": "project5.html",
    "title": "Project 5",
    "section": "",
    "text": "more soon.\n\n:::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "images/ma154-hwtest.html",
    "href": "images/ma154-hwtest.html",
    "title": "Math 154 - Test HW",
    "section": "",
    "text": ":::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "project4.html",
    "href": "project4.html",
    "title": "Project 4",
    "section": "",
    "text": "more soon.\n\n:::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "project1.html",
    "href": "project1.html",
    "title": "Mini-Project 1",
    "section": "",
    "text": "Overview\nPart of being a successful data scientist is communicating your work and demonstrating that you know how to communicate your work. To that end, you will each be creating your own website with some of the course projects (see caveat below!).\nYou will produce a personal website using Quarto that contains, at a minimum, a Home/About page with a picture or image (doesn’t have to be of you, could be some kind of art, etc., but make sure you have permission to post whatever you include), some basic information about you, and a link to the GitHub repo that contains the R code for your website.\nThen, in the Menu bar, you should have a selection called “Data Viz” with two sub-selections, each being a TidyTuesday analysis.\n\n\nWebsite\nTo make the website follow the instructions at Creating your personal website using Quarto by Sam Csik.\n\n\nTidyTuesday\nFor each analysis, find a TidyTuesday dataset and create a plot (start with a qmd file and create an html file). Your YAML might look something like this (note that the format here is html, unlike the pdf that we use for the homework).\n---\ntitle: \"Super Mario Kart\"\ndescription: |\n  Analysis of Super Mario Kart data from TidyTuesday\nauthor: Jo Hardin\ndate: September 18, 2024\nformat: html\n---\nThe TidyTuesday analysis can be quite minimal. One scatterplot per analysis is fine, and you don’t need to annotate or make it beautiful (of course, you might want to make it beautiful…). It is your choice whether or not to show the code. (Do you think it is better to show the code or hide the code? No right answer.) Please include the source of the data (which might be the TidyTuesday page + the original source of the information).\nInside your _quarto.yml file (see https://ucsb-meds.github.io/creating-quarto-websites/#modify-website-appearance-in-_quarto.yml), you might have something like the following:\nwebsite:\n  title: \"My phenomenal first website!\"\n  navbar:\n    right: \n      - text: \"About Me\"\n        href: about.qmd\n      - text: \"Data Viz\"\n        menu: \n         - text: \"Mario Kart\"\n           href: mariokart.html\n         - text: \"Campus Pride Index\"\n           href: pride.html\n\n\nCaveat to personal website / FERPA\nThe assignment as written asks you to submit a public facing website. Generally, students like the idea of making such a website because future employers will be impressed by your work. However, I am sensitive to the fact that you may have reasons to not want to have a public facing website. If this is you (for any reason, you don’t need to explain yourself), there are two alternative options for the mini-project assignment:\n\nWhile creating the website, make-up everything (including a new GitHub repository, created using a different email address) and don’t include anything personal or anything that would link to you.\nComplete the assignment using a private repository. None of the information will be publicly available (that is, your URL won’t be accessible to the public). You must, however, give me access to the repository (invite me as a collaborator), and then I can pull your repo, render it locally, and give you credit for the assignment by compiling the entire website locally on my computer.\n\n\n\nTimeline\nMini-Project 1 must be submitted on Canvas (not Gradescope) by 11:59 PM on Wednesday Septemper 19. All you need to submit is a URL for your website (or private GitHub repo if you take that route)!\n\n:::\n\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "R-tip.html",
    "href": "R-tip.html",
    "title": "R tip-of-the-day",
    "section": "",
    "text": "Artwork by @allison_horst.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnumber\ntip\ndescription\nmisc\n\n\n\n\nTip 1\ncmd + opt + i\ncreates a new R chunk\ncntrl + alt + i  for PC\n\n\n\n\n\n\n\n\n\n:::\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "syllabus.html#links-to-resources",
    "href": "syllabus.html#links-to-resources",
    "title": "syllabus",
    "section": "",
    "text": "Best and most comprehensive Git help: http://happygitwithr.com/\nVersion control with Git\nMore on Git\nOnline Git book with lots of info\n\n\n\n\n\n\n\n\nA fantastic ggplot2 tutorial\nGreat tutorials through the Coding Club\nGoogle for R\nIncredibly helpful cheatsheets from RStudio.\n\ndata wrangling\nggplot2\nShiny\nQuarto\nRStudio IDE\n\n\n\n\n\n\n\n\nW3 schools Introduction to SQL\nW3 schools SQL Exercises, Practice, Solution\nR packages for working with databases\nIntroduction to dbplyr\n\n\n\n\n\n\n\nstringr vignette\nstringr package\nJenny Bryan et al.’s STAT 545 notes\nregexpal\n\nRegExr\nRegexOne\n\n\n\n\nHomework assignments will be graded out of 5 points, which are based on a combination of accuracy and effort. Below are rough guidelines for grading.\n[5] All problems completed with detailed solutions provided and 75% or more of the problems are fully correct. Additionally, there are no extraneous messages, warnings, or printed lists of numbers.\n[4] All problems completed with detailed solutions and 50-75% correct; OR close to all problems completed and 75%-100% correct. Or all problems are completed and there are extraneous messages, warnings, or printed lists of numbers.\n[3] Close to all problems completed with less than 75% correct.\n[2] More than half but fewer than all problems completed and &gt; 75% correct.\n[1] More than half but fewer than all problems completed and &lt; 75% correct; OR less than half of problems completed.\n[0] No work submitted, OR half or less than half of the problems submitted and without any detail/work shown to explain the solutions. You will get a zero if your file is not compiled and submitted on GitHub."
  },
  {
    "objectID": "syllabus.html#projects",
    "href": "syllabus.html#projects",
    "title": "syllabus",
    "section": "",
    "text": "There will be 5 mini-projects (due roughly every other week). You will also compile the projects, reflect on the process, and present your work to your classrmates. Project information is available here: DS 002R Projects"
  },
  {
    "objectID": "syllabus.html#computing",
    "href": "syllabus.html#computing",
    "title": "syllabus",
    "section": "",
    "text": "GitHub will be used as a way to practice reproducible and collaborative science. There may be a slight learning curve, but knowing Git will be an extremely useful skill as you venture beyond this class.\nR will be used for all homework assignments. R is freely available at http://www.r-project.org/ and is already installed on college computers. Additionally, you need to install R Studio in order to use Quarto, https://posit.co/downloads/. If you are not already familiar with R, please work through some of the materials provided ASAP.\nYou are welcome to use Pomona’s R Studio server at https://rstudio.campus.pomona.edu/ (or https://rstudio.pomona.edu if you are off campus). If you use the server, you can connect directly to your Git account without installing Git locally on your own computer. [If you are not a Pomona student, you will need to get an account from Pomona’s ITS. Go to ITS, tell them that you are taking a Pomona course, and ask for an account for using RStudio.]"
  },
  {
    "objectID": "syllabus.html#engagement",
    "href": "syllabus.html#engagement",
    "title": "syllabus",
    "section": "",
    "text": "This class will be interactive, and your engagement is expected (every day in class). Although notes will be posted, your engagement is an integral part of the in-class learning process.\nIn class: after answering one question, wait until 5 other people have spoken before answering another question. [Feel free to ask as many questions as often as you like!]"
  },
  {
    "objectID": "syllabus.html#academic-honesty",
    "href": "syllabus.html#academic-honesty",
    "title": "syllabus",
    "section": "",
    "text": "You are on your honor to present only your work as part of your course assessments. Below, I’ve provided Pomona’s academic honesty policy. But before the policy, I’ve given some thoughts on cheating which I have taken from Nick Ball’s CHEM 147 Collective (thank you, Prof Ball!). Prof Ball gives us all something to think about when we are learning in a classroom as well as on our journey to become scientists and professionals:\nThere are many known reasons why we may feel the need to “cheat” on problem sets or exams:\n\n\nAn academic environment that values grades above learning.\nFinancial aid is critical for remaining in school that places undue pressure on maintaining a high GPA.\nNavigating school, work, and/or family obligations that have diverted focus from class.\nChallenges balancing coursework and mental health.\nBalancing academic, family, peer, or personal issues.\n\n\nBeing accused of cheating – whether it has occurred or not – can be devastating for students. The college requires me to respond to potential academic dishonesty with a process that is very long and damaging. As your instructor, I care about you and want to offer alternatives to prevent us from having to go through this process. If you find yourself in a situation where “cheating” seems like the only option:\nPlease come talk to me. We will figure this out together.\nPomona College is an academic community, all of whose members are expected to abide by ethical standards both in their conduct and in their exercise of responsibilities toward other members of the community. The college expects students to understand and adhere to basic standards of honesty and academic integrity. These standards include, but are not limited to, the following:\n\n\nIn projects and assignments prepared independently, students never represent the ideas or the language of others as their own.\nStudents do not destroy or alter either the work of other students or the educational resources and materials of the College.\nStudents neither give nor receive assistance in examinations.\nStudents do not take unfair advantage of fellow students by representing work completed for one course as original work for another or by deliberately disregarding course rules and regulations.\nIn laboratory or research projects involving the collection of data, students accurately report data observed and do not alter these data for any reason."
  },
  {
    "objectID": "syllabus.html#advice",
    "href": "syllabus.html#advice",
    "title": "syllabus",
    "section": "",
    "text": "Please email and / or set up a time to talk if you have any questions about or difficulty with the material, the computing, or the course. Talk to me as soon as possible if you find yourself struggling. The material will build on itself, so it will be much easier to catch up if the concepts get clarified earlier rather than later. This semester is going to be fun. Let’s do it.\n\n\n\n\n\n\nGrading\n\n\n\n\n30% Homework\n30% Quizzes\n30% Projects & Final Presentation\n10% Class engagement\n\n\n\n\n:::"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#course-structure",
    "href": "slides/2024-08-26-intro.html#course-structure",
    "title": "Introduction to DS002R",
    "section": "Course structure",
    "text": "Course structure\n\nbi-weekly HW (to GitHub + Gradescope)\nbi-weekly quizzes\nmini-projects\nin-class activities / clickers\nethical considerations"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#additional-details",
    "href": "slides/2024-08-26-intro.html#additional-details",
    "title": "Introduction to DS002R",
    "section": "Additional details",
    "text": "Additional details\n\nCanvas has all the links\n\ncourse website – almost everything\nclass notes\nCanvas page – solutions and assignments\n\nno computers (tablets fine)\ngood communication\nTidyTuesday"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#syllabus",
    "href": "slides/2024-08-26-intro.html#syllabus",
    "title": "Introduction to DS002R",
    "section": "Syllabus",
    "text": "Syllabus\n\n\n\noffice hours\nmentor sessions\nanonymous feedback\ndates for assignments\n\n\n\nlinks to resources\nHW grading\nproject information\n\n\n\n\n\n\n\n\n\nImportant\n\n\nI need your GitHub user name - please email it to me."
  },
  {
    "objectID": "slides/2024-08-26-intro.html#v1.0---drew-conway",
    "href": "slides/2024-08-26-intro.html#v1.0---drew-conway",
    "title": "Introduction to DS002R",
    "section": "V1.0 - Drew Conway",
    "text": "V1.0 - Drew Conway\n\n2010: http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#v2.0---steve-geringer",
    "href": "slides/2024-08-26-intro.html#v2.0---steve-geringer",
    "title": "Introduction to DS002R",
    "section": "V2.0 - Steve Geringer",
    "text": "V2.0 - Steve Geringer\n\n2014: http://www.anlytcs.com/2014/01/data-science-venn-diagram-v20.html"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#v3.0---writuparna-banerjee",
    "href": "slides/2024-08-26-intro.html#v3.0---writuparna-banerjee",
    "title": "Introduction to DS002R",
    "section": "V3.0 - Writuparna Banerjee",
    "text": "V3.0 - Writuparna Banerjee\n\n2020: https://medium.com/@writuparnabanerjee/the-difference-in-the-career-options-in-data-science-data-scientist-vs-data-engineer-vs-data-33209d0ac880"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#v4.0---joel-grus",
    "href": "slides/2024-08-26-intro.html#v4.0---joel-grus",
    "title": "Introduction to DS002R",
    "section": "V4.0 - Joel Grus",
    "text": "V4.0 - Joel Grus\n\n2013: https://posit.co/wp-content/themes/Posit/public/markdown-blogs/role-of-the-data-scientist/index.html?wtime=%7Bseek_to_second_number%7D"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#data-science-overview",
    "href": "slides/2024-08-26-intro.html#data-science-overview",
    "title": "Introduction to DS002R",
    "section": "Data Science Overview",
    "text": "Data Science Overview\n\nBased on https://www.effectivedatastorytelling.com/post/a-deeper-dive-into-lego-bricks-and-data-stories, original source: https://www.linkedin.com/learning/instructors/bill-shander"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#data-science-in-ds-002r",
    "href": "slides/2024-08-26-intro.html#data-science-in-ds-002r",
    "title": "Introduction to DS002R",
    "section": "Data Science in DS 002R",
    "text": "Data Science in DS 002R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDS workflow\nin DS002R\nbeyond DS002R\n\n\n\n\ndata acquisition\nweb scraping, relational databases\nAPIs\n\n\ndata exploration\nwrangling, strings, regular expressions\nnatural language processing\n\n\ndata visualization\ngrammar of graphics\nanimations\n\n\ndata conclusions\niteration, permutation tests\npredictive modeling, machine learning, AI\n\n\ndata communication\nyes!\nyes!"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#tidy-data",
    "href": "slides/2024-08-26-intro.html#tidy-data",
    "title": "Introduction to DS002R",
    "section": "Tidy data",
    "text": "Tidy data\n\neach row = a unit of observation (here, a penguin)\neach column = a measure on some variable of interest, either quantitative (numbers with units) or categorical (discrete possibilities or categories)\neach entry contains a single data value; no analysis, summaries, footnotes, comments, etc, and only one value per cell"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#definition-of-datum",
    "href": "slides/2024-08-26-intro.html#definition-of-datum",
    "title": "Introduction to DS002R",
    "section": "Definition of datum",
    "text": "Definition of datum\nThe definition of datum can be much broader:\n\nDefinition of datum from the Oxford English Dictionary"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#tidying-data",
    "href": "slides/2024-08-26-intro.html#tidying-data",
    "title": "Introduction to DS002R",
    "section": "Tidying data",
    "text": "Tidying data\nHow would you wrangle each data example into a tidy format?\n\nthe emails in your inbox\n\nsocial media texts\n\nimages\n\nvideos\n\naudio files"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#data-science-in-the-wild",
    "href": "slides/2024-08-26-intro.html#data-science-in-the-wild",
    "title": "Introduction to DS002R",
    "section": "Data Science in the Wild",
    "text": "Data Science in the Wild\nData science extracts knowledge from within a particular domain of inquiry. Examples from Pomona!\n\nShannon Burns (Psychological Science and Neuroscience) uses data to understand brain processes of social communication.\nCharlotte Chang uses data to study and improve earth stewardship.\nAnthony (Tony) Clark (Computer Science) uses data to improve the safety and reliability of mobile robots.\nManisha Goel (Economics) uses data to understand how people’s identities shape the fortunes of businesses where they work.\nJun Lang (Asian Languages and Literatures) uses data to analyze (1) the intersection of language, gender, and society, and (2) second language acquisition and pedagogy.\nFrank Pericolosi (Physical Education) uses data to improve his team’s chances on the field.\nAmi Radunskaya (Mathematics) uses data to model tumor growth and treatment.\nYuqing Zhu (Neuroscience) uses data to figure out how a jumble of neurons becomes smart."
  },
  {
    "objectID": "slides/2024-08-26-intro.html#reproducibility",
    "href": "slides/2024-08-26-intro.html#reproducibility",
    "title": "Introduction to DS002R",
    "section": "Reproducibility",
    "text": "Reproducibility\nWhat does it mean for a data analysis to be “reproducible”?\nShort-term goals:\n\nAre the tables and figures reproducible from the code and data?\nDoes the code actually do what you think it does?\nIn addition to what was done, is it clear why it was done?\n\nLong-term goals:\n\nCan the code be used for other data?\nCan you extend the code to do other things?"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#the-reproducible-data-analysis-process",
    "href": "slides/2024-08-26-intro.html#the-reproducible-data-analysis-process",
    "title": "Introduction to DS002R",
    "section": "The reproducible data analysis process",
    "text": "The reproducible data analysis process\n\nScriptability \\(\\rightarrow\\) R\nLiterate programming (code, narrative, output in one place) \\(\\rightarrow\\) Quarto (via R Studio)\nVersion control \\(\\rightarrow\\) Git / GitHub"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#learning-goals",
    "href": "slides/2024-08-26-intro.html#learning-goals",
    "title": "Introduction to DS002R",
    "section": "Learning goals",
    "text": "Learning goals\nBy the end of the course, you will be able to…\n\n\ngain insight from data\ngain insight from data, reproducibly\ngain insight from data, reproducibly, using modern programming tools and techniques\ngain insight from data, reproducibly (with literate programming and version control), using modern programming tools and techniques"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#reproducibility-checklist",
    "href": "slides/2024-08-26-intro.html#reproducibility-checklist",
    "title": "Introduction to DS002R",
    "section": "Reproducibility checklist",
    "text": "Reproducibility checklist\n\nWhat does it mean for a data analysis to be “reproducible”?\n\nShort-term goals:\n\nAre the tables and figures reproducible from the code and data?\nDoes the code actually do what you think it does?\nIn addition to what was done, is it clear why it was done?\n\nLong-term goals:\n\nCan the code be used for other data?\nCan you extend the code to do other things?"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#toolkit-for-reproducibility",
    "href": "slides/2024-08-26-intro.html#toolkit-for-reproducibility",
    "title": "Introduction to DS002R",
    "section": "Toolkit for reproducibility",
    "text": "Toolkit for reproducibility\n\nScriptability \\(\\rightarrow\\) R\nLiterate programming (code, narrative, output in one place) \\(\\rightarrow\\) Quarto\nVersion control \\(\\rightarrow\\) Git / GitHub"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#r-and-rstudio-1",
    "href": "slides/2024-08-26-intro.html#r-and-rstudio-1",
    "title": "Introduction to DS002R",
    "section": "R and RStudio",
    "text": "R and RStudio\n\n\n\n\n\n\n\n\nR is an open-source statistical programming language\nR is also an environment for statistical computing and graphics\nIt’s easily extensible with packages\n\n\n\n\nRStudio is a convenient interface for R called an IDE (integrated development environment), e.g. “I write R code in the RStudio IDE”\nRStudio is not a requirement for programming with R, but it’s very commonly used by R programmers and data scientists"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#r-vs.-rstudio",
    "href": "slides/2024-08-26-intro.html#r-vs.-rstudio",
    "title": "Introduction to DS002R",
    "section": "R vs. RStudio",
    "text": "R vs. RStudio\n\n\n\n\n\n\n\nSource: Modern Dive."
  },
  {
    "objectID": "slides/2024-08-26-intro.html#r-packages",
    "href": "slides/2024-08-26-intro.html#r-packages",
    "title": "Introduction to DS002R",
    "section": "R packages",
    "text": "R packages\n\nPackages: Fundamental units of reproducible R code, including reusable R functions, the documentation that describes how to use them, and sample data1\nAs of August 26, 2024, there are 21,145 R packages available on CRAN (the Comprehensive R Archive Network)2\nWe’re going to work with a small (but important) subset of these!\n\n\n\n1 Wickham and Bryan, R Packages.\n2 CRAN contributed packages."
  },
  {
    "objectID": "slides/2024-08-26-intro.html#tour-r-rstudio",
    "href": "slides/2024-08-26-intro.html#tour-r-rstudio",
    "title": "Introduction to DS002R",
    "section": "Tour: R + RStudio",
    "text": "Tour: R + RStudio"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#tour-recap-r-rstudio",
    "href": "slides/2024-08-26-intro.html#tour-recap-r-rstudio",
    "title": "Introduction to DS002R",
    "section": "Tour recap: R + RStudio",
    "text": "Tour recap: R + RStudio"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#a-short-list-for-now-of-r-essentials",
    "href": "slides/2024-08-26-intro.html#a-short-list-for-now-of-r-essentials",
    "title": "Introduction to DS002R",
    "section": "A short list (for now) of R essentials",
    "text": "A short list (for now) of R essentials\n\nFunctions are (most often) verbs, followed by what they will be applied to in parentheses:\n\n\ndo_this(to_this)\ndo_that(to_this, to_that, with_those)\n\n\n\nPackages are installed with the install.packages() function and loaded with the library function, once per session:\n\n\ninstall.packages(\"package_name\")\nlibrary(package_name)"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#r-essentials-continued",
    "href": "slides/2024-08-26-intro.html#r-essentials-continued",
    "title": "Introduction to DS002R",
    "section": "R essentials (continued)",
    "text": "R essentials (continued)\n\nColumns (variables) in data frames are accessed with $:\n\n\ndataframe$var_name\n\n\n\nObject documentation can be accessed with ?\n\n\n?mean"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#tidyverse",
    "href": "slides/2024-08-26-intro.html#tidyverse",
    "title": "Introduction to DS002R",
    "section": "tidyverse",
    "text": "tidyverse\n\n\n\n\ntidyverse.org\n\nThe tidyverse is an opinionated collection of R packages designed for data science\nAll packages share an underlying philosophy and a common grammar"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#quarto-1",
    "href": "slides/2024-08-26-intro.html#quarto-1",
    "title": "Introduction to DS002R",
    "section": "Quarto",
    "text": "Quarto\n\nFully reproducible reports – each time you Render, the analysis is run from the beginning\nCode goes in chunks\nNarrative goes outside of chunks"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#tour-quarto",
    "href": "slides/2024-08-26-intro.html#tour-quarto",
    "title": "Introduction to DS002R",
    "section": "Tour: Quarto",
    "text": "Tour: Quarto"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#tour-recap-quarto",
    "href": "slides/2024-08-26-intro.html#tour-recap-quarto",
    "title": "Introduction to DS002R",
    "section": "Tour recap: Quarto",
    "text": "Tour recap: Quarto"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#environments",
    "href": "slides/2024-08-26-intro.html#environments",
    "title": "Introduction to DS002R",
    "section": "Environments",
    "text": "Environments\n\n\n\n\n\n\nImportant\n\n\nThe environment of your Quarto document is separate from the Console!\n\n\n\nRemember this, and expect it to bite you a few times as you’re learning to work with Quarto!"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#environments-1",
    "href": "slides/2024-08-26-intro.html#environments-1",
    "title": "Introduction to DS002R",
    "section": "Environments",
    "text": "Environments\n\n\nFirst, run the following in the console:\n\nx &lt;- 2\nx * 3\n\n\n\nAll looks good, eh?\n\n\nThen, add the following in an R chunk in your Quarto document\n\nx * 3\n\n\n\nWhat happens? Why the error?"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#how-will-we-use-quarto",
    "href": "slides/2024-08-26-intro.html#how-will-we-use-quarto",
    "title": "Introduction to DS002R",
    "section": "How will we use Quarto?",
    "text": "How will we use Quarto?\n\nEvery assignment is an Quarto document.\nYou’ll always have a template Quarto document to start with.\nThe amount of scaffolding in the template will decrease over the semester."
  },
  {
    "objectID": "slides/2024-08-26-intro.html#git-and-github",
    "href": "slides/2024-08-26-intro.html#git-and-github",
    "title": "Introduction to DS002R",
    "section": "Git and GitHub",
    "text": "Git and GitHub\n\n\n\n\n\n\n\n\nGit is a version control system – like “Track Changes” features from Microsoft Word, on steroids\nIt’s not the only version control system, but it’s a very popular one\n\n\n\n\n\n\n\n\nGitHub is the home for your Git-based projects on the internet – like DropBox but much, much better\nWe will use GitHub as a platform for web hosting and collaboration (and as our course management system!)"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#versioning---done-badly",
    "href": "slides/2024-08-26-intro.html#versioning---done-badly",
    "title": "Introduction to DS002R",
    "section": "Versioning - done badly",
    "text": "Versioning - done badly"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#versioning---done-better",
    "href": "slides/2024-08-26-intro.html#versioning---done-better",
    "title": "Introduction to DS002R",
    "section": "Versioning - done better",
    "text": "Versioning - done better"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#versioning---done-even-better",
    "href": "slides/2024-08-26-intro.html#versioning---done-even-better",
    "title": "Introduction to DS002R",
    "section": "Versioning - done even better",
    "text": "Versioning - done even better\nwith human readable messages"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#how-will-we-use-git-and-github",
    "href": "slides/2024-08-26-intro.html#how-will-we-use-git-and-github",
    "title": "Introduction to DS002R",
    "section": "How will we use Git and GitHub?",
    "text": "How will we use Git and GitHub?"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#how-will-we-use-git-and-github-1",
    "href": "slides/2024-08-26-intro.html#how-will-we-use-git-and-github-1",
    "title": "Introduction to DS002R",
    "section": "How will we use Git and GitHub?",
    "text": "How will we use Git and GitHub?"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#how-will-we-use-git-and-github-2",
    "href": "slides/2024-08-26-intro.html#how-will-we-use-git-and-github-2",
    "title": "Introduction to DS002R",
    "section": "How will we use Git and GitHub?",
    "text": "How will we use Git and GitHub?"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#how-will-we-use-git-and-github-3",
    "href": "slides/2024-08-26-intro.html#how-will-we-use-git-and-github-3",
    "title": "Introduction to DS002R",
    "section": "How will we use Git and GitHub?",
    "text": "How will we use Git and GitHub?"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#git-and-github-tips",
    "href": "slides/2024-08-26-intro.html#git-and-github-tips",
    "title": "Introduction to DS002R",
    "section": "Git and GitHub tips",
    "text": "Git and GitHub tips\n\n\nThere are millions of git commands – ok, that’s an exaggeration, but there are a lot of them – and very few people know them all. 99% of the time you will use git to add, commit, push, and pull.\nWe will be doing Git things and interfacing with GitHub through RStudio, but if you google for help you might come across methods for doing these things in the command line – skip that and move on to the next resource unless you feel comfortable trying it out.\nThere is a great resource for working with git and R: happygitwithr.com. Some of the content in there is beyond the scope of this course, but it’s a good place to look for help."
  },
  {
    "objectID": "slides/2024-08-26-intro.html#tour-git-github",
    "href": "slides/2024-08-26-intro.html#tour-git-github",
    "title": "Introduction to DS002R",
    "section": "Tour: Git + GitHub",
    "text": "Tour: Git + GitHub"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#examining-data-visualization",
    "href": "slides/2024-08-26-intro.html#examining-data-visualization",
    "title": "Introduction to DS002R",
    "section": "Examining data visualization",
    "text": "Examining data visualization\n\n\nDiscuss the following for the visualization.\n\n\n\n\n\nSource: Twitter"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#ae-02-bechdel-dataviz",
    "href": "slides/2024-08-26-intro.html#ae-02-bechdel-dataviz",
    "title": "Introduction to DS002R",
    "section": "ae-02-bechdel-dataviz",
    "text": "ae-02-bechdel-dataviz\n\n\nGo to the course GitHub org and find your ae repo (repo name will be suffixed with your GitHub name).\nClone the repo in your container, open the Quarto document in the repo, and follow along and complete the exercises.\nRender, commit, and push your edits by the AE deadline (end of this week)"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#recap-of-ae",
    "href": "slides/2024-08-26-intro.html#recap-of-ae",
    "title": "Introduction to DS002R",
    "section": "Recap of AE",
    "text": "Recap of AE\n\nConstruct plots with ggplot().\nLayers of ggplots are separated by +s.\nThe formula is (almost) always as follows:\n\n\nggplot(DATA, aes(x = X-VAR, y = Y-VAR, ...)) +\n  geom_XXX()\n\n\nAesthetic attributes of a geometries (color, size, transparency, etc.) can be mapped to variables in the data or set by the user, e.g. color = binary vs. color = \"pink\".\nUse facet_wrap() when faceting (creating small multiples) by one variable and facet_grid() when faceting by two variables."
  },
  {
    "objectID": "slides/2024-08-26-intro.html#activity",
    "href": "slides/2024-08-26-intro.html#activity",
    "title": "Introduction to DS002R",
    "section": "Activity",
    "text": "Activity\n\nWhat problem or task would you like to investigate using data?\nWhat would be hard about executing the project?\nWhat are the potential ethical frameworks to consider?\nHow would you define success?"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#data-science-process",
    "href": "slides/2024-08-26-intro.html#data-science-process",
    "title": "Introduction to DS002R",
    "section": "Data Science Process",
    "text": "Data Science Process"
  },
  {
    "objectID": "slides/2024-08-26-intro.html#data-science",
    "href": "slides/2024-08-26-intro.html#data-science",
    "title": "Introduction to DS002R",
    "section": "Data Science ",
    "text": "Data Science"
  },
  {
    "objectID": "slides/2024-09-09-wrangling1.html#tidy-data",
    "href": "slides/2024-09-09-wrangling1.html#tidy-data",
    "title": "Data Wrangling",
    "section": "",
    "text": "each row = a unit of observation (here, a penguin)\neach column = a measure on some variable of interest, either quantitative (numbers with units) or categorical (discrete possibilities or categories)\neach entry contains a single data value; no analysis, summaries, footnotes, comments, etc, and only one value per cell"
  },
  {
    "objectID": "slides/2024-09-09-wrangling1.html#definition-of-datum",
    "href": "slides/2024-09-09-wrangling1.html#definition-of-datum",
    "title": "Data Wrangling",
    "section": "",
    "text": "The definition of datum can be much broader:\n\n\n\n\n\nDefinition of datum from the Oxford English Dictionary"
  },
  {
    "objectID": "slides/2024-09-09-wrangling1.html#tidying-data",
    "href": "slides/2024-09-09-wrangling1.html#tidying-data",
    "title": "Data Wrangling",
    "section": "",
    "text": "How would you wrangle each data example into a tidy format?\n\nthe emails in your inbox\n\nsocial media texts\n\nimages\n\nvideos\n\naudio files\n\n\n:::"
  },
  {
    "objectID": "slides/2024-09-09-wrangling1.html",
    "href": "slides/2024-09-09-wrangling1.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "species\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\nAdelie\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n2007\n\n\nAdelie\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n2007\n\n\nAdelie\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n2007\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n\n\nAdelie\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n2007\n\n\nAdelie\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n2007\n\n\n\n\n\n\n\n\n\n\n\neach row = a unit of observation (here, a penguin)\neach column = a measure on some variable of interest, either quantitative (numbers with units) or categorical (discrete possibilities or categories)\neach entry contains a single data value; no analysis, summaries, footnotes, comments, etc, and only one value per cell\n\n\n\n\nThe definition of datum can be much broader:\n\n\n\n\n\nDefinition of datum from the Oxford English Dictionary\n\n\n\n\n\n\n\nHow would you wrangle each data example into a tidy format?\n\nthe emails in your inbox\n\nsocial media texts\n\nimages\n\nvideos\n\naudio files\n\n\n:::"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#nssd",
    "href": "slides/2024-08-28-daataviz.html#nssd",
    "title": "Better Data Visualizations",
    "section": "NSSD:",
    "text": "NSSD:\n\nWhat was Hilary trying to answer in her data collection?\nName two of Hilary’s main hurdles in gathering accurate data.\nWhich is better: high touch (manual) or low touch (automatic) data collection? Why?\nWhat additional covariates are needed / desired? Any problems with them?\nHow much data does she need?"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#grammar-of-graphics",
    "href": "slides/2024-08-28-daataviz.html#grammar-of-graphics",
    "title": "Better Data Visualizations",
    "section": "Grammar of graphics",
    "text": "Grammar of graphics\nYau (2013) gives us nine visual cues, and Wickham (2014) translates them into a language using ggplot2.\n\nVisual Cues: the aspects of the figure where we should focus.\nPosition (numerical) where in relation to other things?\nLength (numerical) how big (in one dimension)?\nAngle (numerical) how wide? parallel to something else?\nDirection (numerical) at what slope? In a time series, going up or down?\nShape (categorical) belonging to what group?\nArea (numerical) how big (in two dimensions)? Beware of improper scaling!\nVolume (numerical) how big (in three dimensions)? Beware of improper scaling!\nShade (either) to what extent? how severely?\nColor (either) to what extent? how severely? Beware of red/green color blindness.\nCoordinate System: rectangular, polar, geographic, etc.\nScale: numeric (linear? logarithmic?), categorical (ordered?), time\nContext: in comparison to what (think back to ideas from Tufte)"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#pieces-of-the-graph",
    "href": "slides/2024-08-28-daataviz.html#pieces-of-the-graph",
    "title": "Better Data Visualizations",
    "section": "Pieces of the Graph",
    "text": "Pieces of the Graph\n\n\nVisual Cues of Yau (2013):\nPosition (numerical)\nLength (numerical)\nAngle (numerical)\nDirection (numerical)\nShape (categorical)\nArea (numerical)\nVolume (numerical)\nShade (either)\nColor (either)"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#order-matters",
    "href": "slides/2024-08-28-daataviz.html#order-matters",
    "title": "Better Data Visualizations",
    "section": "Order Matters",
    "text": "Order Matters"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#cues-together",
    "href": "slides/2024-08-28-daataviz.html#cues-together",
    "title": "Better Data Visualizations",
    "section": "Cues Together",
    "text": "Cues Together"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#attributes",
    "href": "slides/2024-08-28-daataviz.html#attributes",
    "title": "Better Data Visualizations",
    "section": "Attributes",
    "text": "Attributes\nAttributes can focus your reader’s attention.1\n\nimage credit: Better Data Visualization by Schwabish"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#advice-for-plotting",
    "href": "slides/2024-08-28-daataviz.html#advice-for-plotting",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\n\n\n\nAvoid having other graph elements interfere with data\nUse visually prominent symbols\nAvoid over-plotting (One way to avoid over plotting: jitter the values)\nDifferent values of data may obscure each other\nInclude all or nearly all of the data\nFill data region"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#advice-for-plotting-1",
    "href": "slides/2024-08-28-daataviz.html#advice-for-plotting-1",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\n\n\n\nChart junk & stuff that adds no meaning, e.g. butterflies on top of barplots, background images\nExtra tick marks and grid lines\nUnnecessary text and arrows\nDecimal places beyond the measurement error or the level of difference"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#advice-for-plotting-2",
    "href": "slides/2024-08-28-daataviz.html#advice-for-plotting-2",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\n\n\n\nPut juxtaposed plots on same scale\nMake it easy to distinguish elements of superposed plots (e.g. color)\nEmphasizes the important difference\nComparison: volume, area, height (be careful, volume can seem bigger than you mean it to)"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#advice-for-plotting-3",
    "href": "slides/2024-08-28-daataviz.html#advice-for-plotting-3",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\nChoosing the scale\n\n\n\nKeep scales on x and y axes the same for both plots to facilitate the comparison\nZoom in to focus on the region that contains the bulk of the data\nKeep the scale the same throughout the plot (i.e. don’t change it mid-axis)\nOrigin need not be on the scale\nChoose a scale that improves resolution\nAvoid jiggling the baseline"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#advice-for-plotting-4",
    "href": "slides/2024-08-28-daataviz.html#advice-for-plotting-4",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\nChoosing the scale\nHow to make a plot information rich\n\n\n\nDescribe what you see in the caption\nAdd context with reference markers (lines and points) including text\nAdd legends and labels\nUse color and plotting symbols to add more information\nPlot the same thing more than once in different ways/scales\nReduce clutter"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#advice-for-plotting-5",
    "href": "slides/2024-08-28-daataviz.html#advice-for-plotting-5",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\nChoosing the scale\nHow to make a plot information rich\nCaptions should\n\n\n\nBe comprehensive\nSelf-contained\nDescribe what has been graphed\nDraw attention to important features\nDescribe conclusions drawn from graph"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#advice-for-plotting-6",
    "href": "slides/2024-08-28-daataviz.html#advice-for-plotting-6",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\nChoosing the scale\nHow to make a plot information rich\nCaptions should\nGood Plot Making Practice\n\n\n\nPut major conclusions in graphical form\nProvide reference information\nProof read for clarity and consistency\nGraphing is an iterative process\nMultiplicity is OK, i.e. two plots of the same variable may provide different messages\nMake plots data rich"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#getting-help",
    "href": "slides/2024-08-28-daataviz.html#getting-help",
    "title": "Better Data Visualizations",
    "section": "Getting help",
    "text": "Getting help\n\nOne of the best ways to get started with ggplot is to Google what you want to do with the word ggplot. Then look through the images that come up. More often than not, the associated code is there. There are also ggplot galleries of images, one of them is here: https://plot.ly/ggplot2/\nLook at the end of this presentation and the syllabus. More help options there."
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#what-are-the-visual-cues-on-this-plot",
    "href": "slides/2024-08-28-daataviz.html#what-are-the-visual-cues-on-this-plot",
    "title": "Better Data Visualizations",
    "section": "What are the visual cues on this plot?",
    "text": "What are the visual cues on this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nposition\nlength\nshape\narea/volume\nshade/color\n\nCoordinate System? Scale?"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#what-are-the-visual-cues-on-this-plot-1",
    "href": "slides/2024-08-28-daataviz.html#what-are-the-visual-cues-on-this-plot-1",
    "title": "Better Data Visualizations",
    "section": "What are the visual cues on this plot?",
    "text": "What are the visual cues on this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nposition\nlength\nshape\narea/volume\nshade/color\n\nCoordinate System? Scale?"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#what-are-the-visual-cues-on-this-plot-2",
    "href": "slides/2024-08-28-daataviz.html#what-are-the-visual-cues-on-this-plot-2",
    "title": "Better Data Visualizations",
    "section": "What are the visual cues on this plot?",
    "text": "What are the visual cues on this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nposition\nlength\nshape\narea/volume\nshade/color\n\nCoordinate System? Scale?"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#the-grammar-of-graphics-ggplot",
    "href": "slides/2024-08-28-daataviz.html#the-grammar-of-graphics-ggplot",
    "title": "Better Data Visualizations",
    "section": "The grammar of graphics ggplot",
    "text": "The grammar of graphics ggplot\ngeom: the geometric “shape” used to display data\n\nbar, point, line, ribbon, text, etc.\n\naesthetic: an attribute controlling how geom is displayed with respect to variables\n\nx position, y position, color, fill, shape, size, etc.\n\n\nguide: helps user convert visual data back into raw data (legends, axes)\nstat: a transformation applied to data before geom gets it\n\nexample: histograms work on binned data"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#set-up",
    "href": "slides/2024-08-28-daataviz.html#set-up",
    "title": "Better Data Visualizations",
    "section": "Set up",
    "text": "Set up\n\nlibrary(mosaic)\ndata(Births78)     # restore fresh version of Births78\nhead(Births78, 3)\n\n        date births wday year month day_of_year day_of_month day_of_week\n1 1978-01-01   7701  Sun 1978     1           1            1           1\n2 1978-01-02   7527  Mon 1978     1           2            2           2\n3 1978-01-03   8825  Tue 1978     1           3            3           3"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\nTwo Questions:\n\nWhat do we want R to do? (What is the goal?)\nWhat does R need to know?"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-1",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-1",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nGoal: scatterplot = a plot with points\nWhat does R need to know?\n\ndata source: Births78\naesthetics:\n\ndate -&gt; x\nbirths -&gt; y\npoints (!)"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-2",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-2",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78, \n       aes(x = date, y = births)) + \n  geom_point() +\n  ggtitle(\"US Births in 1978\")\n\nggplot() +\n  geom_point(data = Births78, \n             aes(x = date, y = births)) +\n  ggtitle(\"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-3",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-3",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\nWhat has changed?\n\nnew aesthetic: mapping color to day of week\n\nAdding day of week to the data set\nThe wday() function in the lubridate package computes the day of the week from a date."
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-4",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-4",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nBirths78 &lt;-  \n  Births78 |&gt; \n  mutate(day_of_week = \n           wday(date, \n                label=TRUE))\n\nggplot(data = Births78,\n       aes(x = date\n           y = births, \n           color = day_of_week)) +\n  geom_point() +\n  ggtitle(\"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-5",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-5",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-6",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-6",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\nlines instead of dots!\n\nggplot(data = Births78,\n         aes(x = date, \n             y = births,\n             color = day_of_week)) +\n  geom_line() +\n  ggtitle(\"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-7",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-7",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-8",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-8",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\nNow there are two layers: one with points and one with lines\n\nggplot(data = Births78,\n       aes(x = date,\n           y = births,\n           color = day_of_week)) + \n  geom_point() +  \n  geom_line()+\n  ggtitle(\"US Births in 1978\")\n\n\nThe layers are placed one on top of the other: the points are below and the lines are above.\ndata and aes specified in ggplot() affect all geoms"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#what-does-this-code-do",
    "href": "slides/2024-08-28-daataviz.html#what-does-this-code-do",
    "title": "Better Data Visualizations",
    "section": "What does this code do?",
    "text": "What does this code do?\n\nggplot(data = Births78,\n       aes(x = date, y = births, color = \"navy\")) + \n  geom_point() +\n  ggtitle(\"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#what-does-this-code-do-1",
    "href": "slides/2024-08-28-daataviz.html#what-does-this-code-do-1",
    "title": "Better Data Visualizations",
    "section": "What does this code do?",
    "text": "What does this code do?\n\nggplot(data = Births78,\n       aes(x = date, y = births, color = \"navy\")) + \n  geom_point()  +\n  ggtitle(\"US Births in 1978\")\n\n\nThis is mapping the color aesthetic to a new variable with only one value (“navy”).\nSo all the dots get set to the same color, but it’s not navy."
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#setting-vs.-mapping",
    "href": "slides/2024-08-28-daataviz.html#setting-vs.-mapping",
    "title": "Better Data Visualizations",
    "section": "Setting vs. Mapping",
    "text": "Setting vs. Mapping\nIf we want to set the color to be navy for all of the dots, we do it outside the aes() designation:\n\nggplot(data = Births78,\n       aes(x = date, y = births)) +   # map variables \n  geom_point(color = \"navy\")    +   # set attributes\n  ggtitle(\"US Births in 1978\")\n\n\n\nNote that color = \"navy\" is now outside of the aesthetics list. That’s how ggplot2 distinguishes between mapping and setting."
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-9",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-9",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-10",
    "href": "slides/2024-08-28-daataviz.html#how-do-we-make-this-plot-10",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78,\n       aes(x = date,\n           y = births)) + \n  geom_line(aes(color = day_of_week)) +      \n  geom_point(color = \"navy\")  +         \n  ggtitle(\"US Births in 1978\")\n\n\nggplot() establishes the default data and aesthetics for the geoms, but each geom may change these defaults.\ngood practice: put into ggplot() the things that affect all (or most) of the layers; rest in geom_XXXX()"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#setting-vs.-mapping-again",
    "href": "slides/2024-08-28-daataviz.html#setting-vs.-mapping-again",
    "title": "Better Data Visualizations",
    "section": "Setting vs. Mapping (again)",
    "text": "Setting vs. Mapping (again)\nInformation gets passed to the plot via:\n\nmap the variable information inside the aes (aesthetic) command\nset the non-variable information outside the aes (aesthetic) command"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#other-geoms",
    "href": "slides/2024-08-28-daataviz.html#other-geoms",
    "title": "Better Data Visualizations",
    "section": "Other geoms",
    "text": "Other geoms\n\napropos(\"^geom_\")\n\n [1] \"geom_abline\"                  \"geom_area\"                   \n [3] \"geom_ash\"                     \"geom_bar\"                    \n [5] \"geom_bin_2d\"                  \"geom_bin2d\"                  \n [7] \"geom_blank\"                   \"geom_boxplot\"                \n [9] \"geom_bracket\"                 \"geom_col\"                    \n[11] \"geom_contour\"                 \"geom_contour_filled\"         \n[13] \"geom_count\"                   \"geom_crossbar\"               \n[15] \"geom_curve\"                   \"geom_density\"                \n[17] \"geom_density_2d\"              \"geom_density_2d_filled\"      \n[19] \"geom_density_line\"            \"geom_density_ridges\"         \n[21] \"geom_density_ridges_gradient\" \"geom_density_ridges2\"        \n[23] \"geom_density2d\"               \"geom_density2d_filled\"       \n[25] \"geom_dotplot\"                 \"geom_errorbar\"               \n[27] \"geom_errorbarh\"               \"geom_exec\"                   \n[29] \"geom_freqpoly\"                \"geom_function\"               \n[31] \"geom_hex\"                     \"geom_histogram\"              \n[33] \"geom_hline\"                   \"geom_jitter\"                 \n[35] \"geom_label\"                   \"geom_label_repel\"            \n[37] \"geom_line\"                    \"geom_linerange\"              \n[39] \"geom_lm\"                      \"geom_map\"                    \n[41] \"geom_mosaic\"                  \"geom_mosaic_jitter\"          \n[43] \"geom_mosaic_text\"             \"geom_path\"                   \n[45] \"geom_pictogram\"               \"geom_point\"                  \n[47] \"geom_pointrange\"              \"geom_polygon\"                \n[49] \"geom_pwc\"                     \"geom_qq\"                     \n[51] \"geom_qq_line\"                 \"geom_quantile\"               \n[53] \"geom_rangeframe\"              \"geom_raster\"                 \n[55] \"geom_rect\"                    \"geom_ribbon\"                 \n[57] \"geom_ridgeline\"               \"geom_ridgeline_gradient\"     \n[59] \"geom_rug\"                     \"geom_segment\"                \n[61] \"geom_sf\"                      \"geom_sf_label\"               \n[63] \"geom_sf_text\"                 \"geom_signif\"                 \n[65] \"geom_smooth\"                  \"geom_spline\"                 \n[67] \"geom_spoke\"                   \"geom_step\"                   \n[69] \"geom_stripped_cols\"           \"geom_stripped_rows\"          \n[71] \"geom_text\"                    \"geom_text_repel\"             \n[73] \"geom_tile\"                    \"geom_tufteboxplot\"           \n[75] \"geom_violin\"                  \"geom_vline\"                  \n[77] \"geom_vridgeline\"              \"geom_waffle\""
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#other-geoms-1",
    "href": "slides/2024-08-28-daataviz.html#other-geoms-1",
    "title": "Better Data Visualizations",
    "section": "Other geoms",
    "text": "Other geoms\nhelp pages will tell you their aesthetics, default stats, etc.\n\n?geom_area             # for example"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#lets-try-geom_area",
    "href": "slides/2024-08-28-daataviz.html#lets-try-geom_area",
    "title": "Better Data Visualizations",
    "section": "Let’s try geom_area",
    "text": "Let’s try geom_area\n\n\n\nggplot(data = Births78,\n       aes(x = date,\n           y = births, \n           fill = day_of_week)) + \n  geom_area()+\n  ggtitle(\"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#lets-try-geom_area-1",
    "href": "slides/2024-08-28-daataviz.html#lets-try-geom_area-1",
    "title": "Better Data Visualizations",
    "section": "Let’s try geom_area",
    "text": "Let’s try geom_area\n\n\n\nggplot(data = Births78,\n       aes(x = date, y = births, fill = day_of_week)) + \n  geom_area()+\n  ggtitle(\"US Births in 1978\")\n\n\n\n\n\n\n\n\n\n… not a good plot\n\noverplotting is hiding much of the data\nextending y-axis to 0 may or may not be desirable."
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#side-note-what-makes-a-plot-good",
    "href": "slides/2024-08-28-daataviz.html#side-note-what-makes-a-plot-good",
    "title": "Better Data Visualizations",
    "section": "Side note: what makes a plot good?",
    "text": "Side note: what makes a plot good?\nMost (all?) graphics are intended to help us make comparisons\n\nHow does something change over time?\nDo my treatments matter? How much?\nDo treatment and control respond the same way?\n\n\n\n\n\n\n\nKey plot metric\n\n\nDoes my plot make the comparisons I am interested in:\n\neasily, and\naccurately?"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#time-for-some-different-data",
    "href": "slides/2024-08-28-daataviz.html#time-for-some-different-data",
    "title": "Better Data Visualizations",
    "section": "Time for some different data",
    "text": "Time for some different data\nHELPrct: Health Evaluation and Linkage to Primary care randomized clinical trial. Subjects admitted for treatment for addiction to one of three substances.\n\nhead(HELPrct)\n\n  age anysubstatus anysub cesd d1 daysanysub dayslink drugrisk e2b female\n1  37            1    yes   49  3        177      225        0  NA      0\n2  37            1    yes   30 22          2       NA        0  NA      0\n3  26            1    yes   39  0          3      365       20  NA      0\n4  39            1    yes   15  2        189      343        0   1      1\n5  32            1    yes   39 12          2       57        0   1      0\n6  47            1    yes    6  1         31      365        0  NA      1\n     sex g1b homeless i1 i2 id indtot linkstatus link   mcs  pcs pss_fr racegrp\n1   male yes   housed 13 26  1     39          1  yes 25.11 58.4      0   black\n2   male yes homeless 56 62  2     43         NA &lt;NA&gt; 26.67 36.0      1   white\n3   male  no   housed  0  0  3     41          0   no  6.76 74.8     13   black\n4 female  no   housed  5  5  4     28          0   no 43.97 61.9     11   white\n5   male  no homeless 10 13  5     38          1  yes 21.68 37.3     10   black\n6 female  no   housed  4  4  6     29          0   no 55.51 46.5      5   black\n  satreat sexrisk substance treat avg_drinks max_drinks hospitalizations\n1      no       4   cocaine   yes         13         26                3\n2      no       7   alcohol   yes         56         62               22\n3      no       2    heroin    no          0          0                0\n4     yes       4    heroin    no          5          5                2\n5      no       6   cocaine    no         10         13               12\n6      no       5   cocaine   yes          4          4                1"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#who-are-the-people-in-the-study",
    "href": "slides/2024-08-28-daataviz.html#who-are-the-people-in-the-study",
    "title": "Better Data Visualizations",
    "section": "Who are the people in the study?",
    "text": "Who are the people in the study?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = substance)) + \n  geom_bar()+\n  ggtitle(\"HELP trial\")\n\n\nHmm. What’s up with y?\n\nstat_bin() is being applied to the data before the geom_bar() gets to do its thing. Binning creates the y values."
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#who-are-the-people-in-the-study-1",
    "href": "slides/2024-08-28-daataviz.html#who-are-the-people-in-the-study-1",
    "title": "Better Data Visualizations",
    "section": "Who are the people in the study?",
    "text": "Who are the people in the study?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = substance,\n           fill = children)) + \n  geom_bar()+\n  ggtitle(\"HELP trial\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#who-are-the-people-in-the-study-2",
    "href": "slides/2024-08-28-daataviz.html#who-are-the-people-in-the-study-2",
    "title": "Better Data Visualizations",
    "section": "Who are the people in the study?",
    "text": "Who are the people in the study?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(HELP_data,\n       aes(x = substance,\n           fill = children)) + \n  geom_bar(position = \"fill\") +\n  ylab(\"actually, percent\")+\n  ggtitle(\"HELP trial\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-old-are-people-in-the-help-study",
    "href": "slides/2024-08-28-daataviz.html#how-old-are-people-in-the-help-study",
    "title": "Better Data Visualizations",
    "section": "How old are people in the HELP study?",
    "text": "How old are people in the HELP study?\n\n\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_histogram()+\n  ggtitle(\"HELP trial\")\n\nNotice the messages\n\nstat_bin: Histograms are not mapping the raw data but binned data.\nstat_bin() performs the data transformation.\nbinwidth: a default binwidth has been selected, but we should really choose our own."
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#setting-the-binwidth-manually",
    "href": "slides/2024-08-28-daataviz.html#setting-the-binwidth-manually",
    "title": "Better Data Visualizations",
    "section": "Setting the binwidth manually",
    "text": "Setting the binwidth manually\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_histogram(binwidth = 2)+\n  ggtitle(\"HELP trial\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-old-are-people-in-the-help-study-other-geoms",
    "href": "slides/2024-08-28-daataviz.html#how-old-are-people-in-the-help-study-other-geoms",
    "title": "Better Data Visualizations",
    "section": "How old are people in the HELP study? – Other geoms",
    "text": "How old are people in the HELP study? – Other geoms\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_freqpoly(binwidth = 2)+\n  ggtitle(\"HELP clinical trial at detoxification unit\")\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_density()+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#selecting-stat-and-geom-manually",
    "href": "slides/2024-08-28-daataviz.html#selecting-stat-and-geom-manually",
    "title": "Better Data Visualizations",
    "section": "Selecting stat and geom manually",
    "text": "Selecting stat and geom manually\nEvery geom comes with a default stat\n\nfor simple cases, the stat is stat_identity() which does nothing\nwe can mix and match geoms and stats however we like\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_line(stat = \"density\")+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#selecting-stat-and-geom-manually-1",
    "href": "slides/2024-08-28-daataviz.html#selecting-stat-and-geom-manually-1",
    "title": "Better Data Visualizations",
    "section": "Selecting stat and geom manually",
    "text": "Selecting stat and geom manually\nEvery stat comes with a default geom, every geom with a default stat\n\nwe can specify stats instead of geom, if we prefer\nwe can mix and match geoms and stats however we like\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  stat_density(geom = \"line\")+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#more-combinations",
    "href": "slides/2024-08-28-daataviz.html#more-combinations",
    "title": "Better Data Visualizations",
    "section": "More combinations",
    "text": "More combinations\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_point(stat = \"bin\", binwidth = 3) + \n  geom_line(stat = \"bin\", binwidth = 3)  +\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#more-combinations-1",
    "href": "slides/2024-08-28-daataviz.html#more-combinations-1",
    "title": "Better Data Visualizations",
    "section": "More combinations",
    "text": "More combinations\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_area(stat = \"bin\", binwidth = 3)  +\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#more-combinations-2",
    "href": "slides/2024-08-28-daataviz.html#more-combinations-2",
    "title": "Better Data Visualizations",
    "section": "More combinations",
    "text": "More combinations\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_point(stat = \"bin\", \n             binwidth = 3, \n             aes(size = ..count..)) +\n  geom_line(stat = \"bin\", binwidth = 3) +\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-much-drinking-i1",
    "href": "slides/2024-08-28-daataviz.html#how-much-drinking-i1",
    "title": "Better Data Visualizations",
    "section": "How much drinking? (i1)",
    "text": "How much drinking? (i1)\n\nHELP_data |&gt; \n  ggplot(aes(x = i1)) + geom_histogram()+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-much-drinking-i1-1",
    "href": "slides/2024-08-28-daataviz.html#how-much-drinking-i1-1",
    "title": "Better Data Visualizations",
    "section": "How much drinking? (i1)",
    "text": "How much drinking? (i1)\n\nHELP_data |&gt; \n  ggplot(aes(x = i1)) + geom_density()+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#how-much-drinking-i1-2",
    "href": "slides/2024-08-28-daataviz.html#how-much-drinking-i1-2",
    "title": "Better Data Visualizations",
    "section": "How much drinking? (i1)",
    "text": "How much drinking? (i1)\n\nHELP_data |&gt; \n  ggplot(aes(x = i1)) + geom_area(stat = \"density\")+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#covariates-adding-in-more-variables",
    "href": "slides/2024-08-28-daataviz.html#covariates-adding-in-more-variables",
    "title": "Better Data Visualizations",
    "section": "Covariates: Adding in more variables",
    "text": "Covariates: Adding in more variables\nUsing color and linetype:\n\nggplot(data = HELP_data,\n       aes(x = i1,\n           color = substance,\n           linetype = children)) + \n  geom_line(stat = \"density\")+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#using-color-and-facets",
    "href": "slides/2024-08-28-daataviz.html#using-color-and-facets",
    "title": "Better Data Visualizations",
    "section": "Using color and facets",
    "text": "Using color and facets\n\nggplot(data = HELP_data,\n       aes(x = i1, color = substance)) + \n  geom_line(stat = \"density\") + \n  facet_grid( . ~ children )+\n  ggtitle(\"HELP clinical trial at detoxification unit\")\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = i1, color = substance)) + \n  geom_line(stat = \"density\") + \n  facet_grid( children ~ . )+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#boxplots",
    "href": "slides/2024-08-28-daataviz.html#boxplots",
    "title": "Better Data Visualizations",
    "section": "Boxplots",
    "text": "Boxplots\nBoxplots use stat_quantile() (five number summary).\nThe quantitative variable must be y, and there must be an additional x variable.\n\nHELP_data |&gt; \n  ggplot(aes(x = substance, y = age, color = children)) + \n  geom_boxplot()+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#horizontal-boxplots",
    "href": "slides/2024-08-28-daataviz.html#horizontal-boxplots",
    "title": "Better Data Visualizations",
    "section": "Horizontal boxplots",
    "text": "Horizontal boxplots\nHorizontal boxplots are obtained by flipping the coordinate system:\n\ncoord_flip() may be used with other plots as well to reverse the roles of x and y on the plot.\n\n\nggplot(data = HELP_data,\n       aes(x = substance, \n           y = age, \n           color = children)) + \n  geom_boxplot() +\n  coord_flip()+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#axes-scaling-with-boxplots",
    "href": "slides/2024-08-28-daataviz.html#axes-scaling-with-boxplots",
    "title": "Better Data Visualizations",
    "section": "Axes scaling with boxplots",
    "text": "Axes scaling with boxplots\nWe can scale the continuous axis\n\nggplot(data = HELP_data,\n       aes(x = substance, \n           y = age, \n           color = children)) + \n  geom_boxplot() +\n  coord_trans(y = \"exp\")+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#give-me-some-space",
    "href": "slides/2024-08-28-daataviz.html#give-me-some-space",
    "title": "Better Data Visualizations",
    "section": "Give me some space",
    "text": "Give me some space\nWe’ve triggered a new feature: dodge (for dodging things left/right). We can control how much if we set the dodge manually.\n\nggplot(data = HELP_data,\n       aes(x = substance, \n           y = age, \n           color = children)) + \n  geom_boxplot(position = position_dodge(width=1)) +\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#issues-with-bigger-data",
    "href": "slides/2024-08-28-daataviz.html#issues-with-bigger-data",
    "title": "Better Data Visualizations",
    "section": "Issues with bigger data",
    "text": "Issues with bigger data\n\nAlthough we can see a generally positive association (as we would expect), the overplotting may be hiding information.\n\n\nlibrary(NHANES)\ndim(NHANES)\n\n[1] 10000    76\n\nggplot(data = NHANES,\n       aes(x = Height, y = Weight)) +\n  geom_point() + \n  facet_grid( Gender ~ PregnantNow )"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#using-alpha-opacity",
    "href": "slides/2024-08-28-daataviz.html#using-alpha-opacity",
    "title": "Better Data Visualizations",
    "section": "Using alpha (opacity)",
    "text": "Using alpha (opacity)\nOne way to deal with overplotting is to set the opacity low.\n\nggplot(data = NHANES,\n       aes(x = Height, y = Weight)) +\n  geom_point(alpha=0.01) + \n  facet_grid( Gender ~ PregnantNow )"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#geom_density2d",
    "href": "slides/2024-08-28-daataviz.html#geom_density2d",
    "title": "Better Data Visualizations",
    "section": "geom_density2d",
    "text": "geom_density2d\nAlternatively (or simultaneously) we might prefer a different geom altogether.\n\nggplot(data = NHANES,\n       aes(x = Height, y = Weight)) +\n  geom_density2d() + \n  facet_grid( Gender ~ PregnantNow )"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#multiple-layers",
    "href": "slides/2024-08-28-daataviz.html#multiple-layers",
    "title": "Better Data Visualizations",
    "section": "Multiple layers",
    "text": "Multiple layers\n\n\n\nggplot(data = HELP_data, \n       aes(x = children, y = age)) +\n  geom_boxplot(outlier.size = 0) +\n  geom_point(alpha=.6) +\n  coord_flip()+\n  ggtitle(\"HELP clinical trial at detoxification unit\")\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = children, y = age)) +\n  geom_boxplot(outlier.size = 0) +\n  geom_jitter(alpha=.6, width = 0.1) +\n  coord_flip()+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#multiple-layers-1",
    "href": "slides/2024-08-28-daataviz.html#multiple-layers-1",
    "title": "Better Data Visualizations",
    "section": "Multiple layers",
    "text": "Multiple layers\n\nggplot(data = HELP_data,\n       aes(x = children, y = age)) +\n  geom_boxplot(outlier.size = 0) +\n  geom_point(alpha=.6, \n             position = position_jitter(width=.1, height=0)) +\n  coord_flip()+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#things-i-havent-mentioned-much",
    "href": "slides/2024-08-28-daataviz.html#things-i-havent-mentioned-much",
    "title": "Better Data Visualizations",
    "section": "Things I haven’t mentioned (much)",
    "text": "Things I haven’t mentioned (much)\n\ncoords (coord_flip() is good to know about)\nthemes (for customizing appearance)\nposition (position_dodge(), position_jitterdodge(), position_stack(), etc.)\ntransforming axes"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#themes",
    "href": "slides/2024-08-28-daataviz.html#themes",
    "title": "Better Data Visualizations",
    "section": "themes",
    "text": "themes\n\nlibrary(ggthemes)\nggplot(Births78, aes(x = date, y = births)) + \n  geom_point() + \n  theme_wsj()"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#jitterdodge",
    "href": "slides/2024-08-28-daataviz.html#jitterdodge",
    "title": "Better Data Visualizations",
    "section": "jitterdodge()",
    "text": "jitterdodge()\n\nggplot(data = HELP_data, \n       aes(x = substance, y = age, color = children)) +\n  geom_boxplot(coef = 10, position = position_dodge()) +\n  geom_point(aes(color = children, \n                 fill = children), \n             position = position_jitterdodge()) +\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#a-little-bit-of-everything",
    "href": "slides/2024-08-28-daataviz.html#a-little-bit-of-everything",
    "title": "Better Data Visualizations",
    "section": "A little bit of everything",
    "text": "A little bit of everything\n\nggplot(data = HELP_data, aes(x = substance, y = age, color = children)) +\n  geom_boxplot(coef = 10, position = position_dodge(width=1)) +\n  geom_point(aes(fill = children), alpha=.5, \n             position = position_jitterdodge(dodge.width=1, jitter.width = 0.2)) + \n  facet_wrap(~homeless)+\n  ggtitle(\"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#want-to-learn-more",
    "href": "slides/2024-08-28-daataviz.html#want-to-learn-more",
    "title": "Better Data Visualizations",
    "section": "Want to learn more?",
    "text": "Want to learn more?\n\ndocs.ggplot2.org/\nR for Data Science by Hadley Wickham and Garrett Grolemund"
  },
  {
    "objectID": "slides/2024-08-28-daataviz.html#whats-around-the-corner",
    "href": "slides/2024-08-28-daataviz.html#whats-around-the-corner",
    "title": "Better Data Visualizations",
    "section": "What’s around the corner?",
    "text": "What’s around the corner?\nshiny\n\ninteractive graphics / modeling\nhttps://shiny.rstudio.com/\n\nplotly\n\nPlotly is an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js. The plotly R libary contains the ggplotly function , which will convert ggplot2 figures into a Plotly object. Furthermore, you have the option of manipulating the Plotly object with the style function.\n\n\nhttps://plot.ly/ggplot2/getting-started/\n\ngganimate\n\ngganimate tutorial"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#nssd",
    "href": "slides/2024-08-28-dataviz.html#nssd",
    "title": "Better Data Visualizations",
    "section": "NSSD:",
    "text": "NSSD:\n\nWhat was Hilary trying to answer in her data collection?\nName two of Hilary’s main hurdles in gathering accurate data.\nWhich is better: high touch (manual) or low touch (automatic) data collection? Why?\nWhat additional covariates are needed / desired? Any problems with them?\nHow much data does she need?"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#grammar-of-graphics",
    "href": "slides/2024-08-28-dataviz.html#grammar-of-graphics",
    "title": "Better Data Visualizations",
    "section": "Grammar of graphics",
    "text": "Grammar of graphics\nYau (2013) gives us nine visual cues, and Wickham (2014) translates them into a language using ggplot2.\n\nVisual Cues: the aspects of the figure where we should focus.\nPosition (numerical) where in relation to other things?\nLength (numerical) how big (in one dimension)?\nAngle (numerical) how wide? parallel to something else?\nDirection (numerical) at what slope? In a time series, going up or down?\nShape (categorical) belonging to what group?\nArea (numerical) how big (in two dimensions)? Beware of improper scaling!\nVolume (numerical) how big (in three dimensions)? Beware of improper scaling!\nShade (either) to what extent? how severely?\nColor (either) to what extent? how severely? Beware of red/green color blindness.\nCoordinate System: rectangular, polar, geographic, etc.\nScale: numeric (linear? logarithmic?), categorical (ordered?), time\nContext: in comparison to what (think back to ideas from Tufte)"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#pieces-of-the-graph",
    "href": "slides/2024-08-28-dataviz.html#pieces-of-the-graph",
    "title": "Better Data Visualizations",
    "section": "Pieces of the Graph",
    "text": "Pieces of the Graph\n\n\nVisual Cues of Yau (2013):\nPosition (numerical)\nLength (numerical)\nAngle (numerical)\nDirection (numerical)\nShape (categorical)\nArea (numerical)\nVolume (numerical)\nShade (either)\nColor (either)"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#order-matters",
    "href": "slides/2024-08-28-dataviz.html#order-matters",
    "title": "Better Data Visualizations",
    "section": "Order Matters",
    "text": "Order Matters"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#cues-together",
    "href": "slides/2024-08-28-dataviz.html#cues-together",
    "title": "Better Data Visualizations",
    "section": "Cues Together",
    "text": "Cues Together"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#attributes",
    "href": "slides/2024-08-28-dataviz.html#attributes",
    "title": "Better Data Visualizations",
    "section": "Attributes",
    "text": "Attributes\nAttributes can focus your reader’s attention.1\n\n\n\n\n\n\n\n\n\nimage credit: Better Data Visualization by Schwabish"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#advice-for-plotting",
    "href": "slides/2024-08-28-dataviz.html#advice-for-plotting",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\n\n\n\nAvoid having other graph elements interfere with data\nUse visually prominent symbols\nAvoid over-plotting (One way to avoid over plotting: jitter the values)\nDifferent values of data may obscure each other\nInclude all or nearly all of the data\nFill data region"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#advice-for-plotting-1",
    "href": "slides/2024-08-28-dataviz.html#advice-for-plotting-1",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\n\n\n\nChart junk & stuff that adds no meaning, e.g. butterflies on top of barplots, background images\nExtra tick marks and grid lines\nUnnecessary text and arrows\nDecimal places beyond the measurement error or the level of difference"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#advice-for-plotting-2",
    "href": "slides/2024-08-28-dataviz.html#advice-for-plotting-2",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\n\n\n\nPut juxtaposed plots on same scale\nMake it easy to distinguish elements of superposed plots (e.g. color)\nEmphasizes the important difference\nComparison: volume, area, height (be careful, volume can seem bigger than you mean it to)"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#advice-for-plotting-3",
    "href": "slides/2024-08-28-dataviz.html#advice-for-plotting-3",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\nChoosing the scale\n\n\n\nKeep scales on x and y axes the same for both plots to facilitate the comparison\nZoom in to focus on the region that contains the bulk of the data\nKeep the scale the same throughout the plot (i.e. don’t change it mid-axis)\nOrigin need not be on the scale\nChoose a scale that improves resolution\nAvoid jiggling the baseline"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#advice-for-plotting-4",
    "href": "slides/2024-08-28-dataviz.html#advice-for-plotting-4",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\nChoosing the scale\nHow to make a plot information rich\n\n\n\nDescribe what you see in the caption\nAdd context with reference markers (lines and points) including text\nAdd legends and labels\nUse color and plotting symbols to add more information\nPlot the same thing more than once in different ways/scales\nReduce clutter"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#advice-for-plotting-5",
    "href": "slides/2024-08-28-dataviz.html#advice-for-plotting-5",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\nChoosing the scale\nHow to make a plot information rich\nCaptions should\n\n\n\nBe comprehensive\nSelf-contained\nDescribe what has been graphed\nDraw attention to important features\nDescribe conclusions drawn from graph"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#advice-for-plotting-6",
    "href": "slides/2024-08-28-dataviz.html#advice-for-plotting-6",
    "title": "Better Data Visualizations",
    "section": "Advice for Plotting",
    "text": "Advice for Plotting\n\n\n\nBasic plotting\nEliminate superfluous material\nFacilitate comparisons\nChoosing the scale\nHow to make a plot information rich\nCaptions should\nGood Plot Making Practice\n\n\n\nPut major conclusions in graphical form\nProvide reference information\nProof read for clarity and consistency\nGraphing is an iterative process\nMultiplicity is OK, i.e. two plots of the same variable may provide different messages\nMake plots data rich"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#getting-help",
    "href": "slides/2024-08-28-dataviz.html#getting-help",
    "title": "Better Data Visualizations",
    "section": "Getting help",
    "text": "Getting help\n\nOne of the best ways to get started with ggplot is to Google what you want to do with the word ggplot. Then look through the images that come up. More often than not, the associated code is there. There are also ggplot galleries of images, one of them is here: https://plot.ly/ggplot2/\nLook at the end of this presentation and the syllabus. More help options there."
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#what-are-the-visual-cues-on-this-plot",
    "href": "slides/2024-08-28-dataviz.html#what-are-the-visual-cues-on-this-plot",
    "title": "Better Data Visualizations",
    "section": "What are the visual cues on this plot?",
    "text": "What are the visual cues on this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nposition\nlength\nshape\narea/volume\nshade/color"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#what-are-the-visual-cues-on-this-plot-1",
    "href": "slides/2024-08-28-dataviz.html#what-are-the-visual-cues-on-this-plot-1",
    "title": "Better Data Visualizations",
    "section": "What are the visual cues on this plot?",
    "text": "What are the visual cues on this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nposition\nlength\nshape\narea/volume\nshade/color"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#what-are-the-visual-cues-on-this-plot-2",
    "href": "slides/2024-08-28-dataviz.html#what-are-the-visual-cues-on-this-plot-2",
    "title": "Better Data Visualizations",
    "section": "What are the visual cues on this plot?",
    "text": "What are the visual cues on this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nposition\nlength\nshape\narea/volume\nshade/color"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#the-grammar-of-graphics-ggplot",
    "href": "slides/2024-08-28-dataviz.html#the-grammar-of-graphics-ggplot",
    "title": "Better Data Visualizations",
    "section": "The grammar of graphics ggplot",
    "text": "The grammar of graphics ggplot\ngeom: the geometric “shape” used to display data\n\nbar, point, line, ribbon, text, etc.\n\naesthetic: an attribute controlling how geom is displayed with respect to variables\n\nx position, y position, color, fill, shape, size, etc.\n\n\nguide: helps user convert visual data back into raw data (legends, axes)\nstat: a transformation applied to data before geom gets it\n\nexample: histograms work on binned data"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#set-up",
    "href": "slides/2024-08-28-dataviz.html#set-up",
    "title": "Better Data Visualizations",
    "section": "Set up",
    "text": "Set up\n\nlibrary(mosaic)\ndata(Births78)\n\n\nhead(Births78)\n\n\n\n\n\n\n\n\n\n\ndate\nbirths\nwday\nyear\nmonth\nday_of_year\nday_of_month\nday_of_week\n\n\n\n\n1978-01-01\n7701\nSun\n1978\n1\n1\n1\n1\n\n\n1978-01-02\n7527\nMon\n1978\n1\n2\n2\n2\n\n\n1978-01-03\n8825\nTue\n1978\n1\n3\n3\n3\n\n\n1978-01-04\n8859\nWed\n1978\n1\n4\n4\n4\n\n\n1978-01-05\n9043\nThu\n1978\n1\n5\n5\n5\n\n\n1978-01-06\n9208\nFri\n1978\n1\n6\n6\n6"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\nTwo Questions:\n\nWhat do we want R to do? (What is the goal?)\nWhat does R need to know?"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-1",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-1",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nGoal: scatterplot = a plot with points\nWhat does R need to know?\n\ndata source: Births78\naesthetics:\n\ndate -&gt; x\nbirths -&gt; y\npoints (!)"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-2",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-2",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78, \n       aes(x = date, y = births)) + \n  geom_point() +\n  labs(title = \"US Births in 1978\")\n\nggplot() +\n  geom_point(data = Births78, \n             aes(x = date, y = births)) +\n  labs(title = \"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-3",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-3",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\nWhat has changed?\n\nnew aesthetic: mapping color to day of week"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-4",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-4",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78,\n       aes(x = date,\n           y = births, \n           color = wday)) +\n  geom_point() +\n  labs(title = \"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-5",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-5",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-6",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-6",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\nlines instead of dots!\n\nggplot(data = Births78,\n         aes(x = date, \n             y = births,\n             color = wday)) +\n  geom_line() +\n  labs(title = \"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-7",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-7",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-8",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-8",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\nNow there are two layers: one with points and one with lines\n\nggplot(data = Births78,\n       aes(x = date,\n           y = births,\n           color = wday)) + \n  geom_point() +  \n  geom_line()+\n  labs(title = \"US Births in 1978\")\n\n\nThe layers are placed one on top of the other: the points are below and the lines are above.\ndata and aes specified in ggplot() affect all geoms"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#what-does-this-code-do",
    "href": "slides/2024-08-28-dataviz.html#what-does-this-code-do",
    "title": "Better Data Visualizations",
    "section": "What does this code do?",
    "text": "What does this code do?\n\nggplot(data = Births78,\n       aes(x = date, y = births, color = \"navy\")) + \n  geom_point() +\n  labs(title = \"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#what-does-this-code-do-1",
    "href": "slides/2024-08-28-dataviz.html#what-does-this-code-do-1",
    "title": "Better Data Visualizations",
    "section": "What does this code do?",
    "text": "What does this code do?\n\nggplot(data = Births78,\n       aes(x = date, y = births, color = \"navy\")) + \n  geom_point()  +\n  labs(title = \"US Births in 1978\")\n\n\nThis is mapping the color aesthetic to a new variable with only one value (“navy”).\nSo all the dots get set to the same color, but it’s not navy."
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#setting-vs.-mapping",
    "href": "slides/2024-08-28-dataviz.html#setting-vs.-mapping",
    "title": "Better Data Visualizations",
    "section": "Setting vs. Mapping",
    "text": "Setting vs. Mapping\nIf we want to set the color to be navy for all of the dots, we do it outside the aes() designation:\n\nggplot(data = Births78,\n       aes(x = date, y = births)) +   # map variables \n  geom_point(color = \"navy\")    +   # set attributes\n  labs(title = \"US Births in 1978\")\n\n\n\nNote that color = \"navy\" is now outside of the aesthetics list. That’s how ggplot2 distinguishes between mapping and setting."
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-9",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-9",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-10",
    "href": "slides/2024-08-28-dataviz.html#how-do-we-make-this-plot-10",
    "title": "Better Data Visualizations",
    "section": "How do we make this plot?",
    "text": "How do we make this plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78,\n       aes(x = date,\n           y = births)) + \n  geom_line(aes(color = wday)) +      \n  geom_point(color = \"navy\")  +         \n  labs(title = \"US Births in 1978\")\n\n\nggplot() establishes the default data and aesthetics for the geoms, but each geom may change these defaults.\ngood practice: put into ggplot() the things that affect all (or most) of the layers; rest in geom_XXXX()"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#setting-vs.-mapping-again",
    "href": "slides/2024-08-28-dataviz.html#setting-vs.-mapping-again",
    "title": "Better Data Visualizations",
    "section": "Setting vs. Mapping (again)",
    "text": "Setting vs. Mapping (again)\nInformation gets passed to the plot via:\n\nmap the variable information inside the aes (aesthetic) command\nset the non-variable information outside the aes (aesthetic) command"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#other-geoms",
    "href": "slides/2024-08-28-dataviz.html#other-geoms",
    "title": "Better Data Visualizations",
    "section": "Other geoms",
    "text": "Other geoms\n\napropos(\"^geom_\")\n\n [1] \"geom_abline\"                  \"geom_area\"                   \n [3] \"geom_ash\"                     \"geom_bar\"                    \n [5] \"geom_bin_2d\"                  \"geom_bin2d\"                  \n [7] \"geom_blank\"                   \"geom_boxplot\"                \n [9] \"geom_bracket\"                 \"geom_col\"                    \n[11] \"geom_contour\"                 \"geom_contour_filled\"         \n[13] \"geom_count\"                   \"geom_crossbar\"               \n[15] \"geom_curve\"                   \"geom_density\"                \n[17] \"geom_density_2d\"              \"geom_density_2d_filled\"      \n[19] \"geom_density_line\"            \"geom_density_ridges\"         \n[21] \"geom_density_ridges_gradient\" \"geom_density_ridges2\"        \n[23] \"geom_density2d\"               \"geom_density2d_filled\"       \n[25] \"geom_dotplot\"                 \"geom_errorbar\"               \n[27] \"geom_errorbarh\"               \"geom_exec\"                   \n[29] \"geom_freqpoly\"                \"geom_function\"               \n[31] \"geom_hex\"                     \"geom_histogram\"              \n[33] \"geom_hline\"                   \"geom_jitter\"                 \n[35] \"geom_label\"                   \"geom_label_repel\"            \n[37] \"geom_line\"                    \"geom_linerange\"              \n[39] \"geom_lm\"                      \"geom_map\"                    \n[41] \"geom_mosaic\"                  \"geom_mosaic_jitter\"          \n[43] \"geom_mosaic_text\"             \"geom_path\"                   \n[45] \"geom_pictogram\"               \"geom_point\"                  \n[47] \"geom_pointrange\"              \"geom_polygon\"                \n[49] \"geom_pwc\"                     \"geom_qq\"                     \n[51] \"geom_qq_line\"                 \"geom_quantile\"               \n[53] \"geom_rangeframe\"              \"geom_raster\"                 \n[55] \"geom_rect\"                    \"geom_ribbon\"                 \n[57] \"geom_ridgeline\"               \"geom_ridgeline_gradient\"     \n[59] \"geom_rug\"                     \"geom_segment\"                \n[61] \"geom_sf\"                      \"geom_sf_label\"               \n[63] \"geom_sf_text\"                 \"geom_signif\"                 \n[65] \"geom_smooth\"                  \"geom_spline\"                 \n[67] \"geom_spoke\"                   \"geom_step\"                   \n[69] \"geom_stripped_cols\"           \"geom_stripped_rows\"          \n[71] \"geom_text\"                    \"geom_text_repel\"             \n[73] \"geom_tile\"                    \"geom_tufteboxplot\"           \n[75] \"geom_violin\"                  \"geom_vline\"                  \n[77] \"geom_vridgeline\"              \"geom_waffle\""
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#other-geoms-1",
    "href": "slides/2024-08-28-dataviz.html#other-geoms-1",
    "title": "Better Data Visualizations",
    "section": "Other geoms",
    "text": "Other geoms\nhelp pages will tell you their aesthetics, default stats, etc.\n\n?geom_area             # for example"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#lets-try-geom_area",
    "href": "slides/2024-08-28-dataviz.html#lets-try-geom_area",
    "title": "Better Data Visualizations",
    "section": "Let’s try geom_area",
    "text": "Let’s try geom_area\n\n\n\nggplot(data = Births78,\n       aes(x = date,\n           y = births, \n           fill = wday)) + \n  geom_area()+\n  labs(title = \"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#lets-try-geom_area-1",
    "href": "slides/2024-08-28-dataviz.html#lets-try-geom_area-1",
    "title": "Better Data Visualizations",
    "section": "Let’s try geom_area",
    "text": "Let’s try geom_area\n\n\n\nggplot(data = Births78,\n       aes(x = date, y = births, fill = wday)) + \n  geom_area()+\n  labs(title = \"US Births in 1978\")\n\n\n\n\n\n\n\n\n\n… not a good plot\n\noverplotting is hiding much of the data\nextending y-axis to 0 may or may not be desirable."
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#side-note-what-makes-a-plot-good",
    "href": "slides/2024-08-28-dataviz.html#side-note-what-makes-a-plot-good",
    "title": "Better Data Visualizations",
    "section": "Side note: what makes a plot good?",
    "text": "Side note: what makes a plot good?\nMost (all?) graphics are intended to help us make comparisons\n\nHow does something change over time?\nDo my treatments matter? How much?\nDo treatment and control respond the same way?\n\n\n\n\n\n\n\nKey plot metric\n\n\nDoes my plot make the comparisons I am interested in:\n\neasily, and\naccurately?"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#time-for-some-different-data",
    "href": "slides/2024-08-28-dataviz.html#time-for-some-different-data",
    "title": "Better Data Visualizations",
    "section": "Time for some different data",
    "text": "Time for some different data\nHELPrct: Health Evaluation and Linkage to Primary care randomized clinical trial. Subjects admitted for treatment for addiction to one of three substances.\n\nhead(HELPrct)\n\n\n\n\n\n\n\n\n\n\nage\nanysubstatus\nanysub\ncesd\nd1\ndaysanysub\ndayslink\ndrugrisk\ne2b\nfemale\nsex\ng1b\nhomeless\ni1\ni2\nid\nindtot\nlinkstatus\nlink\nmcs\npcs\npss_fr\nracegrp\nsatreat\nsexrisk\nsubstance\ntreat\navg_drinks\nmax_drinks\nhospitalizations\n\n\n\n\n37\n1\nyes\n49\n3\n177\n225\n0\nNA\n0\nmale\nyes\nhoused\n13\n26\n1\n39\n1\nyes\n25.11\n58.4\n0\nblack\nno\n4\ncocaine\nyes\n13\n26\n3\n\n\n37\n1\nyes\n30\n22\n2\nNA\n0\nNA\n0\nmale\nyes\nhomeless\n56\n62\n2\n43\nNA\nNA\n26.67\n36.0\n1\nwhite\nno\n7\nalcohol\nyes\n56\n62\n22\n\n\n26\n1\nyes\n39\n0\n3\n365\n20\nNA\n0\nmale\nno\nhoused\n0\n0\n3\n41\n0\nno\n6.76\n74.8\n13\nblack\nno\n2\nheroin\nno\n0\n0\n0\n\n\n39\n1\nyes\n15\n2\n189\n343\n0\n1\n1\nfemale\nno\nhoused\n5\n5\n4\n28\n0\nno\n43.97\n61.9\n11\nwhite\nyes\n4\nheroin\nno\n5\n5\n2\n\n\n32\n1\nyes\n39\n12\n2\n57\n0\n1\n0\nmale\nno\nhomeless\n10\n13\n5\n38\n1\nyes\n21.68\n37.3\n10\nblack\nno\n6\ncocaine\nno\n10\n13\n12\n\n\n47\n1\nyes\n6\n1\n31\n365\n0\nNA\n1\nfemale\nno\nhoused\n4\n4\n6\n29\n0\nno\n55.51\n46.5\n5\nblack\nno\n5\ncocaine\nyes\n4\n4\n1"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#who-are-the-people-in-the-study",
    "href": "slides/2024-08-28-dataviz.html#who-are-the-people-in-the-study",
    "title": "Better Data Visualizations",
    "section": "Who are the people in the study?",
    "text": "Who are the people in the study?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = substance)) + \n  geom_bar()+\n  labs(title = \"HELP trial\")\n\n\nHmm. What’s up with y?\n\nstat_bin() is being applied to the data before the geom_bar() gets to do its thing. Binning creates the y values."
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#who-are-the-people-in-the-study-1",
    "href": "slides/2024-08-28-dataviz.html#who-are-the-people-in-the-study-1",
    "title": "Better Data Visualizations",
    "section": "Who are the people in the study?",
    "text": "Who are the people in the study?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = substance,\n           fill = children)) + \n  geom_bar()+\n  labs(title = \"HELP trial\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#who-are-the-people-in-the-study-2",
    "href": "slides/2024-08-28-dataviz.html#who-are-the-people-in-the-study-2",
    "title": "Better Data Visualizations",
    "section": "Who are the people in the study?",
    "text": "Who are the people in the study?\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(HELP_data,\n       aes(x = substance,\n           fill = children)) + \n  geom_bar(position = \"fill\") +\n  labs(title = \"HELP trial\",\n       y = \"actually, percent\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-old-are-people-in-the-help-study",
    "href": "slides/2024-08-28-dataviz.html#how-old-are-people-in-the-help-study",
    "title": "Better Data Visualizations",
    "section": "How old are people in the HELP study?",
    "text": "How old are people in the HELP study?\n\n\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_histogram()+\n  labs(title = \"HELP trial\")\n\nNotice the messages\n\nstat_bin: Histograms are not mapping the raw data but binned data.\nstat_bin() performs the data transformation.\nbinwidth: a default binwidth has been selected, but we should really choose our own."
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#setting-the-binwidth-manually",
    "href": "slides/2024-08-28-dataviz.html#setting-the-binwidth-manually",
    "title": "Better Data Visualizations",
    "section": "Setting the binwidth manually",
    "text": "Setting the binwidth manually\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_histogram(binwidth = 2)+\n  labs(title = \"HELP trial\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-old-are-people-in-the-help-study-other-geoms",
    "href": "slides/2024-08-28-dataviz.html#how-old-are-people-in-the-help-study-other-geoms",
    "title": "Better Data Visualizations",
    "section": "How old are people in the HELP study? – Other geoms",
    "text": "How old are people in the HELP study? – Other geoms\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_freqpoly(binwidth = 2)+\n  labs(title = \"HELP clinical trial at detoxification unit\")\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_density()+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#selecting-stat-and-geom-manually",
    "href": "slides/2024-08-28-dataviz.html#selecting-stat-and-geom-manually",
    "title": "Better Data Visualizations",
    "section": "Selecting stat and geom manually",
    "text": "Selecting stat and geom manually\nEvery geom comes with a default stat\n\nfor simple cases, the stat is stat_identity() which does nothing\nwe can mix and match geoms and stats however we like\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_line(stat = \"density\")+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#selecting-stat-and-geom-manually-1",
    "href": "slides/2024-08-28-dataviz.html#selecting-stat-and-geom-manually-1",
    "title": "Better Data Visualizations",
    "section": "Selecting stat and geom manually",
    "text": "Selecting stat and geom manually\nEvery stat comes with a default geom, every geom with a default stat\n\nwe can specify stats instead of geom, if we prefer\nwe can mix and match geoms and stats however we like\n\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  stat_density(geom = \"line\")+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#more-combinations",
    "href": "slides/2024-08-28-dataviz.html#more-combinations",
    "title": "Better Data Visualizations",
    "section": "More combinations",
    "text": "More combinations\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_point(stat = \"bin\", binwidth = 3) + \n  geom_line(stat = \"bin\", binwidth = 3)  +\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#more-combinations-1",
    "href": "slides/2024-08-28-dataviz.html#more-combinations-1",
    "title": "Better Data Visualizations",
    "section": "More combinations",
    "text": "More combinations\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_area(stat = \"bin\", binwidth = 3)  +\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#more-combinations-2",
    "href": "slides/2024-08-28-dataviz.html#more-combinations-2",
    "title": "Better Data Visualizations",
    "section": "More combinations",
    "text": "More combinations\n\nggplot(data = HELP_data,\n       aes(x = age)) + \n  geom_point(stat = \"bin\", \n             binwidth = 3, \n             aes(size = ..count..)) +\n  geom_line(stat = \"bin\", binwidth = 3) +\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-much-drinking-i1",
    "href": "slides/2024-08-28-dataviz.html#how-much-drinking-i1",
    "title": "Better Data Visualizations",
    "section": "How much drinking? (i1)",
    "text": "How much drinking? (i1)\n\nHELP_data |&gt; \n  ggplot(aes(x = i1)) + geom_histogram()+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-much-drinking-i1-1",
    "href": "slides/2024-08-28-dataviz.html#how-much-drinking-i1-1",
    "title": "Better Data Visualizations",
    "section": "How much drinking? (i1)",
    "text": "How much drinking? (i1)\n\nHELP_data |&gt; \n  ggplot(aes(x = i1)) + geom_density()+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#how-much-drinking-i1-2",
    "href": "slides/2024-08-28-dataviz.html#how-much-drinking-i1-2",
    "title": "Better Data Visualizations",
    "section": "How much drinking? (i1)",
    "text": "How much drinking? (i1)\n\nHELP_data |&gt; \n  ggplot(aes(x = i1)) + geom_area(stat = \"density\")+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#covariates-adding-in-more-variables",
    "href": "slides/2024-08-28-dataviz.html#covariates-adding-in-more-variables",
    "title": "Better Data Visualizations",
    "section": "Covariates: Adding in more variables",
    "text": "Covariates: Adding in more variables\nUsing color and linetype:\n\nggplot(data = HELP_data,\n       aes(x = i1,\n           color = substance,\n           linetype = children)) + \n  geom_line(stat = \"density\")+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#using-color-and-facets",
    "href": "slides/2024-08-28-dataviz.html#using-color-and-facets",
    "title": "Better Data Visualizations",
    "section": "Using color and facets",
    "text": "Using color and facets\n\nggplot(data = HELP_data,\n       aes(x = i1, color = substance)) + \n  geom_line(stat = \"density\") + \n  facet_grid( . ~ children )+\n  labs(title = \"HELP clinical trial at detoxification unit\")\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = i1, color = substance)) + \n  geom_line(stat = \"density\") + \n  facet_grid( children ~ . )+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#boxplots",
    "href": "slides/2024-08-28-dataviz.html#boxplots",
    "title": "Better Data Visualizations",
    "section": "Boxplots",
    "text": "Boxplots\nBoxplots use stat_quantile() (five number summary).\nThe quantitative variable must be y, and there must be an additional x variable.\n\nHELP_data |&gt; \n  ggplot(aes(x = substance, y = age, color = children)) + \n  geom_boxplot()+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#horizontal-boxplots",
    "href": "slides/2024-08-28-dataviz.html#horizontal-boxplots",
    "title": "Better Data Visualizations",
    "section": "Horizontal boxplots",
    "text": "Horizontal boxplots\nHorizontal boxplots are obtained by flipping the coordinate system:\n\ncoord_flip() may be used with other plots as well to reverse the roles of x and y on the plot.\n\n\nggplot(data = HELP_data,\n       aes(x = substance, \n           y = age, \n           color = children)) + \n  geom_boxplot() +\n  coord_flip()+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#axes-scaling-with-boxplots",
    "href": "slides/2024-08-28-dataviz.html#axes-scaling-with-boxplots",
    "title": "Better Data Visualizations",
    "section": "Axes scaling with boxplots",
    "text": "Axes scaling with boxplots\nWe can scale the continuous axis\n\nggplot(data = HELP_data,\n       aes(x = substance, \n           y = age, \n           color = children)) + \n  geom_boxplot() +\n  coord_trans(y = \"exp\")+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#give-me-some-space",
    "href": "slides/2024-08-28-dataviz.html#give-me-some-space",
    "title": "Better Data Visualizations",
    "section": "Give me some space",
    "text": "Give me some space\nWe’ve triggered a new feature: dodge (for dodging things left/right). We can control how much if we set the dodge manually.\n\nggplot(data = HELP_data,\n       aes(x = substance, \n           y = age, \n           color = children)) + \n  geom_boxplot(position = position_dodge(width=1)) +\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#issues-with-bigger-data",
    "href": "slides/2024-08-28-dataviz.html#issues-with-bigger-data",
    "title": "Better Data Visualizations",
    "section": "Issues with bigger data",
    "text": "Issues with bigger data\n\nAlthough we can see a generally positive association (as we would expect), the overplotting may be hiding information.\n\n\nlibrary(NHANES)\ndim(NHANES)\n\n[1] 10000    76\n\nggplot(data = NHANES,\n       aes(x = Height, y = Weight)) +\n  geom_point() + \n  facet_grid( Gender ~ PregnantNow )"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#using-alpha-opacity",
    "href": "slides/2024-08-28-dataviz.html#using-alpha-opacity",
    "title": "Better Data Visualizations",
    "section": "Using alpha (opacity)",
    "text": "Using alpha (opacity)\nOne way to deal with overplotting is to set the opacity low.\n\nggplot(data = NHANES,\n       aes(x = Height, y = Weight)) +\n  geom_point(alpha=0.01) + \n  facet_grid( Gender ~ PregnantNow )"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#geom_density2d",
    "href": "slides/2024-08-28-dataviz.html#geom_density2d",
    "title": "Better Data Visualizations",
    "section": "geom_density2d",
    "text": "geom_density2d\nAlternatively (or simultaneously) we might prefer a different geom altogether.\n\nggplot(data = NHANES,\n       aes(x = Height, y = Weight)) +\n  geom_density2d() + \n  facet_grid( Gender ~ PregnantNow )"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#multiple-layers",
    "href": "slides/2024-08-28-dataviz.html#multiple-layers",
    "title": "Better Data Visualizations",
    "section": "Multiple layers",
    "text": "Multiple layers\n\n\n\nggplot(data = HELP_data, \n       aes(x = children, y = age)) +\n  geom_boxplot(outlier.size = 0) +\n  geom_point(alpha=.6) +\n  coord_flip()+\n  labs(title = \"HELP clinical trial at detoxification unit\")\n\n\n\n\n\n\n\n\n\n\nggplot(data = HELP_data,\n       aes(x = children, y = age)) +\n  geom_boxplot(outlier.size = 0) +\n  geom_jitter(alpha=.6, width = 0.1) +\n  coord_flip()+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#multiple-layers-1",
    "href": "slides/2024-08-28-dataviz.html#multiple-layers-1",
    "title": "Better Data Visualizations",
    "section": "Multiple layers",
    "text": "Multiple layers\n\nggplot(data = HELP_data,\n       aes(x = children, y = age)) +\n  geom_boxplot(outlier.size = 0) +\n  geom_point(alpha=.6, \n             position = position_jitter(width=.1, height=0)) +\n  coord_flip()+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#things-i-havent-mentioned-much",
    "href": "slides/2024-08-28-dataviz.html#things-i-havent-mentioned-much",
    "title": "Better Data Visualizations",
    "section": "Things I haven’t mentioned (much)",
    "text": "Things I haven’t mentioned (much)\n\ncoords (coord_flip() is good to know about)\nthemes (for customizing appearance)\nposition (position_dodge(), position_jitterdodge(), position_stack(), etc.)\ntransforming axes"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#themes",
    "href": "slides/2024-08-28-dataviz.html#themes",
    "title": "Better Data Visualizations",
    "section": "themes",
    "text": "themes\n\nlibrary(ggthemes)\nggplot(Births78, aes(x = date, y = births)) + \n  geom_point() + \n  theme_wsj()"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#jitterdodge",
    "href": "slides/2024-08-28-dataviz.html#jitterdodge",
    "title": "Better Data Visualizations",
    "section": "jitterdodge()",
    "text": "jitterdodge()\n\nggplot(data = HELP_data, \n       aes(x = substance, y = age, color = children)) +\n  geom_boxplot(coef = 10, position = position_dodge()) +\n  geom_point(aes(color = children, \n                 fill = children), \n             position = position_jitterdodge()) +\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#a-little-bit-of-everything",
    "href": "slides/2024-08-28-dataviz.html#a-little-bit-of-everything",
    "title": "Better Data Visualizations",
    "section": "A little bit of everything",
    "text": "A little bit of everything\n\nggplot(data = HELP_data, aes(x = substance, y = age, color = children)) +\n  geom_boxplot(coef = 10, position = position_dodge(width=1)) +\n  geom_point(aes(fill = children), alpha=.5, \n             position = position_jitterdodge(dodge.width=1, jitter.width = 0.2)) + \n  facet_wrap(~homeless)+\n  labs(title = \"HELP clinical trial at detoxification unit\")"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#want-to-learn-more",
    "href": "slides/2024-08-28-dataviz.html#want-to-learn-more",
    "title": "Better Data Visualizations",
    "section": "Want to learn more?",
    "text": "Want to learn more?\n\ndocs.ggplot2.org/\nR for Data Science by Hadley Wickham and Garrett Grolemund"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#whats-around-the-corner",
    "href": "slides/2024-08-28-dataviz.html#whats-around-the-corner",
    "title": "Better Data Visualizations",
    "section": "What’s around the corner?",
    "text": "What’s around the corner?\nshiny\n\ninteractive graphics / modeling\nhttps://shiny.rstudio.com/\n\nplotly\n\nPlotly is an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js. The plotly R libary contains the ggplotly function , which will convert ggplot2 figures into a Plotly object. Furthermore, you have the option of manipulating the Plotly object with the style function.\n\n\nhttps://plot.ly/ggplot2/getting-started/\n\ngganimate\n\ngganimate tutorial\n\nTufte (1997) Visual and Statistical Thinking: Displays of Evidence for Making Decisions. (Use Google to find it.)"
  },
  {
    "objectID": "github.html#connecting-your-github-account-to-gradescope",
    "href": "github.html#connecting-your-github-account-to-gradescope",
    "title": "Working on assignments with GitHub",
    "section": "Connecting your GitHub account to Gradescope",
    "text": "Connecting your GitHub account to Gradescope\nThe first time you go to submit an assignment on Gradescope, you will be asked to connect to GitHub. Here are the steps to follow to make that connection:\n\nAccess Gradescope from Canvas: From Canvas, click on Gradescope in the Course Navigation menu. You will be asked to authorize the Gradescope integration.\nNavigate to Gradescope.com: In a new tab (same browser), navigate to https://www.gradescope.com/. Gradescope should recognize your student user account from the Canvas integration.\nGo to Gradescope Account Settings: Click on Account (bottom left of the screen) and then Edit Account.\n\n\n\n\n\n\nChange your Gradescope account settings.\n\n\n\n\nThis will take you to your Account Settings in Gradescope. Here, you’ll have the option to verify your Pomona email address and set up a password.\n\nLink Your GitHub Account to Gradescope: Scroll to the bottom of the page to the Link External Account menu. Click on Link a GitHub account.\n\n\n\n\n\n\nLinking GitHub to Gradescope.\n\n\n\n\nYou’ll be prompted to authorize GitHub and connect it to Gradescope. In the drop-down menu under Repositories, be sure to select “Public and private” to enable full access.\n\n\n\n\n\nAuthorizing Gradescope to talk to GitHub.\n\n\n\n\nWhen prompted, log in to your GitHub account to complete the process (I don’t know if you need your PAT or your “Go(ubs!” password, try both!).\nAfter your accounts have been linked, you’ll see a message that says “Successfully authenticated with GitHub.”\n\n\n\n\n\nSuccessful integration of GitHub and Gradescope\n\n\n\n\n\nReturn to Canvas & Verify the Connection\n\nNow, you can return to Canvas and navigate back to Gradescope. If you are returning to your previous tab, you may need to refresh the page to make sure your account settings are updated.\nClick on your programming assignment in Gradescope. Verify that the GitHub connection is working, and that you can see a list of your GitHub files in the drop-down menu when you are submitting an assignment.\n\n\n\n\n\nSubmitting HW from GitHub to Gradescope."
  },
  {
    "objectID": "github.html#submitting-assignments-after-having-connected-to-github",
    "href": "github.html#submitting-assignments-after-having-connected-to-github",
    "title": "Working on assignments with GitHub",
    "section": "Submitting assignments after having connected to GitHub",
    "text": "Submitting assignments after having connected to GitHub\nTo submit your assignment, complete the following steps:\n\nVia Canvas, access the course’s Gradescope site, select the appropriate assignment, and then choose GitHub as the submission method.\nSelect the appropriate GitHub repository. The branch will always be “main”.\n\nYou can submit multiple times before the deadline. Your last submission will determine your grade.\nOnce assignments are completely graded, you will be able to see your grade and assignment feedback on Gradescope. Grades will also be synced with Canvas.\n\n:::"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#layers",
    "href": "slides/2024-08-28-dataviz.html#layers",
    "title": "Better Data Visualizations",
    "section": "Layers",
    "text": "Layers\nLayer 1\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78, \n       aes(x = date, y = births))"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#layers-1",
    "href": "slides/2024-08-28-dataviz.html#layers-1",
    "title": "Better Data Visualizations",
    "section": "Layers",
    "text": "Layers\nLayer 2\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78, \n       aes(x = date, y = births)) + \n  geom_point()"
  },
  {
    "objectID": "slides/2024-08-28-dataviz.html#layers-2",
    "href": "slides/2024-08-28-dataviz.html#layers-2",
    "title": "Better Data Visualizations",
    "section": "Layers",
    "text": "Layers\nLayer 3\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = Births78, \n       aes(x = date, y = births)) + \n  geom_point() +\n  labs(title = \"US Births in 1978\")"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#tidy-data",
    "href": "slides/2024-09-11-wrangling1.html#tidy-data",
    "title": "Data Wrangling",
    "section": "Tidy data",
    "text": "Tidy data\n\neach row = a unit of observation (here, a penguin)\neach column = a measure on some variable of interest, either quantitative (numbers with units) or categorical (discrete possibilities or categories)\neach entry contains a single data value; no analysis, summaries, footnotes, comments, etc, and only one value per cell"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#definition-of-datum",
    "href": "slides/2024-09-11-wrangling1.html#definition-of-datum",
    "title": "Data Wrangling",
    "section": "Definition of datum",
    "text": "Definition of datum\nThe definition of datum can be much broader:\n\nDefinition of datum from the Oxford English Dictionary"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#tidying-data",
    "href": "slides/2024-09-11-wrangling1.html#tidying-data",
    "title": "Data Wrangling",
    "section": "Tidying data",
    "text": "Tidying data\nHow would you wrangle each data example into a tidy format?\n\nthe emails in your inbox\n\nsocial media texts\n\nimages\n\nvideos\n\naudio files"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#not-tidy-active-duty-military",
    "href": "slides/2024-09-11-wrangling1.html#not-tidy-active-duty-military",
    "title": "Data Wrangling",
    "section": "Not tidy – Active Duty Military",
    "text": "Not tidy – Active Duty Military\nThe Active Duty data are not tidy! What are the cases? How are the data not tidy? What might the data look like in tidy form? Suppose that the case was “an individual in the armed forces.” What variables would you use to capture the information in the following table?"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#tidy-packages-the-tidyverse",
    "href": "slides/2024-09-11-wrangling1.html#tidy-packages-the-tidyverse",
    "title": "Data Wrangling",
    "section": "Tidy packages: the tidyverse",
    "text": "Tidy packages: the tidyverse\n\nimage credit: https://www.tidyverse.org/."
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#some-basic-verbs",
    "href": "slides/2024-09-11-wrangling1.html#some-basic-verbs",
    "title": "Data Wrangling",
    "section": "Some Basic Verbs",
    "text": "Some Basic Verbs\n\nfilter()\narrange()\nselect()\ndistinct()\nmutate()\nsummarize()\nsample_n()"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#filter",
    "href": "slides/2024-09-11-wrangling1.html#filter",
    "title": "Data Wrangling",
    "section": "filter()",
    "text": "filter()\nAllows you to select a subset of the rows of a data frame. The first argument is the name of the data frame, the following arguments are the filters that you’d like to apply\nFor all flights on January 1st:\n\nfilter(flights, month == 1, day == 1)\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#constructing-filters",
    "href": "slides/2024-09-11-wrangling1.html#constructing-filters",
    "title": "Data Wrangling",
    "section": "Constructing filters",
    "text": "Constructing filters\nFilters are constructed of logical operators: &lt;, &gt;, &lt;=, &gt;=, ==, != (and some others).\nAdding them one by one to filter() is akin to saying “this AND that”. To say “this OR that OR both”, use |.\n\nfilter(flights, month == 1 | month == 2)\n\n# A tibble: 51,955 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 51,945 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#practice",
    "href": "slides/2024-09-11-wrangling1.html#practice",
    "title": "Data Wrangling",
    "section": "Practice",
    "text": "Practice\nConstruct filters to isolate:\n\nFlights that left on St. Patrick’s Day.\nFlights that were destined for Chicago’s primary airport.\nFlights that were destined for Chicago’s primary airport and were operated by United Airlines.\nFlights with flight times more than 2000 miles or that were in the air more than 5 hours."
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#solution",
    "href": "slides/2024-09-11-wrangling1.html#solution",
    "title": "Data Wrangling",
    "section": "Solution",
    "text": "Solution\n\nFlights that left on St. Patrick’s Day.\nFlights that were destined for Chicago’s primary airport.\nFlights that were destined for Chicago’s primary airport and were operated by United Airlines.\nFlights with flight times more than 2000 miles or that were in the air more than 5 hours.\n\n\nfilter(flights, month == 3, day == 17)\nfilter(flights, dest == \"ORD\")\nfilter(flights, dest == \"ORD\", carrier == \"UA\")\nfilter(flights, distance &gt; 2000 | air_time &gt; 5*60)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#arrange",
    "href": "slides/2024-09-11-wrangling1.html#arrange",
    "title": "Data Wrangling",
    "section": "arrange()",
    "text": "arrange()\narrange() reorders the rows: It takes a data frame, and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns:\n\narrange(flights, year, month, day)\n\nUse desc() to sort in descending order.\n\narrange(flights, desc(arr_delay))"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#select",
    "href": "slides/2024-09-11-wrangling1.html#select",
    "title": "Data Wrangling",
    "section": "select()",
    "text": "select()\nOften you work with large datasets with many columns where only a few are actually of interest to you. select() allows you to rapidly zoom in on a useful subset using operations that usually only work on numeric variable positions:\n\nselect(flights, year, month, day)\n\nYou can exclude columns using - and specify a range using :.\n\nselect(flights, -(year:day))"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#distinct",
    "href": "slides/2024-09-11-wrangling1.html#distinct",
    "title": "Data Wrangling",
    "section": "distinct()",
    "text": "distinct()\nA common use of select() is to find out which values a set of variables takes. This is particularly useful in conjunction with the distinct() verb which only returns the unique values in a table.\nWhat do the following data correspond to?\n\ndistinct(select(flights, origin, dest))\n\n# A tibble: 224 × 2\n   origin dest \n   &lt;chr&gt;  &lt;chr&gt;\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 214 more rows"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#mutate",
    "href": "slides/2024-09-11-wrangling1.html#mutate",
    "title": "Data Wrangling",
    "section": "mutate()",
    "text": "mutate()\nAs well as selecting from the set of existing columns, it’s often useful to add new columns that are functions of existing columns. This is the job of mutate():\n\nselect(mutate(flights, gain = dep_delay - arr_delay), \n       flight, dep_delay, arr_delay, gain)\n\n# A tibble: 336,776 × 4\n   flight dep_delay arr_delay  gain\n    &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1   1545         2        11    -9\n 2   1714         4        20   -16\n 3   1141         2        33   -31\n 4    725        -1       -18    17\n 5    461        -6       -25    19\n 6   1696        -4        12   -16\n 7    507        -5        19   -24\n 8   5708        -3       -14    11\n 9     79        -3        -8     5\n10    301        -2         8   -10\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#summarize-and-sample_n",
    "href": "slides/2024-09-11-wrangling1.html#summarize-and-sample_n",
    "title": "Data Wrangling",
    "section": "summarize() and sample_n()",
    "text": "summarize() and sample_n()\nsummarize() collapses a data frame to a single row based on some function. It’s not very useful yet, but it will be.\nsample_n() provides you with a random sample of rows.\n\nsummarize(flights, delay = mean(dep_delay, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  delay\n  &lt;dbl&gt;\n1  12.6\n\nsample_n(flights, 10)\n\n# A tibble: 10 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1    13       NA           2125        NA       NA           2240\n 2  2013     2    27     1633           1610        23     1901           1917\n 3  2013     2     7     1533           1535        -2     1800           1743\n 4  2013     4    16     1232           1236        -4     1422           1431\n 5  2013    10     9     1938           1940        -2     2220           2252\n 6  2013     2    24     1114           1115        -1     1422           1425\n 7  2013     1    21     1738           1545       113     1847           1703\n 8  2013    10    29      920            930       -10     1201           1237\n 9  2013     3     2     1412           1350        22     1654           1715\n10  2013     1    16     1859           1900        -1     2004           2015\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#practice-1",
    "href": "slides/2024-09-11-wrangling1.html#practice-1",
    "title": "Data Wrangling",
    "section": "Practice",
    "text": "Practice\nMutate the data to create a new column that contains the average speed traveled by the plane for each flight.\nSelect the new variable and save it, along with tailnum, as a new data frame object."
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#practice-2",
    "href": "slides/2024-09-11-wrangling1.html#practice-2",
    "title": "Data Wrangling",
    "section": "Practice",
    "text": "Practice\nMutate the data to create a new column that contains the average speed traveled by the plane for each flight.\nSelect the new variable and save it, along with tailnum, as a new data frame object.\n\nflights2 &lt;- mutate(flights, speed = distance/(air_time/60))\nspeed_data &lt;- select(flights2, tailnum, speed)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#group_by",
    "href": "slides/2024-09-11-wrangling1.html#group_by",
    "title": "Data Wrangling",
    "section": "group_by()",
    "text": "group_by()\nsummarize() and sample_n() are even more powerful when combined with the idea of “group by”, repeating the operation separately on groups of observations within the dataset.\nThe group_by() function describes how to break a dataset down into groups of rows."
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#group_by-1",
    "href": "slides/2024-09-11-wrangling1.html#group_by-1",
    "title": "Data Wrangling",
    "section": "group_by()",
    "text": "group_by()\nFind the fastest airplanes in the bunch, measured as the average speed per airplane.\n\nby_tailnum &lt;- group_by(speed_data, tailnum)\navg_speed &lt;- summarize(by_tailnum, \n                       count = n(), \n                       avg_speed = mean(speed, na.rm = TRUE))\narrange(avg_speed, desc(avg_speed))\n\n# A tibble: 4,044 × 3\n   tailnum count avg_speed\n   &lt;chr&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 N228UA      1      501.\n 2 N315AS      1      499.\n 3 N654UA      1      499.\n 4 N819AW      1      490.\n 5 N382HA     26      486.\n 6 N388HA     36      484.\n 7 N391HA     21      484.\n 8 N777UA      1      483.\n 9 N385HA     28      483.\n10 N392HA     13      482.\n# ℹ 4,034 more rows"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#chaining",
    "href": "slides/2024-09-11-wrangling1.html#chaining",
    "title": "Data Wrangling",
    "section": "Chaining",
    "text": "Chaining\nInstead of applying each verb step-by-step, we can chain them into a single data pipeline, connected with the |&gt; operator. You start the pipeline with a data frame and then pass it to each function in turn.\nThe pipe syntax (|&gt;) takes a data frame and sends it to the argument of a function. The mapping goes to the first available argument in the function. For example:\nx |&gt;  f() is the same as f(x)\nx |&gt;  f(y) is the same as f(x, y)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#mornings",
    "href": "slides/2024-09-11-wrangling1.html#mornings",
    "title": "Data Wrangling",
    "section": "Mornings",
    "text": "Mornings\n\nme_step1 &lt;- dress(me, what = sports)  \nme_step2 &lt;- exercise(me_step1, how = running)  \nme_step3 &lt;- eat(me_step2, choice = cereal)  \nme_step4 &lt;- dress(me_step3, what = school)  \nme_step5 &lt;- commute(me_step4, transportation = bike)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#mornings-1",
    "href": "slides/2024-09-11-wrangling1.html#mornings-1",
    "title": "Data Wrangling",
    "section": "Mornings",
    "text": "Mornings\n\ncommute(dress(eat(exercise(dress(me, what = sports), how = running), choice = cereal), what = school), transportation = bike)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#morning",
    "href": "slides/2024-09-11-wrangling1.html#morning",
    "title": "Data Wrangling",
    "section": "Morning",
    "text": "Morning\n(better??)\n\ncommute(\n  dress(\n    eat(\n      exercise(\n        dress(me, \n              what = sports), \n        how = running), \n      choice = cereal), \n    what = school), \n  transportation = bike)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#mornings-2",
    "href": "slides/2024-09-11-wrangling1.html#mornings-2",
    "title": "Data Wrangling",
    "section": "Mornings",
    "text": "Mornings\n\nme |&gt; \n  dress(what = sports) |&gt; \n  exercise(how = running) |&gt; \n  eat(choice = cereal) |&gt; \n  dress(what = school) |&gt; \n  commute(transportation = bike)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo",
    "href": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo",
    "title": "Data Wrangling",
    "section": "Little Bunny Foo Foo",
    "text": "Little Bunny Foo Foo\nFrom Hadley Wickham, how to think about tidy data.\n\nLittle bunny Foo Foo\n\n\nWent hopping through the forest\n\n\nScooping up the field mice\n\n\nAnd bopping them on the head"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo-1",
    "href": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo-1",
    "title": "Data Wrangling",
    "section": "Little Bunny Foo Foo",
    "text": "Little Bunny Foo Foo\nThe nursery rhyme could be created by a series of steps where the output from each step is saved as an object along the way.\n\nfoo_foo &lt;- little_bunny()\nfoo_foo_1 &lt;- hop(foo_foo, through = forest)\nfoo_foo_2 &lt;- scoop(foo_foo_2, up = field_mice)\nfoo_foo_3 &lt;- bop(foo_foo_2, on = head)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo-2",
    "href": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo-2",
    "title": "Data Wrangling",
    "section": "Little Bunny Foo Foo",
    "text": "Little Bunny Foo Foo\nAnother approach is to concatenate the functions so that there is only one output.\n\nbop(\n   scoop(\n      hop(foo_foo, through = forest),\n      up = field_mice),\n   on = head)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo-3",
    "href": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo-3",
    "title": "Data Wrangling",
    "section": "Little Bunny Foo Foo",
    "text": "Little Bunny Foo Foo\nOr even worse, as one line:\n\nbop(scoop(hop(foo_foo, through = forest), up = field_mice), on = head)))"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo-4",
    "href": "slides/2024-09-11-wrangling1.html#little-bunny-foo-foo-4",
    "title": "Data Wrangling",
    "section": "Little Bunny Foo Foo",
    "text": "Little Bunny Foo Foo\nInstead, the code can be written using the pipe in the order in which the function is evaluated:\n\nfoo_foo |&gt; \n   hop(through = forest) |&gt; \n       scoop(up = field_mice) |&gt; \n           bop(on = head)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#flights",
    "href": "slides/2024-09-11-wrangling1.html#flights",
    "title": "Data Wrangling",
    "section": "Flights",
    "text": "Flights\n\nNo pipePipe\n\n\n\nflights2 &lt;- mutate(flights, speed = distance/(air_time/60))\ntail_speed &lt;- select(flights2, tailnum, speed)\ntail_speed_grp &lt;- group_by(tail_speed, tailnum)\ntail_ave &lt;- summarize(tail_speed_grp, number = n(),\n                      avg_speed = mean(speed, na.rm = TRUE))\narrange(tail_ave, desc(avg_speed))\n\n# A tibble: 4,044 × 3\n   tailnum number avg_speed\n   &lt;chr&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 N228UA       1      501.\n 2 N315AS       1      499.\n 3 N654UA       1      499.\n 4 N819AW       1      490.\n 5 N382HA      26      486.\n 6 N388HA      36      484.\n 7 N391HA      21      484.\n 8 N777UA       1      483.\n 9 N385HA      28      483.\n10 N392HA      13      482.\n# ℹ 4,034 more rows\n\n\n\n\n\nflights |&gt; \n  mutate(speed = distance / (air_time/60)) |&gt; \n  select(tailnum, speed) |&gt; \n  group_by(tailnum) |&gt;  \n  summarize(number = n(), \n            avg_speed = mean(speed, na.rm = TRUE)) |&gt; \n  arrange(desc(avg_speed))\n\n# A tibble: 4,044 × 3\n   tailnum number avg_speed\n   &lt;chr&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 N228UA       1      501.\n 2 N315AS       1      499.\n 3 N654UA       1      499.\n 4 N819AW       1      490.\n 5 N382HA      26      486.\n 6 N388HA      36      484.\n 7 N391HA      21      484.\n 8 N777UA       1      483.\n 9 N385HA      28      483.\n10 N392HA      13      482.\n# ℹ 4,034 more rows"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#practice-3",
    "href": "slides/2024-09-11-wrangling1.html#practice-3",
    "title": "Data Wrangling",
    "section": "Practice",
    "text": "Practice\nForm a chain that creates a data frame containing only carrier and the mean departure delay time. Which carriers have the highest and lowest mean delays?"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#practice-4",
    "href": "slides/2024-09-11-wrangling1.html#practice-4",
    "title": "Data Wrangling",
    "section": "Practice",
    "text": "Practice\nForm a chain that creates a data frame containing only carrier and the mean departure delay time. Which carriers have the highest and lowest mean delays?\n\nflights |&gt; \n  group_by(carrier) |&gt; \n  summarize(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  arrange(desc(avg_delay))\n\n# A tibble: 16 × 2\n   carrier avg_delay\n   &lt;chr&gt;       &lt;dbl&gt;\n 1 F9          20.2 \n 2 EV          20.0 \n 3 YV          19.0 \n 4 FL          18.7 \n 5 WN          17.7 \n 6 9E          16.7 \n 7 B6          13.0 \n 8 VX          12.9 \n 9 OO          12.6 \n10 UA          12.1 \n11 MQ          10.6 \n12 DL           9.26\n13 AA           8.59\n14 AS           5.80\n15 HA           4.90\n16 US           3.78"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#practice-again",
    "href": "slides/2024-09-11-wrangling1.html#practice-again",
    "title": "Data Wrangling",
    "section": "Practice again",
    "text": "Practice again\nSay you’re curious about the relationship between the number of flights that each plane made in 2013, the mean distance that each of those planes flew, and the mean arrival delay. You also want to exclude the edge cases from your analysis, so focus on the planes that have logged more than 20 flights and flown an average distance of less than 2000 miles. Please form the chain that creates this dataset."
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#solution-1",
    "href": "slides/2024-09-11-wrangling1.html#solution-1",
    "title": "Data Wrangling",
    "section": "Solution",
    "text": "Solution\n\ndelay_data &lt;- flights |&gt; \n  group_by(tailnum) |&gt; \n  summarize(number = n(),\n            dist = mean(distance, na.rm = TRUE), \n            delay = mean(arr_delay, na.rm = TRUE)) |&gt; \n  filter(number &gt; 20, dist &lt; 2000)"
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#visualizing-the-data",
    "href": "slides/2024-09-11-wrangling1.html#visualizing-the-data",
    "title": "Data Wrangling",
    "section": "Visualizing the data",
    "text": "Visualizing the data\n\nVizCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndelay_data |&gt; \n ggplot(aes(dist, delay)) +\n geom_point(aes(size = number), \n            alpha = 1/2) +\n geom_smooth() +\n scale_size_area()\n\nWhen scale_size_area is used, the default behavior is to scale the area of points to be proportional to the value."
  },
  {
    "objectID": "slides/2024-09-11-wrangling1.html#pipe",
    "href": "slides/2024-09-11-wrangling1.html#pipe",
    "title": "Data Wrangling",
    "section": "Pipe",
    "text": "Pipe\n\nflights |&gt; \n  mutate(speed = distance / (air_time/60)) |&gt; \n  select(tailnum, speed) |&gt; \n  group_by(tailnum) |&gt;  \n  summarize(number = n(), \n            avg_speed = mean(speed, na.rm = TRUE)) |&gt; \n  arrange(desc(avg_speed))\n\n# A tibble: 4,044 × 3\n   tailnum number avg_speed\n   &lt;chr&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 N228UA       1      501.\n 2 N315AS       1      499.\n 3 N654UA       1      499.\n 4 N819AW       1      490.\n 5 N382HA      26      486.\n 6 N388HA      36      484.\n 7 N391HA      21      484.\n 8 N777UA       1      483.\n 9 N385HA      28      483.\n10 N392HA      13      482.\n# ℹ 4,034 more rows"
  }
]